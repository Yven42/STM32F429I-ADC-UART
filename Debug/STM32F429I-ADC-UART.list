
STM32F429I-ADC-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b24  08008b6c  08008b6c  00018b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a690  0800a690  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a690  0800a690  0001a690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a698  0800a698  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a698  0800a698  0001a698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a69c  0800a69c  0001a69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800a6a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b8  2**0
                  CONTENTS
 10 .bss          000005c4  200000b8  200000b8  000200b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000067c  2000067c  000200b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002133a  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f26  00000000  00000000  00041422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb0  00000000  00000000  00045348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a20  00000000  00000000  00046ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000293e9  00000000  00000000  00048918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020775  00000000  00000000  00071d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6bed  00000000  00000000  00092476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00189063  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000079f4  00000000  00000000  001890b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008b54 	.word	0x08008b54

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	08008b54 	.word	0x08008b54

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f002 fcc2 	bl	8002f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f81a 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 fb2c 	bl	8000bfc <MX_GPIO_Init>
  MX_CRC_Init();
 80005a4:	f000 f8d8 	bl	8000758 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005a8:	f000 f8ea 	bl	8000780 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005ac:	f000 fad6 	bl	8000b5c <MX_FMC_Init>
  MX_I2C3_Init();
 80005b0:	f000 f918 	bl	80007e4 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005b4:	f000 f956 	bl	8000864 <MX_LTDC_Init>
  MX_SPI5_Init();
 80005b8:	f000 f9d4 	bl	8000964 <MX_SPI5_Init>
  MX_TIM1_Init();
 80005bc:	f000 fa08 	bl	80009d0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005c0:	f000 faa2 	bl	8000b08 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80005c4:	f000 f876 	bl	80006b4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005c8:	f000 fa52 	bl	8000a70 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  vBoardInit();
 80005cc:	f000 fc58 	bl	8000e80 <vBoardInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <main+0x3c>
	...

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f007 fe2c 	bl	8008240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <SystemClock_Config+0xd8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a2a      	ldr	r2, [pc, #168]	; (80006ac <SystemClock_Config+0xd8>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <SystemClock_Config+0xd8>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <SystemClock_Config+0xdc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a24      	ldr	r2, [pc, #144]	; (80006b0 <SystemClock_Config+0xdc>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <SystemClock_Config+0xdc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000648:	23b4      	movs	r3, #180	; 0xb4
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000650:	2308      	movs	r3, #8
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f004 ff6f 	bl	800553c <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000664:	f000 fc78 	bl	8000f58 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000668:	f004 ff18 	bl	800549c <HAL_PWREx_EnableOverDrive>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000672:	f000 fc71 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000682:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2105      	movs	r1, #5
 8000694:	4618      	mov	r0, r3
 8000696:	f005 f9c9 	bl	8005a2c <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006a0:	f000 fc5a 	bl	8000f58 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	; 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	463b      	mov	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_ADC1_Init+0x98>)
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <MX_ADC1_Init+0x9c>)
 80006ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_ADC1_Init+0x98>)
 80006ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_ADC1_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_ADC1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_ADC1_Init+0x98>)
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_ADC1_Init+0xa0>)
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_ADC1_Init+0x98>)
 8000702:	2201      	movs	r2, #1
 8000704:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_ADC1_Init+0x98>)
 8000710:	2201      	movs	r2, #1
 8000712:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <MX_ADC1_Init+0x98>)
 8000716:	f002 fc69 	bl	8002fec <HAL_ADC_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000720:	f000 fc1a 	bl	8000f58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000724:	2305      	movs	r3, #5
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_ADC1_Init+0x98>)
 8000736:	f002 fe07 	bl	8003348 <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000740:	f000 fc0a 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200000d4 	.word	0x200000d4
 8000750:	40012000 	.word	0x40012000
 8000754:	0f000001 	.word	0x0f000001

08000758 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_CRC_Init+0x20>)
 800075e:	4a07      	ldr	r2, [pc, #28]	; (800077c <MX_CRC_Init+0x24>)
 8000760:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_CRC_Init+0x20>)
 8000764:	f003 f900 	bl	8003968 <HAL_CRC_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800076e:	f000 fbf3 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000011c 	.word	0x2000011c
 800077c:	40023000 	.word	0x40023000

08000780 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_DMA2D_Init+0x5c>)
 8000786:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <MX_DMA2D_Init+0x60>)
 8000788:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_DMA2D_Init+0x5c>)
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_DMA2D_Init+0x5c>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_DMA2D_Init+0x5c>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_DMA2D_Init+0x5c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_DMA2D_Init+0x5c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_DMA2D_Init+0x5c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_DMA2D_Init+0x5c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <MX_DMA2D_Init+0x5c>)
 80007b6:	f003 fab1 	bl	8003d1c <HAL_DMA2D_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007c0:	f000 fbca 	bl	8000f58 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007c4:	2101      	movs	r1, #1
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_DMA2D_Init+0x5c>)
 80007c8:	f003 fd16 	bl	80041f8 <HAL_DMA2D_ConfigLayer>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007d2:	f000 fbc1 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000124 	.word	0x20000124
 80007e0:	4002b000 	.word	0x4002b000

080007e4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_I2C3_Init+0x74>)
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <MX_I2C3_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_I2C3_Init+0x74>)
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <MX_I2C3_Init+0x7c>)
 80007f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_I2C3_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_I2C3_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_I2C3_Init+0x74>)
 8000802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000806:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_I2C3_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_I2C3_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_I2C3_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_I2C3_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_I2C3_Init+0x74>)
 8000822:	f004 f8e9 	bl	80049f8 <HAL_I2C_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800082c:	f000 fb94 	bl	8000f58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	4809      	ldr	r0, [pc, #36]	; (8000858 <MX_I2C3_Init+0x74>)
 8000834:	f004 fa24 	bl	8004c80 <HAL_I2CEx_ConfigAnalogFilter>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800083e:	f000 fb8b 	bl	8000f58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_I2C3_Init+0x74>)
 8000846:	f004 fa57 	bl	8004cf8 <HAL_I2CEx_ConfigDigitalFilter>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000850:	f000 fb82 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000164 	.word	0x20000164
 800085c:	40005c00 	.word	0x40005c00
 8000860:	000186a0 	.word	0x000186a0

08000864 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08e      	sub	sp, #56	; 0x38
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2234      	movs	r2, #52	; 0x34
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f007 fce5 	bl	8008240 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000876:	4b39      	ldr	r3, [pc, #228]	; (800095c <MX_LTDC_Init+0xf8>)
 8000878:	4a39      	ldr	r2, [pc, #228]	; (8000960 <MX_LTDC_Init+0xfc>)
 800087a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800087c:	4b37      	ldr	r3, [pc, #220]	; (800095c <MX_LTDC_Init+0xf8>)
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000882:	4b36      	ldr	r3, [pc, #216]	; (800095c <MX_LTDC_Init+0xf8>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000888:	4b34      	ldr	r3, [pc, #208]	; (800095c <MX_LTDC_Init+0xf8>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800088e:	4b33      	ldr	r3, [pc, #204]	; (800095c <MX_LTDC_Init+0xf8>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000894:	4b31      	ldr	r3, [pc, #196]	; (800095c <MX_LTDC_Init+0xf8>)
 8000896:	2209      	movs	r2, #9
 8000898:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800089a:	4b30      	ldr	r3, [pc, #192]	; (800095c <MX_LTDC_Init+0xf8>)
 800089c:	2201      	movs	r2, #1
 800089e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80008a0:	4b2e      	ldr	r3, [pc, #184]	; (800095c <MX_LTDC_Init+0xf8>)
 80008a2:	221d      	movs	r2, #29
 80008a4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <MX_LTDC_Init+0xf8>)
 80008a8:	2203      	movs	r2, #3
 80008aa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80008ac:	4b2b      	ldr	r3, [pc, #172]	; (800095c <MX_LTDC_Init+0xf8>)
 80008ae:	f240 120d 	movw	r2, #269	; 0x10d
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80008b4:	4b29      	ldr	r3, [pc, #164]	; (800095c <MX_LTDC_Init+0xf8>)
 80008b6:	f240 1243 	movw	r2, #323	; 0x143
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80008bc:	4b27      	ldr	r3, [pc, #156]	; (800095c <MX_LTDC_Init+0xf8>)
 80008be:	f240 1217 	movw	r2, #279	; 0x117
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <MX_LTDC_Init+0xf8>)
 80008c6:	f240 1247 	movw	r2, #327	; 0x147
 80008ca:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <MX_LTDC_Init+0xf8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_LTDC_Init+0xf8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_LTDC_Init+0xf8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008e4:	481d      	ldr	r0, [pc, #116]	; (800095c <MX_LTDC_Init+0xf8>)
 80008e6:	f004 fa47 	bl	8004d78 <HAL_LTDC_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80008f0:	f000 fb32 	bl	8000f58 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80008f8:	23f0      	movs	r3, #240	; 0xf0
 80008fa:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000900:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000904:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000906:	2302      	movs	r3, #2
 8000908:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800090a:	23ff      	movs	r3, #255	; 0xff
 800090c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000912:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000916:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000918:	2307      	movs	r3, #7
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800091c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000922:	23f0      	movs	r3, #240	; 0xf0
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000926:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_LTDC_Init+0xf8>)
 8000946:	f004 fba9 	bl	800509c <HAL_LTDC_ConfigLayer>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000950:	f000 fb02 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	3738      	adds	r7, #56	; 0x38
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200001b8 	.word	0x200001b8
 8000960:	40016800 	.word	0x40016800

08000964 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000968:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_SPI5_Init+0x64>)
 800096a:	4a18      	ldr	r2, [pc, #96]	; (80009cc <MX_SPI5_Init+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_SPI5_Init+0x64>)
 8000970:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000974:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_SPI5_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_SPI5_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_SPI5_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_SPI5_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_SPI5_Init+0x64>)
 8000990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000994:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_SPI5_Init+0x64>)
 8000998:	2218      	movs	r2, #24
 800099a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_SPI5_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_SPI5_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_SPI5_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_SPI5_Init+0x64>)
 80009b0:	220a      	movs	r2, #10
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_SPI5_Init+0x64>)
 80009b6:	f005 fcdc 	bl	8006372 <HAL_SPI_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80009c0:	f000 faca 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000260 	.word	0x20000260
 80009cc:	40015000 	.word	0x40015000

080009d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e4:	463b      	mov	r3, r7
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_TIM1_Init+0x98>)
 80009ee:	4a1f      	ldr	r2, [pc, #124]	; (8000a6c <MX_TIM1_Init+0x9c>)
 80009f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_TIM1_Init+0x98>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_TIM1_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_TIM1_Init+0x98>)
 8000a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_TIM1_Init+0x98>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_TIM1_Init+0x98>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_TIM1_Init+0x98>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a18:	4813      	ldr	r0, [pc, #76]	; (8000a68 <MX_TIM1_Init+0x98>)
 8000a1a:	f006 fa89 	bl	8006f30 <HAL_TIM_Base_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a24:	f000 fa98 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	4619      	mov	r1, r3
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MX_TIM1_Init+0x98>)
 8000a36:	f006 fc43 	bl	80072c0 <HAL_TIM_ConfigClockSource>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a40:	f000 fa8a 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_TIM1_Init+0x98>)
 8000a52:	f006 fe5f 	bl	8007714 <HAL_TIMEx_MasterConfigSynchronization>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a5c:	f000 fa7c 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200002b8 	.word	0x200002b8
 8000a6c:	40010000 	.word	0x40010000

08000a70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	463b      	mov	r3, r7
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000a96:	220a      	movs	r2, #10
 8000a98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1022;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000aa2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000aa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ab4:	4813      	ldr	r0, [pc, #76]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000ab6:	f006 fa3b 	bl	8006f30 <HAL_TIM_Base_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ac0:	f000 fa4a 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000ad2:	f006 fbf5 	bl	80072c0 <HAL_TIM_ConfigClockSource>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000adc:	f000 fa3c 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_TIM2_Init+0x94>)
 8000aee:	f006 fe11 	bl	8007714 <HAL_TIMEx_MasterConfigSynchronization>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000af8:	f000 fa2e 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000300 	.word	0x20000300

08000b08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <MX_USART1_UART_Init+0x50>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b14:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000b18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_USART1_UART_Init+0x4c>)
 8000b40:	f006 fe78 	bl	8007834 <HAL_UART_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b4a:	f000 fa05 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000348 	.word	0x20000348
 8000b58:	40011000 	.word	0x40011000

08000b5c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
 8000b70:	615a      	str	r2, [r3, #20]
 8000b72:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <MX_FMC_Init+0x98>)
 8000b76:	4a20      	ldr	r2, [pc, #128]	; (8000bf8 <MX_FMC_Init+0x9c>)
 8000b78:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <MX_FMC_Init+0x98>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <MX_FMC_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_FMC_Init+0x98>)
 8000b88:	2204      	movs	r2, #4
 8000b8a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <MX_FMC_Init+0x98>)
 8000b8e:	2210      	movs	r2, #16
 8000b90:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_FMC_Init+0x98>)
 8000b94:	2240      	movs	r2, #64	; 0x40
 8000b96:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_FMC_Init+0x98>)
 8000b9a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b9e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_FMC_Init+0x98>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_FMC_Init+0x98>)
 8000ba8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_FMC_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_FMC_Init+0x98>)
 8000bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_FMC_Init+0x98>)
 8000bde:	f005 fb37 	bl	8006250 <HAL_SDRAM_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000be8:	f000 f9b6 	bl	8000f58 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000038c 	.word	0x2000038c
 8000bf8:	a0000140 	.word	0xa0000140

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08e      	sub	sp, #56	; 0x38
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
 8000c16:	4b93      	ldr	r3, [pc, #588]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a92      	ldr	r2, [pc, #584]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c1c:	f043 0310 	orr.w	r3, r3, #16
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b90      	ldr	r3, [pc, #576]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0310 	and.w	r3, r3, #16
 8000c2a:	623b      	str	r3, [r7, #32]
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
 8000c32:	4b8c      	ldr	r3, [pc, #560]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a8b      	ldr	r2, [pc, #556]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b89      	ldr	r3, [pc, #548]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	61fb      	str	r3, [r7, #28]
 8000c48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
 8000c4e:	4b85      	ldr	r3, [pc, #532]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a84      	ldr	r2, [pc, #528]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c54:	f043 0320 	orr.w	r3, r3, #32
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b82      	ldr	r3, [pc, #520]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0320 	and.w	r3, r3, #32
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	4b7e      	ldr	r3, [pc, #504]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a7d      	ldr	r2, [pc, #500]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b7b      	ldr	r3, [pc, #492]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b77      	ldr	r3, [pc, #476]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a76      	ldr	r2, [pc, #472]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b74      	ldr	r3, [pc, #464]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b70      	ldr	r3, [pc, #448]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a6f      	ldr	r2, [pc, #444]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b6d      	ldr	r3, [pc, #436]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	4b69      	ldr	r3, [pc, #420]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a68      	ldr	r2, [pc, #416]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b66      	ldr	r3, [pc, #408]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b62      	ldr	r3, [pc, #392]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a61      	ldr	r2, [pc, #388]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b5f      	ldr	r3, [pc, #380]	; (8000e64 <MX_GPIO_Init+0x268>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TimerPin_GPIO_Port, TimerPin_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	485c      	ldr	r0, [pc, #368]	; (8000e68 <MX_GPIO_Init+0x26c>)
 8000cf8:	f003 fe64 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2116      	movs	r1, #22
 8000d00:	485a      	ldr	r0, [pc, #360]	; (8000e6c <MX_GPIO_Init+0x270>)
 8000d02:	f003 fe5f 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	4859      	ldr	r0, [pc, #356]	; (8000e70 <MX_GPIO_Init+0x274>)
 8000d0c:	f003 fe5a 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d16:	4857      	ldr	r0, [pc, #348]	; (8000e74 <MX_GPIO_Init+0x278>)
 8000d18:	f003 fe54 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d22:	4855      	ldr	r0, [pc, #340]	; (8000e78 <MX_GPIO_Init+0x27c>)
 8000d24:	f003 fe4e 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TimerPin_Pin */
  GPIO_InitStruct.Pin = TimerPin_Pin;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TimerPin_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	484a      	ldr	r0, [pc, #296]	; (8000e68 <MX_GPIO_Init+0x26c>)
 8000d40:	f003 fb88 	bl	8004454 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d44:	2316      	movs	r3, #22
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4844      	ldr	r0, [pc, #272]	; (8000e6c <MX_GPIO_Init+0x270>)
 8000d5c:	f003 fb7a 	bl	8004454 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d60:	f248 0307 	movw	r3, #32775	; 0x8007
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d66:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	483e      	ldr	r0, [pc, #248]	; (8000e70 <MX_GPIO_Init+0x274>)
 8000d78:	f003 fb6c 	bl	8004454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4837      	ldr	r0, [pc, #220]	; (8000e70 <MX_GPIO_Init+0x274>)
 8000d94:	f003 fb5e 	bl	8004454 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d98:	2320      	movs	r3, #32
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d9c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	482f      	ldr	r0, [pc, #188]	; (8000e6c <MX_GPIO_Init+0x270>)
 8000dae:	f003 fb51 	bl	8004454 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000db2:	2304      	movs	r3, #4
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	482d      	ldr	r0, [pc, #180]	; (8000e7c <MX_GPIO_Init+0x280>)
 8000dc6:	f003 fb45 	bl	8004454 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000dca:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000ddc:	230c      	movs	r3, #12
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4825      	ldr	r0, [pc, #148]	; (8000e7c <MX_GPIO_Init+0x280>)
 8000de8:	f003 fb34 	bl	8004454 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	481e      	ldr	r0, [pc, #120]	; (8000e7c <MX_GPIO_Init+0x280>)
 8000e02:	f003 fb27 	bl	8004454 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000e06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4816      	ldr	r0, [pc, #88]	; (8000e74 <MX_GPIO_Init+0x278>)
 8000e1c:	f003 fb1a 	bl	8004454 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000e20:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	480e      	ldr	r0, [pc, #56]	; (8000e74 <MX_GPIO_Init+0x278>)
 8000e3a:	f003 fb0b 	bl	8004454 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000e3e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4808      	ldr	r0, [pc, #32]	; (8000e78 <MX_GPIO_Init+0x27c>)
 8000e58:	f003 fafc 	bl	8004454 <HAL_GPIO_Init>

}
 8000e5c:	bf00      	nop
 8000e5e:	3738      	adds	r7, #56	; 0x38
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40020800 	.word	0x40020800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40020c00 	.word	0x40020c00
 8000e78:	40021800 	.word	0x40021800
 8000e7c:	40020400 	.word	0x40020400

08000e80 <vBoardInit>:

/* USER CODE BEGIN 4 */
static void vBoardInit(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	//First ADC Value
	HAL_ADC_Start(&hadc1);
 8000e84:	4825      	ldr	r0, [pc, #148]	; (8000f1c <vBoardInit+0x9c>)
 8000e86:	f002 f8f5 	bl	8003074 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8e:	4823      	ldr	r0, [pc, #140]	; (8000f1c <vBoardInit+0x9c>)
 8000e90:	f002 f9c2 	bl	8003218 <HAL_ADC_PollForConversion>
	u16ADC_Val = HAL_ADC_GetValue(&hadc1);
 8000e94:	4821      	ldr	r0, [pc, #132]	; (8000f1c <vBoardInit+0x9c>)
 8000e96:	f002 fa4a 	bl	800332e <HAL_ADC_GetValue>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <vBoardInit+0xa0>)
 8000ea0:	801a      	strh	r2, [r3, #0]

	//Timer start
	HAL_TIM_Base_Start_IT(&htim2);
 8000ea2:	4820      	ldr	r0, [pc, #128]	; (8000f24 <vBoardInit+0xa4>)
 8000ea4:	f006 f894 	bl	8006fd0 <HAL_TIM_Base_Start_IT>
	//Display
	BSP_LCD_Init();
 8000ea8:	f001 f8fa 	bl	80020a0 <BSP_LCD_Init>

	//Start Screen
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 8000eac:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f001 f977 	bl	80021a4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 8000eb6:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f001 f972 	bl	80021a4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f001 f9d3 	bl	800226c <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8000ec6:	f001 fc63 	bl	8002790 <BSP_LCD_DisplayOn>

	BSP_LCD_Clear(LCD_COLOR_ORANGE);
 8000eca:	4817      	ldr	r0, [pc, #92]	; (8000f28 <vBoardInit+0xa8>)
 8000ecc:	f001 fa2a 	bl	8002324 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f001 f9da 	bl	800228c <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f001 f9ee 	bl	80022bc <BSP_LCD_SetBackColor>
	BSP_LCD_FillRect(10, 10, 220, 80);
 8000ee0:	2350      	movs	r3, #80	; 0x50
 8000ee2:	22dc      	movs	r2, #220	; 0xdc
 8000ee4:	210a      	movs	r1, #10
 8000ee6:	200a      	movs	r0, #10
 8000ee8:	f001 fbf8 	bl	80026dc <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000eec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000ef0:	f001 f9cc 	bl	800228c <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(10, 10, 220, 80);
 8000ef4:	2350      	movs	r3, #80	; 0x50
 8000ef6:	22dc      	movs	r2, #220	; 0xdc
 8000ef8:	210a      	movs	r1, #10
 8000efa:	200a      	movs	r0, #10
 8000efc:	f001 fbbc 	bl	8002678 <BSP_LCD_DrawRect>

	BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"Embedded", CENTER_MODE);
 8000f00:	2301      	movs	r3, #1
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <vBoardInit+0xac>)
 8000f04:	211e      	movs	r1, #30
 8000f06:	2000      	movs	r0, #0
 8000f08:	f001 fa78 	bl	80023fc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 50, (uint8_t*)"KI", CENTER_MODE);
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <vBoardInit+0xb0>)
 8000f10:	2132      	movs	r1, #50	; 0x32
 8000f12:	2000      	movs	r0, #0
 8000f14:	f001 fa72 	bl	80023fc <BSP_LCD_DisplayStringAt>
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200000d4 	.word	0x200000d4
 8000f20:	200003c0 	.word	0x200003c0
 8000f24:	20000300 	.word	0x20000300
 8000f28:	ffffa500 	.word	0xffffa500
 8000f2c:	08008b6c 	.word	0x08008b6c
 8000f30:	08008b78 	.word	0x08008b78

08000f34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f46:	f002 f80d 	bl	8002f64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40001000 	.word	0x40001000

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>
	...

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f78:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800

08000fb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a17      	ldr	r2, [pc, #92]	; (8001030 <HAL_ADC_MspInit+0x7c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d127      	bne.n	8001026 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_ADC_MspInit+0x80>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a15      	ldr	r2, [pc, #84]	; (8001034 <HAL_ADC_MspInit+0x80>)
 8000fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <HAL_ADC_MspInit+0x80>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <HAL_ADC_MspInit+0x80>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_ADC_MspInit+0x80>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_ADC_MspInit+0x80>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800100e:	2320      	movs	r3, #32
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001012:	2303      	movs	r3, #3
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <HAL_ADC_MspInit+0x84>)
 8001022:	f003 fa17 	bl	8004454 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	; 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40012000 	.word	0x40012000
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000

0800103c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_CRC_MspInit+0x3c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d10d      	bne.n	800106a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_CRC_MspInit+0x40>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a09      	ldr	r2, [pc, #36]	; (800107c <HAL_CRC_MspInit+0x40>)
 8001058:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <HAL_CRC_MspInit+0x40>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023000 	.word	0x40023000
 800107c:	40023800 	.word	0x40023800

08001080 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_DMA2D_MspInit+0x48>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d115      	bne.n	80010be <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_DMA2D_MspInit+0x4c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_DMA2D_MspInit+0x4c>)
 800109c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_DMA2D_MspInit+0x4c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2105      	movs	r1, #5
 80010b2:	205a      	movs	r0, #90	; 0x5a
 80010b4:	f002 fc2e 	bl	8003914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010b8:	205a      	movs	r0, #90	; 0x5a
 80010ba:	f002 fc47 	bl	800394c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	4002b000 	.word	0x4002b000
 80010cc:	40023800 	.word	0x40023800

080010d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a29      	ldr	r2, [pc, #164]	; (8001194 <HAL_I2C_MspInit+0xc4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d14b      	bne.n	800118a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <HAL_I2C_MspInit+0xc8>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a27      	ldr	r2, [pc, #156]	; (8001198 <HAL_I2C_MspInit+0xc8>)
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b25      	ldr	r3, [pc, #148]	; (8001198 <HAL_I2C_MspInit+0xc8>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <HAL_I2C_MspInit+0xc8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a20      	ldr	r2, [pc, #128]	; (8001198 <HAL_I2C_MspInit+0xc8>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <HAL_I2C_MspInit+0xc8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800112a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001130:	2312      	movs	r3, #18
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001134:	2301      	movs	r3, #1
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800113c:	2304      	movs	r3, #4
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4815      	ldr	r0, [pc, #84]	; (800119c <HAL_I2C_MspInit+0xcc>)
 8001148:	f003 f984 	bl	8004454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800114c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001152:	2312      	movs	r3, #18
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001156:	2301      	movs	r3, #1
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800115e:	2304      	movs	r3, #4
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	480d      	ldr	r0, [pc, #52]	; (80011a0 <HAL_I2C_MspInit+0xd0>)
 800116a:	f003 f973 	bl	8004454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_I2C_MspInit+0xc8>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <HAL_I2C_MspInit+0xc8>)
 8001178:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_I2C_MspInit+0xc8>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40005c00 	.word	0x40005c00
 8001198:	40023800 	.word	0x40023800
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020000 	.word	0x40020000

080011a4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b09a      	sub	sp, #104	; 0x68
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	2230      	movs	r2, #48	; 0x30
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f007 f83b 	bl	8008240 <memset>
  if(hltdc->Instance==LTDC)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a85      	ldr	r2, [pc, #532]	; (80013e4 <HAL_LTDC_MspInit+0x240>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	f040 8103 	bne.w	80013dc <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011d6:	2308      	movs	r3, #8
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 80011da:	233c      	movs	r3, #60	; 0x3c
 80011dc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80011de:	2305      	movs	r3, #5
 80011e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80011e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	4618      	mov	r0, r3
 80011ee:	f004 fe6f 	bl	8005ed0 <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80011f8:	f7ff feae 	bl	8000f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
 8001200:	4b79      	ldr	r3, [pc, #484]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 8001202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001204:	4a78      	ldr	r2, [pc, #480]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 8001206:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800120a:	6453      	str	r3, [r2, #68]	; 0x44
 800120c:	4b76      	ldr	r3, [pc, #472]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 800120e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001214:	623b      	str	r3, [r7, #32]
 8001216:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
 800121c:	4b72      	ldr	r3, [pc, #456]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4a71      	ldr	r2, [pc, #452]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 8001222:	f043 0320 	orr.w	r3, r3, #32
 8001226:	6313      	str	r3, [r2, #48]	; 0x30
 8001228:	4b6f      	ldr	r3, [pc, #444]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	f003 0320 	and.w	r3, r3, #32
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
 8001238:	4b6b      	ldr	r3, [pc, #428]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	4a6a      	ldr	r2, [pc, #424]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6313      	str	r3, [r2, #48]	; 0x30
 8001244:	4b68      	ldr	r3, [pc, #416]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 8001246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	4b64      	ldr	r3, [pc, #400]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	4a63      	ldr	r2, [pc, #396]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 800125a:	f043 0302 	orr.w	r3, r3, #2
 800125e:	6313      	str	r3, [r2, #48]	; 0x30
 8001260:	4b61      	ldr	r3, [pc, #388]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	4b5d      	ldr	r3, [pc, #372]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	4a5c      	ldr	r2, [pc, #368]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 8001276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800127a:	6313      	str	r3, [r2, #48]	; 0x30
 800127c:	4b5a      	ldr	r3, [pc, #360]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	4b56      	ldr	r3, [pc, #344]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	4a55      	ldr	r2, [pc, #340]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6313      	str	r3, [r2, #48]	; 0x30
 8001298:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	4b4f      	ldr	r3, [pc, #316]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	4a4e      	ldr	r2, [pc, #312]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	6313      	str	r3, [r2, #48]	; 0x30
 80012b4:	4b4c      	ldr	r3, [pc, #304]	; (80013e8 <HAL_LTDC_MspInit+0x244>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80012c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012d2:	230e      	movs	r3, #14
 80012d4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012da:	4619      	mov	r1, r3
 80012dc:	4843      	ldr	r0, [pc, #268]	; (80013ec <HAL_LTDC_MspInit+0x248>)
 80012de:	f003 f8b9 	bl	8004454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80012e2:	f641 0358 	movw	r3, #6232	; 0x1858
 80012e6:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012f4:	230e      	movs	r3, #14
 80012f6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012fc:	4619      	mov	r1, r3
 80012fe:	483c      	ldr	r0, [pc, #240]	; (80013f0 <HAL_LTDC_MspInit+0x24c>)
 8001300:	f003 f8a8 	bl	8004454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001304:	2303      	movs	r3, #3
 8001306:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001314:	2309      	movs	r3, #9
 8001316:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800131c:	4619      	mov	r1, r3
 800131e:	4835      	ldr	r0, [pc, #212]	; (80013f4 <HAL_LTDC_MspInit+0x250>)
 8001320:	f003 f898 	bl	8004454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001324:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001328:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001336:	230e      	movs	r3, #14
 8001338:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800133e:	4619      	mov	r1, r3
 8001340:	482c      	ldr	r0, [pc, #176]	; (80013f4 <HAL_LTDC_MspInit+0x250>)
 8001342:	f003 f887 	bl	8004454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001346:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800134a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001358:	230e      	movs	r3, #14
 800135a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800135c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001360:	4619      	mov	r1, r3
 8001362:	4825      	ldr	r0, [pc, #148]	; (80013f8 <HAL_LTDC_MspInit+0x254>)
 8001364:	f003 f876 	bl	8004454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001368:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800136c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800137a:	230e      	movs	r3, #14
 800137c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001382:	4619      	mov	r1, r3
 8001384:	481d      	ldr	r0, [pc, #116]	; (80013fc <HAL_LTDC_MspInit+0x258>)
 8001386:	f003 f865 	bl	8004454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800138a:	2348      	movs	r3, #72	; 0x48
 800138c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800139a:	230e      	movs	r3, #14
 800139c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013a2:	4619      	mov	r1, r3
 80013a4:	4816      	ldr	r0, [pc, #88]	; (8001400 <HAL_LTDC_MspInit+0x25c>)
 80013a6:	f003 f855 	bl	8004454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80013aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013ae:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80013bc:	2309      	movs	r3, #9
 80013be:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013c4:	4619      	mov	r1, r3
 80013c6:	480c      	ldr	r0, [pc, #48]	; (80013f8 <HAL_LTDC_MspInit+0x254>)
 80013c8:	f003 f844 	bl	8004454 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2105      	movs	r1, #5
 80013d0:	2058      	movs	r0, #88	; 0x58
 80013d2:	f002 fa9f 	bl	8003914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80013d6:	2058      	movs	r0, #88	; 0x58
 80013d8:	f002 fab8 	bl	800394c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80013dc:	bf00      	nop
 80013de:	3768      	adds	r7, #104	; 0x68
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40016800 	.word	0x40016800
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40021400 	.word	0x40021400
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40021800 	.word	0x40021800
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020c00 	.word	0x40020c00

08001404 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a19      	ldr	r2, [pc, #100]	; (8001488 <HAL_SPI_MspInit+0x84>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d12c      	bne.n	8001480 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <HAL_SPI_MspInit+0x88>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a17      	ldr	r2, [pc, #92]	; (800148c <HAL_SPI_MspInit+0x88>)
 8001430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_SPI_MspInit+0x88>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <HAL_SPI_MspInit+0x88>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a10      	ldr	r2, [pc, #64]	; (800148c <HAL_SPI_MspInit+0x88>)
 800144c:	f043 0320 	orr.w	r3, r3, #32
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <HAL_SPI_MspInit+0x88>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0320 	and.w	r3, r3, #32
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800145e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001470:	2305      	movs	r3, #5
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <HAL_SPI_MspInit+0x8c>)
 800147c:	f002 ffea 	bl	8004454 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001480:	bf00      	nop
 8001482:	3728      	adds	r7, #40	; 0x28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40015000 	.word	0x40015000
 800148c:	40023800 	.word	0x40023800
 8001490:	40021400 	.word	0x40021400

08001494 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_SPI_MspDeInit+0x30>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d10a      	bne.n	80014bc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_SPI_MspDeInit+0x34>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_SPI_MspDeInit+0x34>)
 80014ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80014b2:	f44f 7160 	mov.w	r1, #896	; 0x380
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_SPI_MspDeInit+0x38>)
 80014b8:	f003 f978 	bl	80047ac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40015000 	.word	0x40015000
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40021400 	.word	0x40021400

080014d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a18      	ldr	r2, [pc, #96]	; (8001540 <HAL_TIM_Base_MspInit+0x70>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d10e      	bne.n	8001500 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_TIM_Base_MspInit+0x74>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <HAL_TIM_Base_MspInit+0x74>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_TIM_Base_MspInit+0x74>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014fe:	e01a      	b.n	8001536 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001508:	d115      	bne.n	8001536 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <HAL_TIM_Base_MspInit+0x74>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <HAL_TIM_Base_MspInit+0x74>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_TIM_Base_MspInit+0x74>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	201c      	movs	r0, #28
 800152c:	f002 f9f2 	bl	8003914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001530:	201c      	movs	r0, #28
 8001532:	f002 fa0b 	bl	800394c <HAL_NVIC_EnableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40010000 	.word	0x40010000
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a19      	ldr	r2, [pc, #100]	; (80015cc <HAL_UART_MspInit+0x84>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d12c      	bne.n	80015c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001574:	f043 0310 	orr.w	r3, r3, #16
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_UART_MspInit+0x88>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_UART_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b4:	2307      	movs	r3, #7
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <HAL_UART_MspInit+0x8c>)
 80015c0:	f002 ff48 	bl	8004454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40011000 	.word	0x40011000
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000

080015d8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80015ec:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <HAL_FMC_MspInit+0x104>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d16f      	bne.n	80016d4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80015f4:	4b39      	ldr	r3, [pc, #228]	; (80016dc <HAL_FMC_MspInit+0x104>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	4b38      	ldr	r3, [pc, #224]	; (80016e0 <HAL_FMC_MspInit+0x108>)
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001602:	4a37      	ldr	r2, [pc, #220]	; (80016e0 <HAL_FMC_MspInit+0x108>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6393      	str	r3, [r2, #56]	; 0x38
 800160a:	4b35      	ldr	r3, [pc, #212]	; (80016e0 <HAL_FMC_MspInit+0x108>)
 800160c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001616:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800161a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001628:	230c      	movs	r3, #12
 800162a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4619      	mov	r1, r3
 8001630:	482c      	ldr	r0, [pc, #176]	; (80016e4 <HAL_FMC_MspInit+0x10c>)
 8001632:	f002 ff0f 	bl	8004454 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001636:	2301      	movs	r3, #1
 8001638:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001646:	230c      	movs	r3, #12
 8001648:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	4619      	mov	r1, r3
 800164e:	4826      	ldr	r0, [pc, #152]	; (80016e8 <HAL_FMC_MspInit+0x110>)
 8001650:	f002 ff00 	bl	8004454 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001654:	f248 1333 	movw	r3, #33075	; 0x8133
 8001658:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001666:	230c      	movs	r3, #12
 8001668:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4619      	mov	r1, r3
 800166e:	481f      	ldr	r0, [pc, #124]	; (80016ec <HAL_FMC_MspInit+0x114>)
 8001670:	f002 fef0 	bl	8004454 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001674:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001678:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001686:	230c      	movs	r3, #12
 8001688:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	4619      	mov	r1, r3
 800168e:	4818      	ldr	r0, [pc, #96]	; (80016f0 <HAL_FMC_MspInit+0x118>)
 8001690:	f002 fee0 	bl	8004454 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001694:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001698:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016a6:	230c      	movs	r3, #12
 80016a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4619      	mov	r1, r3
 80016ae:	4811      	ldr	r0, [pc, #68]	; (80016f4 <HAL_FMC_MspInit+0x11c>)
 80016b0:	f002 fed0 	bl	8004454 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80016b4:	2360      	movs	r3, #96	; 0x60
 80016b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016c4:	230c      	movs	r3, #12
 80016c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	480a      	ldr	r0, [pc, #40]	; (80016f8 <HAL_FMC_MspInit+0x120>)
 80016ce:	f002 fec1 	bl	8004454 <HAL_GPIO_Init>
 80016d2:	e000      	b.n	80016d6 <HAL_FMC_MspInit+0xfe>
    return;
 80016d4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200003c4 	.word	0x200003c4
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40021400 	.word	0x40021400
 80016e8:	40020800 	.word	0x40020800
 80016ec:	40021800 	.word	0x40021800
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40020c00 	.word	0x40020c00
 80016f8:	40020400 	.word	0x40020400

080016fc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001704:	f7ff ff68 	bl	80015d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08e      	sub	sp, #56	; 0x38
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <HAL_InitTick+0xe4>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	4a32      	ldr	r2, [pc, #200]	; (80017f4 <HAL_InitTick+0xe4>)
 800172a:	f043 0310 	orr.w	r3, r3, #16
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
 8001730:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <HAL_InitTick+0xe4>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800173c:	f107 0210 	add.w	r2, r7, #16
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f004 fb90 	bl	8005e6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d103      	bne.n	800175e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001756:	f004 fb61 	bl	8005e1c <HAL_RCC_GetPCLK1Freq>
 800175a:	6378      	str	r0, [r7, #52]	; 0x34
 800175c:	e004      	b.n	8001768 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800175e:	f004 fb5d 	bl	8005e1c <HAL_RCC_GetPCLK1Freq>
 8001762:	4603      	mov	r3, r0
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176a:	4a23      	ldr	r2, [pc, #140]	; (80017f8 <HAL_InitTick+0xe8>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	0c9b      	lsrs	r3, r3, #18
 8001772:	3b01      	subs	r3, #1
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001776:	4b21      	ldr	r3, [pc, #132]	; (80017fc <HAL_InitTick+0xec>)
 8001778:	4a21      	ldr	r2, [pc, #132]	; (8001800 <HAL_InitTick+0xf0>)
 800177a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800177c:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <HAL_InitTick+0xec>)
 800177e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001782:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001784:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <HAL_InitTick+0xec>)
 8001786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001788:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <HAL_InitTick+0xec>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <HAL_InitTick+0xec>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_InitTick+0xec>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800179c:	4817      	ldr	r0, [pc, #92]	; (80017fc <HAL_InitTick+0xec>)
 800179e:	f005 fbc7 	bl	8006f30 <HAL_TIM_Base_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80017a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d11b      	bne.n	80017e8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017b0:	4812      	ldr	r0, [pc, #72]	; (80017fc <HAL_InitTick+0xec>)
 80017b2:	f005 fc0d 	bl	8006fd0 <HAL_TIM_Base_Start_IT>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80017bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d111      	bne.n	80017e8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017c4:	2036      	movs	r0, #54	; 0x36
 80017c6:	f002 f8c1 	bl	800394c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b0f      	cmp	r3, #15
 80017ce:	d808      	bhi.n	80017e2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017d0:	2200      	movs	r2, #0
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	2036      	movs	r0, #54	; 0x36
 80017d6:	f002 f89d 	bl	8003914 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_InitTick+0xf4>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	e002      	b.n	80017e8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3738      	adds	r7, #56	; 0x38
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40023800 	.word	0x40023800
 80017f8:	431bde83 	.word	0x431bde83
 80017fc:	200003c8 	.word	0x200003c8
 8001800:	40001000 	.word	0x40001000
 8001804:	2000004c 	.word	0x2000004c

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler+0x4>

0800180e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <MemManage_Handler+0x4>

0800181a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <UsageFault_Handler+0x4>

08001826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <TIM2_IRQHandler>:
/**
  * @brief This function handles TIM2 global interrupt.
  */

void TIM2_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b09c      	sub	sp, #112	; 0x70
 8001864:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //HAL_GPIO_WritePin(TimerPin_GPIO_Port, TimerPin_Pin, GPIO_PIN_SET);
  char cBuffer[BUFFERSIZE];
  union uSend uSendValue;
  uSendValue.u16Value = u16ADC_Val;
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <TIM2_IRQHandler+0x58>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	803b      	strh	r3, [r7, #0]

  //Send UART
  snprintf(cBuffer, BUFFERSIZE, "%c%c",uSendValue.u8Value[1],uSendValue.u8Value[0]);
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	461a      	mov	r2, r3
 8001870:	783b      	ldrb	r3, [r7, #0]
 8001872:	1d38      	adds	r0, r7, #4
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	4613      	mov	r3, r2
 8001878:	4a10      	ldr	r2, [pc, #64]	; (80018bc <TIM2_IRQHandler+0x5c>)
 800187a:	2164      	movs	r1, #100	; 0x64
 800187c:	f006 fce8 	bl	8008250 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)cBuffer, 2U, 50U);
 8001880:	1d39      	adds	r1, r7, #4
 8001882:	2332      	movs	r3, #50	; 0x32
 8001884:	2202      	movs	r2, #2
 8001886:	480e      	ldr	r0, [pc, #56]	; (80018c0 <TIM2_IRQHandler+0x60>)
 8001888:	f006 f821 	bl	80078ce <HAL_UART_Transmit>

  //Polling ADC
  HAL_ADC_Start(&hadc1);
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <TIM2_IRQHandler+0x64>)
 800188e:	f001 fbf1 	bl	8003074 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001892:	f04f 31ff 	mov.w	r1, #4294967295
 8001896:	480b      	ldr	r0, [pc, #44]	; (80018c4 <TIM2_IRQHandler+0x64>)
 8001898:	f001 fcbe 	bl	8003218 <HAL_ADC_PollForConversion>
  u16ADC_Val = HAL_ADC_GetValue(&hadc1);
 800189c:	4809      	ldr	r0, [pc, #36]	; (80018c4 <TIM2_IRQHandler+0x64>)
 800189e:	f001 fd46 	bl	800332e <HAL_ADC_GetValue>
 80018a2:	4603      	mov	r3, r0
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <TIM2_IRQHandler+0x58>)
 80018a8:	801a      	strh	r2, [r3, #0]

  //HAL_GPIO_WritePin(TimerPin_GPIO_Port, TimerPin_Pin, GPIO_PIN_RESET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018aa:	4807      	ldr	r0, [pc, #28]	; (80018c8 <TIM2_IRQHandler+0x68>)
 80018ac:	f005 fc00 	bl	80070b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	3768      	adds	r7, #104	; 0x68
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200003c0 	.word	0x200003c0
 80018bc:	08008b7c 	.word	0x08008b7c
 80018c0:	20000348 	.word	0x20000348
 80018c4:	200000d4 	.word	0x200000d4
 80018c8:	20000300 	.word	0x20000300

080018cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <TIM6_DAC_IRQHandler+0x10>)
 80018d2:	f005 fbed 	bl	80070b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200003c8 	.word	0x200003c8

080018e0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <LTDC_IRQHandler+0x10>)
 80018e6:	f003 fb17 	bl	8004f18 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200001b8 	.word	0x200001b8

080018f4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <DMA2D_IRQHandler+0x10>)
 80018fa:	f002 fb6c 	bl	8003fd6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000124 	.word	0x20000124

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d207      	bcs.n	8001948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001938:	f006 fc58 	bl	80081ec <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	220c      	movs	r2, #12
 8001940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	e009      	b.n	800195c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <_sbrk+0x64>)
 8001958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20030000 	.word	0x20030000
 8001968:	00000400 	.word	0x00000400
 800196c:	20000410 	.word	0x20000410
 8001970:	20000680 	.word	0x20000680

08001974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <SystemInit+0x20>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <SystemInit+0x20>)
 8001980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800199c:	480d      	ldr	r0, [pc, #52]	; (80019d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800199e:	490e      	ldr	r1, [pc, #56]	; (80019d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019a0:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019b4:	4c0b      	ldr	r4, [pc, #44]	; (80019e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019c2:	f7ff ffd7 	bl	8001974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019c6:	f006 fc17 	bl	80081f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ca:	f7fe fde3 	bl	8000594 <main>
  bx  lr    
 80019ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80019dc:	0800a6a0 	.word	0x0800a6a0
  ldr r2, =_sbss
 80019e0:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80019e4:	2000067c 	.word	0x2000067c

080019e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC_IRQHandler>

080019ea <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80019ee:	f000 fa5d 	bl	8001eac <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80019f2:	20ca      	movs	r0, #202	; 0xca
 80019f4:	f000 f95d 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80019f8:	20c3      	movs	r0, #195	; 0xc3
 80019fa:	f000 f967 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80019fe:	2008      	movs	r0, #8
 8001a00:	f000 f964 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001a04:	2050      	movs	r0, #80	; 0x50
 8001a06:	f000 f961 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001a0a:	20cf      	movs	r0, #207	; 0xcf
 8001a0c:	f000 f951 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f000 f95b 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001a16:	20c1      	movs	r0, #193	; 0xc1
 8001a18:	f000 f958 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001a1c:	2030      	movs	r0, #48	; 0x30
 8001a1e:	f000 f955 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001a22:	20ed      	movs	r0, #237	; 0xed
 8001a24:	f000 f945 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001a28:	2064      	movs	r0, #100	; 0x64
 8001a2a:	f000 f94f 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001a2e:	2003      	movs	r0, #3
 8001a30:	f000 f94c 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001a34:	2012      	movs	r0, #18
 8001a36:	f000 f949 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001a3a:	2081      	movs	r0, #129	; 0x81
 8001a3c:	f000 f946 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001a40:	20e8      	movs	r0, #232	; 0xe8
 8001a42:	f000 f936 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001a46:	2085      	movs	r0, #133	; 0x85
 8001a48:	f000 f940 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f000 f93d 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001a52:	2078      	movs	r0, #120	; 0x78
 8001a54:	f000 f93a 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001a58:	20cb      	movs	r0, #203	; 0xcb
 8001a5a:	f000 f92a 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001a5e:	2039      	movs	r0, #57	; 0x39
 8001a60:	f000 f934 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001a64:	202c      	movs	r0, #44	; 0x2c
 8001a66:	f000 f931 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f000 f92e 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001a70:	2034      	movs	r0, #52	; 0x34
 8001a72:	f000 f92b 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001a76:	2002      	movs	r0, #2
 8001a78:	f000 f928 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001a7c:	20f7      	movs	r0, #247	; 0xf7
 8001a7e:	f000 f918 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001a82:	2020      	movs	r0, #32
 8001a84:	f000 f922 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001a88:	20ea      	movs	r0, #234	; 0xea
 8001a8a:	f000 f912 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 f91c 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f000 f919 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001a9a:	20b1      	movs	r0, #177	; 0xb1
 8001a9c:	f000 f909 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f000 f913 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001aa6:	201b      	movs	r0, #27
 8001aa8:	f000 f910 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001aac:	20b6      	movs	r0, #182	; 0xb6
 8001aae:	f000 f900 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001ab2:	200a      	movs	r0, #10
 8001ab4:	f000 f90a 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001ab8:	20a2      	movs	r0, #162	; 0xa2
 8001aba:	f000 f907 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001abe:	20c0      	movs	r0, #192	; 0xc0
 8001ac0:	f000 f8f7 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001ac4:	2010      	movs	r0, #16
 8001ac6:	f000 f901 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001aca:	20c1      	movs	r0, #193	; 0xc1
 8001acc:	f000 f8f1 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001ad0:	2010      	movs	r0, #16
 8001ad2:	f000 f8fb 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001ad6:	20c5      	movs	r0, #197	; 0xc5
 8001ad8:	f000 f8eb 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001adc:	2045      	movs	r0, #69	; 0x45
 8001ade:	f000 f8f5 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001ae2:	2015      	movs	r0, #21
 8001ae4:	f000 f8f2 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001ae8:	20c7      	movs	r0, #199	; 0xc7
 8001aea:	f000 f8e2 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001aee:	2090      	movs	r0, #144	; 0x90
 8001af0:	f000 f8ec 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001af4:	2036      	movs	r0, #54	; 0x36
 8001af6:	f000 f8dc 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001afa:	20c8      	movs	r0, #200	; 0xc8
 8001afc:	f000 f8e6 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001b00:	20f2      	movs	r0, #242	; 0xf2
 8001b02:	f000 f8d6 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f000 f8e0 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001b0c:	20b0      	movs	r0, #176	; 0xb0
 8001b0e:	f000 f8d0 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001b12:	20c2      	movs	r0, #194	; 0xc2
 8001b14:	f000 f8da 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001b18:	20b6      	movs	r0, #182	; 0xb6
 8001b1a:	f000 f8ca 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001b1e:	200a      	movs	r0, #10
 8001b20:	f000 f8d4 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001b24:	20a7      	movs	r0, #167	; 0xa7
 8001b26:	f000 f8d1 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001b2a:	2027      	movs	r0, #39	; 0x27
 8001b2c:	f000 f8ce 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001b30:	2004      	movs	r0, #4
 8001b32:	f000 f8cb 	bl	8001ccc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001b36:	202a      	movs	r0, #42	; 0x2a
 8001b38:	f000 f8bb 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f000 f8c5 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f000 f8c2 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f000 f8bf 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001b4e:	20ef      	movs	r0, #239	; 0xef
 8001b50:	f000 f8bc 	bl	8001ccc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001b54:	202b      	movs	r0, #43	; 0x2b
 8001b56:	f000 f8ac 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f000 f8b6 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f000 f8b3 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001b66:	2001      	movs	r0, #1
 8001b68:	f000 f8b0 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001b6c:	203f      	movs	r0, #63	; 0x3f
 8001b6e:	f000 f8ad 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001b72:	20f6      	movs	r0, #246	; 0xf6
 8001b74:	f000 f89d 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f000 f8a7 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f000 f8a4 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001b84:	2006      	movs	r0, #6
 8001b86:	f000 f8a1 	bl	8001ccc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001b8a:	202c      	movs	r0, #44	; 0x2c
 8001b8c:	f000 f891 	bl	8001cb2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001b90:	20c8      	movs	r0, #200	; 0xc8
 8001b92:	f000 fa79 	bl	8002088 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001b96:	2026      	movs	r0, #38	; 0x26
 8001b98:	f000 f88b 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f000 f895 	bl	8001ccc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001ba2:	20e0      	movs	r0, #224	; 0xe0
 8001ba4:	f000 f885 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001ba8:	200f      	movs	r0, #15
 8001baa:	f000 f88f 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001bae:	2029      	movs	r0, #41	; 0x29
 8001bb0:	f000 f88c 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001bb4:	2024      	movs	r0, #36	; 0x24
 8001bb6:	f000 f889 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001bba:	200c      	movs	r0, #12
 8001bbc:	f000 f886 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001bc0:	200e      	movs	r0, #14
 8001bc2:	f000 f883 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001bc6:	2009      	movs	r0, #9
 8001bc8:	f000 f880 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001bcc:	204e      	movs	r0, #78	; 0x4e
 8001bce:	f000 f87d 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001bd2:	2078      	movs	r0, #120	; 0x78
 8001bd4:	f000 f87a 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001bd8:	203c      	movs	r0, #60	; 0x3c
 8001bda:	f000 f877 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001bde:	2009      	movs	r0, #9
 8001be0:	f000 f874 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001be4:	2013      	movs	r0, #19
 8001be6:	f000 f871 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001bea:	2005      	movs	r0, #5
 8001bec:	f000 f86e 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001bf0:	2017      	movs	r0, #23
 8001bf2:	f000 f86b 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001bf6:	2011      	movs	r0, #17
 8001bf8:	f000 f868 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f000 f865 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001c02:	20e1      	movs	r0, #225	; 0xe1
 8001c04:	f000 f855 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f000 f85f 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001c0e:	2016      	movs	r0, #22
 8001c10:	f000 f85c 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001c14:	201b      	movs	r0, #27
 8001c16:	f000 f859 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001c1a:	2004      	movs	r0, #4
 8001c1c:	f000 f856 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001c20:	2011      	movs	r0, #17
 8001c22:	f000 f853 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001c26:	2007      	movs	r0, #7
 8001c28:	f000 f850 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001c2c:	2031      	movs	r0, #49	; 0x31
 8001c2e:	f000 f84d 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001c32:	2033      	movs	r0, #51	; 0x33
 8001c34:	f000 f84a 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001c38:	2042      	movs	r0, #66	; 0x42
 8001c3a:	f000 f847 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001c3e:	2005      	movs	r0, #5
 8001c40:	f000 f844 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001c44:	200c      	movs	r0, #12
 8001c46:	f000 f841 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001c4a:	200a      	movs	r0, #10
 8001c4c:	f000 f83e 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001c50:	2028      	movs	r0, #40	; 0x28
 8001c52:	f000 f83b 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001c56:	202f      	movs	r0, #47	; 0x2f
 8001c58:	f000 f838 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001c5c:	200f      	movs	r0, #15
 8001c5e:	f000 f835 	bl	8001ccc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001c62:	2011      	movs	r0, #17
 8001c64:	f000 f825 	bl	8001cb2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001c68:	20c8      	movs	r0, #200	; 0xc8
 8001c6a:	f000 fa0d 	bl	8002088 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001c6e:	2029      	movs	r0, #41	; 0x29
 8001c70:	f000 f81f 	bl	8001cb2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001c74:	202c      	movs	r0, #44	; 0x2c
 8001c76:	f000 f81c 	bl	8001cb2 <ili9341_WriteReg>
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001c82:	f000 f913 	bl	8001eac <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001c86:	2103      	movs	r1, #3
 8001c88:	20d3      	movs	r0, #211	; 0xd3
 8001c8a:	f000 f82c 	bl	8001ce6 <ili9341_ReadData>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b29b      	uxth	r3, r3
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001c9a:	2029      	movs	r0, #41	; 0x29
 8001c9c:	f000 f809 	bl	8001cb2 <ili9341_WriteReg>
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001ca8:	2028      	movs	r0, #40	; 0x28
 8001caa:	f000 f802 	bl	8001cb2 <ili9341_WriteReg>
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f98e 	bl	8001fe0 <LCD_IO_WriteReg>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 f95f 	bl	8001f9c <LCD_IO_WriteData>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	460a      	mov	r2, r1
 8001cf0:	80fb      	strh	r3, [r7, #6]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001cf6:	797a      	ldrb	r2, [r7, #5]
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 f991 	bl	8002024 <LCD_IO_ReadData>
 8001d02:	4603      	mov	r3, r0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001d10:	23f0      	movs	r3, #240	; 0xf0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001d20:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001d34:	4819      	ldr	r0, [pc, #100]	; (8001d9c <SPIx_Init+0x6c>)
 8001d36:	f004 ffbc 	bl	8006cb2 <HAL_SPI_GetState>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d12b      	bne.n	8001d98 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001d40:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <SPIx_Init+0x6c>)
 8001d42:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <SPIx_Init+0x70>)
 8001d44:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <SPIx_Init+0x6c>)
 8001d48:	2218      	movs	r2, #24
 8001d4a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <SPIx_Init+0x6c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <SPIx_Init+0x6c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <SPIx_Init+0x6c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <SPIx_Init+0x6c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <SPIx_Init+0x6c>)
 8001d66:	2207      	movs	r2, #7
 8001d68:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <SPIx_Init+0x6c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <SPIx_Init+0x6c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <SPIx_Init+0x6c>)
 8001d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d7c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <SPIx_Init+0x6c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <SPIx_Init+0x6c>)
 8001d86:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d8a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001d8c:	4803      	ldr	r0, [pc, #12]	; (8001d9c <SPIx_Init+0x6c>)
 8001d8e:	f000 f853 	bl	8001e38 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001d92:	4802      	ldr	r0, [pc, #8]	; (8001d9c <SPIx_Init+0x6c>)
 8001d94:	f004 faed 	bl	8006372 <HAL_SPI_Init>
  } 
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000414 	.word	0x20000414
 8001da0:	40015000 	.word	0x40015000

08001da4 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <SPIx_Read+0x38>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f107 0108 	add.w	r1, r7, #8
 8001dbe:	4808      	ldr	r0, [pc, #32]	; (8001de0 <SPIx_Read+0x3c>)
 8001dc0:	f004 fcc4 	bl	800674c <HAL_SPI_Receive>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001dce:	f000 f827 	bl	8001e20 <SPIx_Error>
  }
  
  return readvalue;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	2000003c 	.word	0x2000003c
 8001de0:	20000414 	.word	0x20000414

08001de4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <SPIx_Write+0x34>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	1db9      	adds	r1, r7, #6
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4808      	ldr	r0, [pc, #32]	; (8001e1c <SPIx_Write+0x38>)
 8001dfc:	f004 fb6a 	bl	80064d4 <HAL_SPI_Transmit>
 8001e00:	4603      	mov	r3, r0
 8001e02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001e0a:	f000 f809 	bl	8001e20 <SPIx_Error>
  }
}
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000003c 	.word	0x2000003c
 8001e1c:	20000414 	.word	0x20000414

08001e20 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001e24:	4803      	ldr	r0, [pc, #12]	; (8001e34 <SPIx_Error+0x14>)
 8001e26:	f004 fb2d 	bl	8006484 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001e2a:	f7ff ff81 	bl	8001d30 <SPIx_Init>
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000414 	.word	0x20000414

08001e38 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <SPIx_MspInit+0x6c>)
 8001e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e48:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <SPIx_MspInit+0x6c>)
 8001e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e4e:	6453      	str	r3, [r2, #68]	; 0x44
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <SPIx_MspInit+0x6c>)
 8001e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <SPIx_MspInit+0x6c>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <SPIx_MspInit+0x6c>)
 8001e66:	f043 0320 	orr.w	r3, r3, #32
 8001e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <SPIx_MspInit+0x6c>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001e78:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001e86:	2301      	movs	r3, #1
 8001e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <SPIx_MspInit+0x70>)
 8001e96:	f002 fadd 	bl	8004454 <HAL_GPIO_Init>
}
 8001e9a:	bf00      	nop
 8001e9c:	3728      	adds	r7, #40	; 0x28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40021400 	.word	0x40021400

08001eac <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001eb2:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <LCD_IO_Init+0xe0>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d164      	bne.n	8001f84 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001eba:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <LCD_IO_Init+0xe0>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <LCD_IO_Init+0xe4>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	4a31      	ldr	r2, [pc, #196]	; (8001f90 <LCD_IO_Init+0xe4>)
 8001eca:	f043 0308 	orr.w	r3, r3, #8
 8001ece:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed0:	4b2f      	ldr	r3, [pc, #188]	; (8001f90 <LCD_IO_Init+0xe4>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001eea:	2302      	movs	r3, #2
 8001eec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4827      	ldr	r0, [pc, #156]	; (8001f94 <LCD_IO_Init+0xe8>)
 8001ef6:	f002 faad 	bl	8004454 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <LCD_IO_Init+0xe4>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a23      	ldr	r2, [pc, #140]	; (8001f90 <LCD_IO_Init+0xe4>)
 8001f04:	f043 0308 	orr.w	r3, r3, #8
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <LCD_IO_Init+0xe4>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001f24:	2302      	movs	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4819      	ldr	r0, [pc, #100]	; (8001f94 <LCD_IO_Init+0xe8>)
 8001f30:	f002 fa90 	bl	8004454 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001f34:	2300      	movs	r3, #0
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <LCD_IO_Init+0xe4>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <LCD_IO_Init+0xe4>)
 8001f3e:	f043 0304 	orr.w	r3, r3, #4
 8001f42:	6313      	str	r3, [r2, #48]	; 0x30
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <LCD_IO_Init+0xe4>)
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001f50:	2304      	movs	r3, #4
 8001f52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	4619      	mov	r1, r3
 8001f66:	480c      	ldr	r0, [pc, #48]	; (8001f98 <LCD_IO_Init+0xec>)
 8001f68:	f002 fa74 	bl	8004454 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2104      	movs	r1, #4
 8001f70:	4809      	ldr	r0, [pc, #36]	; (8001f98 <LCD_IO_Init+0xec>)
 8001f72:	f002 fd27 	bl	80049c4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001f76:	2201      	movs	r2, #1
 8001f78:	2104      	movs	r1, #4
 8001f7a:	4807      	ldr	r0, [pc, #28]	; (8001f98 <LCD_IO_Init+0xec>)
 8001f7c:	f002 fd22 	bl	80049c4 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001f80:	f7ff fed6 	bl	8001d30 <SPIx_Init>
  }
}
 8001f84:	bf00      	nop
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	2000046c 	.word	0x2000046c
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020c00 	.word	0x40020c00
 8001f98:	40020800 	.word	0x40020800

08001f9c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fac:	480a      	ldr	r0, [pc, #40]	; (8001fd8 <LCD_IO_WriteData+0x3c>)
 8001fae:	f002 fd09 	bl	80049c4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2104      	movs	r1, #4
 8001fb6:	4809      	ldr	r0, [pc, #36]	; (8001fdc <LCD_IO_WriteData+0x40>)
 8001fb8:	f002 fd04 	bl	80049c4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff10 	bl	8001de4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2104      	movs	r1, #4
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <LCD_IO_WriteData+0x40>)
 8001fca:	f002 fcfb 	bl	80049c4 <HAL_GPIO_WritePin>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40020c00 	.word	0x40020c00
 8001fdc:	40020800 	.word	0x40020800

08001fe0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ff0:	480a      	ldr	r0, [pc, #40]	; (800201c <LCD_IO_WriteReg+0x3c>)
 8001ff2:	f002 fce7 	bl	80049c4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	4809      	ldr	r0, [pc, #36]	; (8002020 <LCD_IO_WriteReg+0x40>)
 8001ffc:	f002 fce2 	bl	80049c4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	b29b      	uxth	r3, r3
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff feed 	bl	8001de4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800200a:	2201      	movs	r2, #1
 800200c:	2104      	movs	r1, #4
 800200e:	4804      	ldr	r0, [pc, #16]	; (8002020 <LCD_IO_WriteReg+0x40>)
 8002010:	f002 fcd8 	bl	80049c4 <HAL_GPIO_WritePin>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40020c00 	.word	0x40020c00
 8002020:	40020800 	.word	0x40020800

08002024 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	460a      	mov	r2, r1
 800202e:	80fb      	strh	r3, [r7, #6]
 8002030:	4613      	mov	r3, r2
 8002032:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002038:	2200      	movs	r2, #0
 800203a:	2104      	movs	r1, #4
 800203c:	4810      	ldr	r0, [pc, #64]	; (8002080 <LCD_IO_ReadData+0x5c>)
 800203e:	f002 fcc1 	bl	80049c4 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002042:	2200      	movs	r2, #0
 8002044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002048:	480e      	ldr	r0, [pc, #56]	; (8002084 <LCD_IO_ReadData+0x60>)
 800204a:	f002 fcbb 	bl	80049c4 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fec7 	bl	8001de4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002056:	797b      	ldrb	r3, [r7, #5]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fea3 	bl	8001da4 <SPIx_Read>
 800205e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002060:	2201      	movs	r2, #1
 8002062:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002066:	4807      	ldr	r0, [pc, #28]	; (8002084 <LCD_IO_ReadData+0x60>)
 8002068:	f002 fcac 	bl	80049c4 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800206c:	2201      	movs	r2, #1
 800206e:	2104      	movs	r1, #4
 8002070:	4803      	ldr	r0, [pc, #12]	; (8002080 <LCD_IO_ReadData+0x5c>)
 8002072:	f002 fca7 	bl	80049c4 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002076:	68fb      	ldr	r3, [r7, #12]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40020800 	.word	0x40020800
 8002084:	40020c00 	.word	0x40020c00

08002088 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 ff87 	bl	8002fa4 <HAL_Delay>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80020a4:	4b2d      	ldr	r3, [pc, #180]	; (800215c <BSP_LCD_Init+0xbc>)
 80020a6:	4a2e      	ldr	r2, [pc, #184]	; (8002160 <BSP_LCD_Init+0xc0>)
 80020a8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80020aa:	4b2c      	ldr	r3, [pc, #176]	; (800215c <BSP_LCD_Init+0xbc>)
 80020ac:	2209      	movs	r2, #9
 80020ae:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80020b0:	4b2a      	ldr	r3, [pc, #168]	; (800215c <BSP_LCD_Init+0xbc>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80020b6:	4b29      	ldr	r3, [pc, #164]	; (800215c <BSP_LCD_Init+0xbc>)
 80020b8:	221d      	movs	r2, #29
 80020ba:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <BSP_LCD_Init+0xbc>)
 80020be:	2203      	movs	r2, #3
 80020c0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80020c2:	4b26      	ldr	r3, [pc, #152]	; (800215c <BSP_LCD_Init+0xbc>)
 80020c4:	f240 120d 	movw	r2, #269	; 0x10d
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80020ca:	4b24      	ldr	r3, [pc, #144]	; (800215c <BSP_LCD_Init+0xbc>)
 80020cc:	f240 1243 	movw	r2, #323	; 0x143
 80020d0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80020d2:	4b22      	ldr	r3, [pc, #136]	; (800215c <BSP_LCD_Init+0xbc>)
 80020d4:	f240 1217 	movw	r2, #279	; 0x117
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <BSP_LCD_Init+0xbc>)
 80020dc:	f240 1247 	movw	r2, #327	; 0x147
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80020e2:	4b1e      	ldr	r3, [pc, #120]	; (800215c <BSP_LCD_Init+0xbc>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <BSP_LCD_Init+0xbc>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <BSP_LCD_Init+0xbc>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80020fa:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <BSP_LCD_Init+0xc4>)
 80020fc:	2208      	movs	r2, #8
 80020fe:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002100:	4b18      	ldr	r3, [pc, #96]	; (8002164 <BSP_LCD_Init+0xc4>)
 8002102:	22c0      	movs	r2, #192	; 0xc0
 8002104:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <BSP_LCD_Init+0xc4>)
 8002108:	2204      	movs	r2, #4
 800210a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <BSP_LCD_Init+0xc4>)
 800210e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002114:	4813      	ldr	r0, [pc, #76]	; (8002164 <BSP_LCD_Init+0xc4>)
 8002116:	f003 fedb 	bl	8005ed0 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <BSP_LCD_Init+0xbc>)
 800211c:	2200      	movs	r2, #0
 800211e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <BSP_LCD_Init+0xbc>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002126:	4b0d      	ldr	r3, [pc, #52]	; (800215c <BSP_LCD_Init+0xbc>)
 8002128:	2200      	movs	r2, #0
 800212a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <BSP_LCD_Init+0xbc>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002132:	f000 fb3d 	bl	80027b0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002136:	4809      	ldr	r0, [pc, #36]	; (800215c <BSP_LCD_Init+0xbc>)
 8002138:	f002 fe1e 	bl	8004d78 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <BSP_LCD_Init+0xc8>)
 800213e:	4a0b      	ldr	r2, [pc, #44]	; (800216c <BSP_LCD_Init+0xcc>)
 8002140:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <BSP_LCD_Init+0xc8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800214a:	f000 fd1f 	bl	8002b8c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800214e:	4808      	ldr	r0, [pc, #32]	; (8002170 <BSP_LCD_Init+0xd0>)
 8002150:	f000 f8ce 	bl	80022f0 <BSP_LCD_SetFont>

  return LCD_OK;
 8002154:	2300      	movs	r3, #0
}  
 8002156:	4618      	mov	r0, r3
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000470 	.word	0x20000470
 8002160:	40016800 	.word	0x40016800
 8002164:	20000558 	.word	0x20000558
 8002168:	200005a4 	.word	0x200005a4
 800216c:	20000004 	.word	0x20000004
 8002170:	20000040 	.word	0x20000040

08002174 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <BSP_LCD_GetXSize+0x14>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	4798      	blx	r3
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200005a4 	.word	0x200005a4

0800218c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <BSP_LCD_GetYSize+0x14>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002196:	4798      	blx	r3
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200005a4 	.word	0x200005a4

080021a4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b090      	sub	sp, #64	; 0x40
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80021b4:	f7ff ffde 	bl	8002174 <BSP_LCD_GetXSize>
 80021b8:	4603      	mov	r3, r0
 80021ba:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80021c0:	f7ff ffe4 	bl	800218c <BSP_LCD_GetYSize>
 80021c4:	4603      	mov	r3, r0
 80021c6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80021d0:	23ff      	movs	r3, #255	; 0xff
 80021d2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80021ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80021f0:	2307      	movs	r3, #7
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80021f4:	f7ff ffbe 	bl	8002174 <BSP_LCD_GetXSize>
 80021f8:	4603      	mov	r3, r0
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80021fc:	f7ff ffc6 	bl	800218c <BSP_LCD_GetYSize>
 8002200:	4603      	mov	r3, r0
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002204:	88fa      	ldrh	r2, [r7, #6]
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	4619      	mov	r1, r3
 800220c:	4814      	ldr	r0, [pc, #80]	; (8002260 <BSP_LCD_LayerDefaultInit+0xbc>)
 800220e:	f002 ff45 	bl	800509c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002212:	88fa      	ldrh	r2, [r7, #6]
 8002214:	4913      	ldr	r1, [pc, #76]	; (8002264 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	3304      	adds	r3, #4
 8002222:	f04f 32ff 	mov.w	r2, #4294967295
 8002226:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002228:	88fa      	ldrh	r2, [r7, #6]
 800222a:	490e      	ldr	r1, [pc, #56]	; (8002264 <BSP_LCD_LayerDefaultInit+0xc0>)
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	3308      	adds	r3, #8
 8002238:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <BSP_LCD_LayerDefaultInit+0xc4>)
 800223a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800223c:	88fa      	ldrh	r2, [r7, #6]
 800223e:	4909      	ldr	r1, [pc, #36]	; (8002264 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800224e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002252:	f002 ff61 	bl	8005118 <HAL_LTDC_EnableDither>
}
 8002256:	bf00      	nop
 8002258:	3740      	adds	r7, #64	; 0x40
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000470 	.word	0x20000470
 8002264:	2000058c 	.word	0x2000058c
 8002268:	20000040 	.word	0x20000040

0800226c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002274:	4a04      	ldr	r2, [pc, #16]	; (8002288 <BSP_LCD_SelectLayer+0x1c>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6013      	str	r3, [r2, #0]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000588 	.word	0x20000588

0800228c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002294:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <BSP_LCD_SetTextColor+0x28>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4907      	ldr	r1, [pc, #28]	; (80022b8 <BSP_LCD_SetTextColor+0x2c>)
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	601a      	str	r2, [r3, #0]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	20000588 	.word	0x20000588
 80022b8:	2000058c 	.word	0x2000058c

080022bc <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <BSP_LCD_SetBackColor+0x2c>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4908      	ldr	r1, [pc, #32]	; (80022ec <BSP_LCD_SetBackColor+0x30>)
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	3304      	adds	r3, #4
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	601a      	str	r2, [r3, #0]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000588 	.word	0x20000588
 80022ec:	2000058c 	.word	0x2000058c

080022f0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <BSP_LCD_SetFont+0x2c>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4908      	ldr	r1, [pc, #32]	; (8002320 <BSP_LCD_SetFont+0x30>)
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	3308      	adds	r3, #8
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	601a      	str	r2, [r3, #0]
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000588 	.word	0x20000588
 8002320:	2000058c 	.word	0x2000058c

08002324 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002326:	b085      	sub	sp, #20
 8002328:	af02      	add	r7, sp, #8
 800232a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <BSP_LCD_Clear+0x48>)
 800232e:	681c      	ldr	r4, [r3, #0]
 8002330:	4b0e      	ldr	r3, [pc, #56]	; (800236c <BSP_LCD_Clear+0x48>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0e      	ldr	r2, [pc, #56]	; (8002370 <BSP_LCD_Clear+0x4c>)
 8002336:	2134      	movs	r1, #52	; 0x34
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	4413      	add	r3, r2
 800233e:	335c      	adds	r3, #92	; 0x5c
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461e      	mov	r6, r3
 8002344:	f7ff ff16 	bl	8002174 <BSP_LCD_GetXSize>
 8002348:	4605      	mov	r5, r0
 800234a:	f7ff ff1f 	bl	800218c <BSP_LCD_GetYSize>
 800234e:	4602      	mov	r2, r0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	2300      	movs	r3, #0
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	4613      	mov	r3, r2
 800235a:	462a      	mov	r2, r5
 800235c:	4631      	mov	r1, r6
 800235e:	4620      	mov	r0, r4
 8002360:	f000 fbdc 	bl	8002b1c <FillBuffer>
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800236c:	20000588 	.word	0x20000588
 8002370:	20000470 	.word	0x20000470

08002374 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	80fb      	strh	r3, [r7, #6]
 800237e:	460b      	mov	r3, r1
 8002380:	80bb      	strh	r3, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <BSP_LCD_DisplayChar+0x80>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	491b      	ldr	r1, [pc, #108]	; (80023f8 <BSP_LCD_DisplayChar+0x84>)
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	3308      	adds	r3, #8
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6819      	ldr	r1, [r3, #0]
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <BSP_LCD_DisplayChar+0x80>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4c14      	ldr	r4, [pc, #80]	; (80023f8 <BSP_LCD_DisplayChar+0x84>)
 80023a8:	4613      	mov	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4423      	add	r3, r4
 80023b2:	3308      	adds	r3, #8
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80023b8:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80023bc:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <BSP_LCD_DisplayChar+0x80>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4c0d      	ldr	r4, [pc, #52]	; (80023f8 <BSP_LCD_DisplayChar+0x84>)
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4423      	add	r3, r4
 80023cc:	3308      	adds	r3, #8
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	889b      	ldrh	r3, [r3, #4]
 80023d2:	3307      	adds	r3, #7
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	da00      	bge.n	80023da <BSP_LCD_DisplayChar+0x66>
 80023d8:	3307      	adds	r3, #7
 80023da:	10db      	asrs	r3, r3, #3
 80023dc:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80023e0:	18ca      	adds	r2, r1, r3
 80023e2:	88b9      	ldrh	r1, [r7, #4]
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fade 	bl	80029a8 <DrawChar>
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd90      	pop	{r4, r7, pc}
 80023f4:	20000588 	.word	0x20000588
 80023f8:	2000058c 	.word	0x2000058c

080023fc <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80023fc:	b5b0      	push	{r4, r5, r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	60ba      	str	r2, [r7, #8]
 8002404:	461a      	mov	r2, r3
 8002406:	4603      	mov	r3, r0
 8002408:	81fb      	strh	r3, [r7, #14]
 800240a:	460b      	mov	r3, r1
 800240c:	81bb      	strh	r3, [r7, #12]
 800240e:	4613      	mov	r3, r2
 8002410:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002412:	2301      	movs	r3, #1
 8002414:	83fb      	strh	r3, [r7, #30]
 8002416:	2300      	movs	r3, #0
 8002418:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002426:	e002      	b.n	800242e <BSP_LCD_DisplayStringAt+0x32>
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	3301      	adds	r3, #1
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	617a      	str	r2, [r7, #20]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f6      	bne.n	8002428 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800243a:	f7ff fe9b 	bl	8002174 <BSP_LCD_GetXSize>
 800243e:	4601      	mov	r1, r0
 8002440:	4b4b      	ldr	r3, [pc, #300]	; (8002570 <BSP_LCD_DisplayStringAt+0x174>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	484b      	ldr	r0, [pc, #300]	; (8002574 <BSP_LCD_DisplayStringAt+0x178>)
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4403      	add	r3, r0
 8002450:	3308      	adds	r3, #8
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	889b      	ldrh	r3, [r3, #4]
 8002456:	fbb1 f3f3 	udiv	r3, r1, r3
 800245a:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d01c      	beq.n	800249c <BSP_LCD_DisplayStringAt+0xa0>
 8002462:	2b03      	cmp	r3, #3
 8002464:	dc33      	bgt.n	80024ce <BSP_LCD_DisplayStringAt+0xd2>
 8002466:	2b01      	cmp	r3, #1
 8002468:	d002      	beq.n	8002470 <BSP_LCD_DisplayStringAt+0x74>
 800246a:	2b02      	cmp	r3, #2
 800246c:	d019      	beq.n	80024a2 <BSP_LCD_DisplayStringAt+0xa6>
 800246e:	e02e      	b.n	80024ce <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	1ad1      	subs	r1, r2, r3
 8002476:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <BSP_LCD_DisplayStringAt+0x174>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	483e      	ldr	r0, [pc, #248]	; (8002574 <BSP_LCD_DisplayStringAt+0x178>)
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4403      	add	r3, r0
 8002486:	3308      	adds	r3, #8
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	889b      	ldrh	r3, [r3, #4]
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	085b      	lsrs	r3, r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	89fb      	ldrh	r3, [r7, #14]
 8002496:	4413      	add	r3, r2
 8002498:	83fb      	strh	r3, [r7, #30]
      break;
 800249a:	e01b      	b.n	80024d4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 800249c:	89fb      	ldrh	r3, [r7, #14]
 800249e:	83fb      	strh	r3, [r7, #30]
      break;
 80024a0:	e018      	b.n	80024d4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	b299      	uxth	r1, r3
 80024aa:	4b31      	ldr	r3, [pc, #196]	; (8002570 <BSP_LCD_DisplayStringAt+0x174>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4831      	ldr	r0, [pc, #196]	; (8002574 <BSP_LCD_DisplayStringAt+0x178>)
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4403      	add	r3, r0
 80024ba:	3308      	adds	r3, #8
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	889b      	ldrh	r3, [r3, #4]
 80024c0:	fb11 f303 	smulbb	r3, r1, r3
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	89fb      	ldrh	r3, [r7, #14]
 80024c8:	4413      	add	r3, r2
 80024ca:	83fb      	strh	r3, [r7, #30]
      break;
 80024cc:	e002      	b.n	80024d4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80024ce:	89fb      	ldrh	r3, [r7, #14]
 80024d0:	83fb      	strh	r3, [r7, #30]
      break;
 80024d2:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80024d4:	e01a      	b.n	800250c <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	89b9      	ldrh	r1, [r7, #12]
 80024dc:	8bfb      	ldrh	r3, [r7, #30]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff ff48 	bl	8002374 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80024e4:	4b22      	ldr	r3, [pc, #136]	; (8002570 <BSP_LCD_DisplayStringAt+0x174>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4922      	ldr	r1, [pc, #136]	; (8002574 <BSP_LCD_DisplayStringAt+0x178>)
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	3308      	adds	r3, #8
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	889a      	ldrh	r2, [r3, #4]
 80024fa:	8bfb      	ldrh	r3, [r7, #30]
 80024fc:	4413      	add	r3, r2
 80024fe:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	3301      	adds	r3, #1
 8002504:	60bb      	str	r3, [r7, #8]
    i++;
 8002506:	8bbb      	ldrh	r3, [r7, #28]
 8002508:	3301      	adds	r3, #1
 800250a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf14      	ite	ne
 8002514:	2301      	movne	r3, #1
 8002516:	2300      	moveq	r3, #0
 8002518:	b2dc      	uxtb	r4, r3
 800251a:	f7ff fe2b 	bl	8002174 <BSP_LCD_GetXSize>
 800251e:	8bb9      	ldrh	r1, [r7, #28]
 8002520:	4b13      	ldr	r3, [pc, #76]	; (8002570 <BSP_LCD_DisplayStringAt+0x174>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4d13      	ldr	r5, [pc, #76]	; (8002574 <BSP_LCD_DisplayStringAt+0x178>)
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	442b      	add	r3, r5
 8002530:	3308      	adds	r3, #8
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	889b      	ldrh	r3, [r3, #4]
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	1ac3      	subs	r3, r0, r3
 800253c:	b299      	uxth	r1, r3
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <BSP_LCD_DisplayStringAt+0x174>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	480c      	ldr	r0, [pc, #48]	; (8002574 <BSP_LCD_DisplayStringAt+0x178>)
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4403      	add	r3, r0
 800254e:	3308      	adds	r3, #8
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	889b      	ldrh	r3, [r3, #4]
 8002554:	4299      	cmp	r1, r3
 8002556:	bf2c      	ite	cs
 8002558:	2301      	movcs	r3, #1
 800255a:	2300      	movcc	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	4023      	ands	r3, r4
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1b7      	bne.n	80024d6 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002566:	bf00      	nop
 8002568:	bf00      	nop
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	bdb0      	pop	{r4, r5, r7, pc}
 8002570:	20000588 	.word	0x20000588
 8002574:	2000058c 	.word	0x2000058c

08002578 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002578:	b5b0      	push	{r4, r5, r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af02      	add	r7, sp, #8
 800257e:	4603      	mov	r3, r0
 8002580:	80fb      	strh	r3, [r7, #6]
 8002582:	460b      	mov	r3, r1
 8002584:	80bb      	strh	r3, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800258e:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <BSP_LCD_DrawHLine+0x70>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a16      	ldr	r2, [pc, #88]	; (80025ec <BSP_LCD_DrawHLine+0x74>)
 8002594:	2134      	movs	r1, #52	; 0x34
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	335c      	adds	r3, #92	; 0x5c
 800259e:	681c      	ldr	r4, [r3, #0]
 80025a0:	f7ff fde8 	bl	8002174 <BSP_LCD_GetXSize>
 80025a4:	4602      	mov	r2, r0
 80025a6:	88bb      	ldrh	r3, [r7, #4]
 80025a8:	fb03 f202 	mul.w	r2, r3, r2
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4423      	add	r3, r4
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <BSP_LCD_DrawHLine+0x70>)
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	68f9      	ldr	r1, [r7, #12]
 80025bc:	887c      	ldrh	r4, [r7, #2]
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <BSP_LCD_DrawHLine+0x70>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4d0b      	ldr	r5, [pc, #44]	; (80025f0 <BSP_LCD_DrawHLine+0x78>)
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	442b      	add	r3, r5
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	9301      	str	r3, [sp, #4]
 80025d2:	2300      	movs	r3, #0
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	2301      	movs	r3, #1
 80025d8:	4622      	mov	r2, r4
 80025da:	f000 fa9f 	bl	8002b1c <FillBuffer>
}
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bdb0      	pop	{r4, r5, r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000588 	.word	0x20000588
 80025ec:	20000470 	.word	0x20000470
 80025f0:	2000058c 	.word	0x2000058c

080025f4 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80025f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	4603      	mov	r3, r0
 80025fc:	80fb      	strh	r3, [r7, #6]
 80025fe:	460b      	mov	r3, r1
 8002600:	80bb      	strh	r3, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800260a:	4b18      	ldr	r3, [pc, #96]	; (800266c <BSP_LCD_DrawVLine+0x78>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a18      	ldr	r2, [pc, #96]	; (8002670 <BSP_LCD_DrawVLine+0x7c>)
 8002610:	2134      	movs	r1, #52	; 0x34
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	335c      	adds	r3, #92	; 0x5c
 800261a:	681c      	ldr	r4, [r3, #0]
 800261c:	f7ff fdaa 	bl	8002174 <BSP_LCD_GetXSize>
 8002620:	4602      	mov	r2, r0
 8002622:	88bb      	ldrh	r3, [r7, #4]
 8002624:	fb03 f202 	mul.w	r2, r3, r2
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4423      	add	r3, r4
 8002630:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <BSP_LCD_DrawVLine+0x78>)
 8002634:	681c      	ldr	r4, [r3, #0]
 8002636:	68fd      	ldr	r5, [r7, #12]
 8002638:	887e      	ldrh	r6, [r7, #2]
 800263a:	f7ff fd9b 	bl	8002174 <BSP_LCD_GetXSize>
 800263e:	4603      	mov	r3, r0
 8002640:	1e59      	subs	r1, r3, #1
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <BSP_LCD_DrawVLine+0x78>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	480b      	ldr	r0, [pc, #44]	; (8002674 <BSP_LCD_DrawVLine+0x80>)
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4403      	add	r3, r0
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	9100      	str	r1, [sp, #0]
 8002658:	4633      	mov	r3, r6
 800265a:	2201      	movs	r2, #1
 800265c:	4629      	mov	r1, r5
 800265e:	4620      	mov	r0, r4
 8002660:	f000 fa5c 	bl	8002b1c <FillBuffer>
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800266c:	20000588 	.word	0x20000588
 8002670:	20000470 	.word	0x20000470
 8002674:	2000058c 	.word	0x2000058c

08002678 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4604      	mov	r4, r0
 8002680:	4608      	mov	r0, r1
 8002682:	4611      	mov	r1, r2
 8002684:	461a      	mov	r2, r3
 8002686:	4623      	mov	r3, r4
 8002688:	80fb      	strh	r3, [r7, #6]
 800268a:	4603      	mov	r3, r0
 800268c:	80bb      	strh	r3, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	807b      	strh	r3, [r7, #2]
 8002692:	4613      	mov	r3, r2
 8002694:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	88b9      	ldrh	r1, [r7, #4]
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff6b 	bl	8002578 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80026a2:	88ba      	ldrh	r2, [r7, #4]
 80026a4:	883b      	ldrh	r3, [r7, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	b299      	uxth	r1, r3
 80026aa:	887a      	ldrh	r2, [r7, #2]
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff62 	bl	8002578 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80026b4:	883a      	ldrh	r2, [r7, #0]
 80026b6:	88b9      	ldrh	r1, [r7, #4]
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff9a 	bl	80025f4 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80026c0:	88fa      	ldrh	r2, [r7, #6]
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	4413      	add	r3, r2
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	883a      	ldrh	r2, [r7, #0]
 80026ca:	88b9      	ldrh	r1, [r7, #4]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff91 	bl	80025f4 <BSP_LCD_DrawVLine>
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd90      	pop	{r4, r7, pc}
	...

080026dc <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80026dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af02      	add	r7, sp, #8
 80026e4:	4604      	mov	r4, r0
 80026e6:	4608      	mov	r0, r1
 80026e8:	4611      	mov	r1, r2
 80026ea:	461a      	mov	r2, r3
 80026ec:	4623      	mov	r3, r4
 80026ee:	80fb      	strh	r3, [r7, #6]
 80026f0:	4603      	mov	r3, r0
 80026f2:	80bb      	strh	r3, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	807b      	strh	r3, [r7, #2]
 80026f8:	4613      	mov	r3, r2
 80026fa:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002700:	4b20      	ldr	r3, [pc, #128]	; (8002784 <BSP_LCD_FillRect+0xa8>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4920      	ldr	r1, [pc, #128]	; (8002788 <BSP_LCD_FillRect+0xac>)
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fdba 	bl	800228c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002718:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <BSP_LCD_FillRect+0xa8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1b      	ldr	r2, [pc, #108]	; (800278c <BSP_LCD_FillRect+0xb0>)
 800271e:	2134      	movs	r1, #52	; 0x34
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	335c      	adds	r3, #92	; 0x5c
 8002728:	681c      	ldr	r4, [r3, #0]
 800272a:	f7ff fd23 	bl	8002174 <BSP_LCD_GetXSize>
 800272e:	4602      	mov	r2, r0
 8002730:	88bb      	ldrh	r3, [r7, #4]
 8002732:	fb03 f202 	mul.w	r2, r3, r2
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4423      	add	r3, r4
 800273e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002740:	4b10      	ldr	r3, [pc, #64]	; (8002784 <BSP_LCD_FillRect+0xa8>)
 8002742:	681c      	ldr	r4, [r3, #0]
 8002744:	68fd      	ldr	r5, [r7, #12]
 8002746:	887e      	ldrh	r6, [r7, #2]
 8002748:	f8b7 8000 	ldrh.w	r8, [r7]
 800274c:	f7ff fd12 	bl	8002174 <BSP_LCD_GetXSize>
 8002750:	4602      	mov	r2, r0
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	1ad1      	subs	r1, r2, r3
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <BSP_LCD_FillRect+0xa8>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	480b      	ldr	r0, [pc, #44]	; (8002788 <BSP_LCD_FillRect+0xac>)
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4403      	add	r3, r0
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	9100      	str	r1, [sp, #0]
 800276c:	4643      	mov	r3, r8
 800276e:	4632      	mov	r2, r6
 8002770:	4629      	mov	r1, r5
 8002772:	4620      	mov	r0, r4
 8002774:	f000 f9d2 	bl	8002b1c <FillBuffer>
}
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002782:	bf00      	nop
 8002784:	20000588 	.word	0x20000588
 8002788:	2000058c 	.word	0x2000058c
 800278c:	20000470 	.word	0x20000470

08002790 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <BSP_LCD_DisplayOn+0x1c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800279e:	4b03      	ldr	r3, [pc, #12]	; (80027ac <BSP_LCD_DisplayOn+0x1c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4798      	blx	r3
  }
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200005a4 	.word	0x200005a4

080027b0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08e      	sub	sp, #56	; 0x38
 80027b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	623b      	str	r3, [r7, #32]
 80027ba:	4b61      	ldr	r3, [pc, #388]	; (8002940 <BSP_LCD_MspInit+0x190>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	4a60      	ldr	r2, [pc, #384]	; (8002940 <BSP_LCD_MspInit+0x190>)
 80027c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027c4:	6453      	str	r3, [r2, #68]	; 0x44
 80027c6:	4b5e      	ldr	r3, [pc, #376]	; (8002940 <BSP_LCD_MspInit+0x190>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ce:	623b      	str	r3, [r7, #32]
 80027d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	4b5a      	ldr	r3, [pc, #360]	; (8002940 <BSP_LCD_MspInit+0x190>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a59      	ldr	r2, [pc, #356]	; (8002940 <BSP_LCD_MspInit+0x190>)
 80027dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b57      	ldr	r3, [pc, #348]	; (8002940 <BSP_LCD_MspInit+0x190>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	4b53      	ldr	r3, [pc, #332]	; (8002940 <BSP_LCD_MspInit+0x190>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a52      	ldr	r2, [pc, #328]	; (8002940 <BSP_LCD_MspInit+0x190>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b50      	ldr	r3, [pc, #320]	; (8002940 <BSP_LCD_MspInit+0x190>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <BSP_LCD_MspInit+0x190>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	4a4b      	ldr	r2, [pc, #300]	; (8002940 <BSP_LCD_MspInit+0x190>)
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	6313      	str	r3, [r2, #48]	; 0x30
 800281a:	4b49      	ldr	r3, [pc, #292]	; (8002940 <BSP_LCD_MspInit+0x190>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	4b45      	ldr	r3, [pc, #276]	; (8002940 <BSP_LCD_MspInit+0x190>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a44      	ldr	r2, [pc, #272]	; (8002940 <BSP_LCD_MspInit+0x190>)
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b42      	ldr	r3, [pc, #264]	; (8002940 <BSP_LCD_MspInit+0x190>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <BSP_LCD_MspInit+0x190>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a3d      	ldr	r2, [pc, #244]	; (8002940 <BSP_LCD_MspInit+0x190>)
 800284c:	f043 0308 	orr.w	r3, r3, #8
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b3b      	ldr	r3, [pc, #236]	; (8002940 <BSP_LCD_MspInit+0x190>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	4b37      	ldr	r3, [pc, #220]	; (8002940 <BSP_LCD_MspInit+0x190>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a36      	ldr	r2, [pc, #216]	; (8002940 <BSP_LCD_MspInit+0x190>)
 8002868:	f043 0320 	orr.w	r3, r3, #32
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b34      	ldr	r3, [pc, #208]	; (8002940 <BSP_LCD_MspInit+0x190>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	4b30      	ldr	r3, [pc, #192]	; (8002940 <BSP_LCD_MspInit+0x190>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <BSP_LCD_MspInit+0x190>)
 8002884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002888:	6313      	str	r3, [r2, #48]	; 0x30
 800288a:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <BSP_LCD_MspInit+0x190>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002896:	f641 0358 	movw	r3, #6232	; 0x1858
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80028a4:	2302      	movs	r3, #2
 80028a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80028a8:	230e      	movs	r3, #14
 80028aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80028ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b0:	4619      	mov	r1, r3
 80028b2:	4824      	ldr	r0, [pc, #144]	; (8002944 <BSP_LCD_MspInit+0x194>)
 80028b4:	f001 fdce 	bl	8004454 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80028b8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80028be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c2:	4619      	mov	r1, r3
 80028c4:	4820      	ldr	r0, [pc, #128]	; (8002948 <BSP_LCD_MspInit+0x198>)
 80028c6:	f001 fdc5 	bl	8004454 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80028ca:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80028d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d4:	4619      	mov	r1, r3
 80028d6:	481d      	ldr	r0, [pc, #116]	; (800294c <BSP_LCD_MspInit+0x19c>)
 80028d8:	f001 fdbc 	bl	8004454 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80028dc:	2348      	movs	r3, #72	; 0x48
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80028e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e4:	4619      	mov	r1, r3
 80028e6:	481a      	ldr	r0, [pc, #104]	; (8002950 <BSP_LCD_MspInit+0x1a0>)
 80028e8:	f001 fdb4 	bl	8004454 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80028ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80028f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f6:	4619      	mov	r1, r3
 80028f8:	4816      	ldr	r0, [pc, #88]	; (8002954 <BSP_LCD_MspInit+0x1a4>)
 80028fa:	f001 fdab 	bl	8004454 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80028fe:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002908:	4619      	mov	r1, r3
 800290a:	4813      	ldr	r0, [pc, #76]	; (8002958 <BSP_LCD_MspInit+0x1a8>)
 800290c:	f001 fda2 	bl	8004454 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002910:	2303      	movs	r3, #3
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002914:	2309      	movs	r3, #9
 8002916:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800291c:	4619      	mov	r1, r3
 800291e:	480a      	ldr	r0, [pc, #40]	; (8002948 <BSP_LCD_MspInit+0x198>)
 8002920:	f001 fd98 	bl	8004454 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002924:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800292a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292e:	4619      	mov	r1, r3
 8002930:	4809      	ldr	r0, [pc, #36]	; (8002958 <BSP_LCD_MspInit+0x1a8>)
 8002932:	f001 fd8f 	bl	8004454 <HAL_GPIO_Init>
}
 8002936:	bf00      	nop
 8002938:	3738      	adds	r7, #56	; 0x38
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	40020000 	.word	0x40020000
 8002948:	40020400 	.word	0x40020400
 800294c:	40020800 	.word	0x40020800
 8002950:	40020c00 	.word	0x40020c00
 8002954:	40021400 	.word	0x40021400
 8002958:	40021800 	.word	0x40021800

0800295c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800295c:	b5b0      	push	{r4, r5, r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	603a      	str	r2, [r7, #0]
 8002966:	80fb      	strh	r3, [r7, #6]
 8002968:	460b      	mov	r3, r1
 800296a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <BSP_LCD_DrawPixel+0x44>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0c      	ldr	r2, [pc, #48]	; (80029a4 <BSP_LCD_DrawPixel+0x48>)
 8002972:	2134      	movs	r1, #52	; 0x34
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	335c      	adds	r3, #92	; 0x5c
 800297c:	681c      	ldr	r4, [r3, #0]
 800297e:	88bd      	ldrh	r5, [r7, #4]
 8002980:	f7ff fbf8 	bl	8002174 <BSP_LCD_GetXSize>
 8002984:	4603      	mov	r3, r0
 8002986:	fb03 f205 	mul.w	r2, r3, r5
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4423      	add	r3, r4
 8002992:	461a      	mov	r2, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bdb0      	pop	{r4, r5, r7, pc}
 80029a0:	20000588 	.word	0x20000588
 80029a4:	20000470 	.word	0x20000470

080029a8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	603a      	str	r2, [r7, #0]
 80029b2:	80fb      	strh	r3, [r7, #6]
 80029b4:	460b      	mov	r3, r1
 80029b6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80029c4:	4b53      	ldr	r3, [pc, #332]	; (8002b14 <DrawChar+0x16c>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4953      	ldr	r1, [pc, #332]	; (8002b18 <DrawChar+0x170>)
 80029ca:	4613      	mov	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	3308      	adds	r3, #8
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	88db      	ldrh	r3, [r3, #6]
 80029da:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80029dc:	4b4d      	ldr	r3, [pc, #308]	; (8002b14 <DrawChar+0x16c>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	494d      	ldr	r1, [pc, #308]	; (8002b18 <DrawChar+0x170>)
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	3308      	adds	r3, #8
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	889b      	ldrh	r3, [r3, #4]
 80029f2:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80029f4:	8a3b      	ldrh	r3, [r7, #16]
 80029f6:	3307      	adds	r3, #7
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da00      	bge.n	80029fe <DrawChar+0x56>
 80029fc:	3307      	adds	r3, #7
 80029fe:	10db      	asrs	r3, r3, #3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	8a3b      	ldrh	r3, [r7, #16]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	e076      	b.n	8002b02 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002a14:	8a3b      	ldrh	r3, [r7, #16]
 8002a16:	3307      	adds	r3, #7
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	da00      	bge.n	8002a1e <DrawChar+0x76>
 8002a1c:	3307      	adds	r3, #7
 8002a1e:	10db      	asrs	r3, r3, #3
 8002a20:	461a      	mov	r2, r3
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002a2e:	8a3b      	ldrh	r3, [r7, #16]
 8002a30:	3307      	adds	r3, #7
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	da00      	bge.n	8002a38 <DrawChar+0x90>
 8002a36:	3307      	adds	r3, #7
 8002a38:	10db      	asrs	r3, r3, #3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d002      	beq.n	8002a44 <DrawChar+0x9c>
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d004      	beq.n	8002a4c <DrawChar+0xa4>
 8002a42:	e00c      	b.n	8002a5e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	617b      	str	r3, [r7, #20]
      break;
 8002a4a:	e016      	b.n	8002a7a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	3201      	adds	r2, #1
 8002a56:	7812      	ldrb	r2, [r2, #0]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
      break;
 8002a5c:	e00d      	b.n	8002a7a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	041a      	lsls	r2, r3, #16
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	3301      	adds	r3, #1
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	3202      	adds	r2, #2
 8002a72:	7812      	ldrb	r2, [r2, #0]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
      break;
 8002a78:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	e036      	b.n	8002aee <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002a80:	8a3a      	ldrh	r2, [r7, #16]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	1ad2      	subs	r2, r2, r3
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	4413      	add	r3, r2
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d012      	beq.n	8002ac2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	b298      	uxth	r0, r3
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <DrawChar+0x16c>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	491b      	ldr	r1, [pc, #108]	; (8002b18 <DrawChar+0x170>)
 8002aac:	4613      	mov	r3, r2
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	88bb      	ldrh	r3, [r7, #4]
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7ff ff4e 	bl	800295c <BSP_LCD_DrawPixel>
 8002ac0:	e012      	b.n	8002ae8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	4413      	add	r3, r2
 8002aca:	b298      	uxth	r0, r3
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <DrawChar+0x16c>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4911      	ldr	r1, [pc, #68]	; (8002b18 <DrawChar+0x170>)
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	3304      	adds	r3, #4
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	88bb      	ldrh	r3, [r7, #4]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7ff ff3a 	bl	800295c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	3301      	adds	r3, #1
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	8a3b      	ldrh	r3, [r7, #16]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d3c4      	bcc.n	8002a80 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002af6:	88bb      	ldrh	r3, [r7, #4]
 8002af8:	3301      	adds	r3, #1
 8002afa:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	3301      	adds	r3, #1
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	8a7b      	ldrh	r3, [r7, #18]
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d384      	bcc.n	8002a14 <DrawChar+0x6c>
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	bf00      	nop
 8002b0e:	3720      	adds	r7, #32
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20000588 	.word	0x20000588
 8002b18:	2000058c 	.word	0x2000058c

08002b1c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <FillBuffer+0x68>)
 8002b2c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b30:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <FillBuffer+0x68>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002b38:	4a12      	ldr	r2, [pc, #72]	; (8002b84 <FillBuffer+0x68>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <FillBuffer+0x68>)
 8002b40:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <FillBuffer+0x6c>)
 8002b42:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002b44:	480f      	ldr	r0, [pc, #60]	; (8002b84 <FillBuffer+0x68>)
 8002b46:	f001 f8e9 	bl	8003d1c <HAL_DMA2D_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d115      	bne.n	8002b7c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002b50:	68f9      	ldr	r1, [r7, #12]
 8002b52:	480c      	ldr	r0, [pc, #48]	; (8002b84 <FillBuffer+0x68>)
 8002b54:	f001 fb50 	bl	80041f8 <HAL_DMA2D_ConfigLayer>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10e      	bne.n	8002b7c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69f9      	ldr	r1, [r7, #28]
 8002b68:	4806      	ldr	r0, [pc, #24]	; (8002b84 <FillBuffer+0x68>)
 8002b6a:	f001 f920 	bl	8003dae <HAL_DMA2D_Start>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d103      	bne.n	8002b7c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002b74:	210a      	movs	r1, #10
 8002b76:	4803      	ldr	r0, [pc, #12]	; (8002b84 <FillBuffer+0x68>)
 8002b78:	f001 f944 	bl	8003e04 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000518 	.word	0x20000518
 8002b88:	4002b000 	.word	0x4002b000

08002b8c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002b90:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <BSP_SDRAM_Init+0xac>)
 8002b92:	4a2a      	ldr	r2, [pc, #168]	; (8002c3c <BSP_SDRAM_Init+0xb0>)
 8002b94:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002b96:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <BSP_SDRAM_Init+0xb4>)
 8002b98:	2202      	movs	r2, #2
 8002b9a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002b9c:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <BSP_SDRAM_Init+0xb4>)
 8002b9e:	2207      	movs	r2, #7
 8002ba0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002ba2:	4b27      	ldr	r3, [pc, #156]	; (8002c40 <BSP_SDRAM_Init+0xb4>)
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002ba8:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <BSP_SDRAM_Init+0xb4>)
 8002baa:	2207      	movs	r2, #7
 8002bac:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002bae:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <BSP_SDRAM_Init+0xb4>)
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002bb4:	4b22      	ldr	r3, [pc, #136]	; (8002c40 <BSP_SDRAM_Init+0xb4>)
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002bba:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <BSP_SDRAM_Init+0xb4>)
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002bc0:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <BSP_SDRAM_Init+0xac>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002bc6:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <BSP_SDRAM_Init+0xac>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002bcc:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <BSP_SDRAM_Init+0xac>)
 8002bce:	2204      	movs	r2, #4
 8002bd0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002bd2:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <BSP_SDRAM_Init+0xac>)
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002bd8:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <BSP_SDRAM_Init+0xac>)
 8002bda:	2240      	movs	r2, #64	; 0x40
 8002bdc:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002bde:	4b16      	ldr	r3, [pc, #88]	; (8002c38 <BSP_SDRAM_Init+0xac>)
 8002be0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002be4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002be6:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <BSP_SDRAM_Init+0xac>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002bec:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <BSP_SDRAM_Init+0xac>)
 8002bee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bf2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002bf4:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <BSP_SDRAM_Init+0xac>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <BSP_SDRAM_Init+0xac>)
 8002bfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c00:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002c02:	2100      	movs	r1, #0
 8002c04:	480c      	ldr	r0, [pc, #48]	; (8002c38 <BSP_SDRAM_Init+0xac>)
 8002c06:	f000 f87f 	bl	8002d08 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002c0a:	490d      	ldr	r1, [pc, #52]	; (8002c40 <BSP_SDRAM_Init+0xb4>)
 8002c0c:	480a      	ldr	r0, [pc, #40]	; (8002c38 <BSP_SDRAM_Init+0xac>)
 8002c0e:	f003 fb1f 	bl	8006250 <HAL_SDRAM_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <BSP_SDRAM_Init+0xb8>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
 8002c1e:	e002      	b.n	8002c26 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <BSP_SDRAM_Init+0xb8>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002c26:	f240 506a 	movw	r0, #1386	; 0x56a
 8002c2a:	f000 f80d 	bl	8002c48 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <BSP_SDRAM_Init+0xb8>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200005a8 	.word	0x200005a8
 8002c3c:	a0000140 	.word	0xa0000140
 8002c40:	200005dc 	.word	0x200005dc
 8002c44:	20000048 	.word	0x20000048

08002c48 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002c54:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c5a:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c70:	4923      	ldr	r1, [pc, #140]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c72:	4824      	ldr	r0, [pc, #144]	; (8002d04 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c74:	f003 fb20 	bl	80062b8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f000 f993 	bl	8002fa4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c80:	2202      	movs	r2, #2
 8002c82:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c84:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c86:	2208      	movs	r2, #8
 8002c88:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002c8a:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c9a:	4919      	ldr	r1, [pc, #100]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c9c:	4819      	ldr	r0, [pc, #100]	; (8002d04 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c9e:	f003 fb0b 	bl	80062b8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002ca2:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002ca8:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002caa:	2208      	movs	r2, #8
 8002cac:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002cae:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cbe:	4910      	ldr	r1, [pc, #64]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cc0:	4810      	ldr	r0, [pc, #64]	; (8002d04 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002cc2:	f003 faf9 	bl	80062b8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002cc6:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002cca:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cce:	2204      	movs	r2, #4
 8002cd0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ce2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002ce4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ce8:	4905      	ldr	r1, [pc, #20]	; (8002d00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cea:	4806      	ldr	r0, [pc, #24]	; (8002d04 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002cec:	f003 fae4 	bl	80062b8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4804      	ldr	r0, [pc, #16]	; (8002d04 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002cf4:	f003 fb15 	bl	8006322 <HAL_SDRAM_ProgramRefreshRate>
}
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	200005f8 	.word	0x200005f8
 8002d04:	200005a8 	.word	0x200005a8

08002d08 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b090      	sub	sp, #64	; 0x40
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80ec 	beq.w	8002ef2 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d1e:	4b77      	ldr	r3, [pc, #476]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	4a76      	ldr	r2, [pc, #472]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6393      	str	r3, [r2, #56]	; 0x38
 8002d2a:	4b74      	ldr	r3, [pc, #464]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d34:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3a:	4b70      	ldr	r3, [pc, #448]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a6f      	ldr	r2, [pc, #444]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002d40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b6d      	ldr	r3, [pc, #436]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	623b      	str	r3, [r7, #32]
 8002d56:	4b69      	ldr	r3, [pc, #420]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	4a68      	ldr	r2, [pc, #416]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002d5c:	f043 0302 	orr.w	r3, r3, #2
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b66      	ldr	r3, [pc, #408]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	623b      	str	r3, [r7, #32]
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	4b62      	ldr	r3, [pc, #392]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a61      	ldr	r2, [pc, #388]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002d78:	f043 0304 	orr.w	r3, r3, #4
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b5f      	ldr	r3, [pc, #380]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	4b5b      	ldr	r3, [pc, #364]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a5a      	ldr	r2, [pc, #360]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002d94:	f043 0308 	orr.w	r3, r3, #8
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b58      	ldr	r3, [pc, #352]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	61bb      	str	r3, [r7, #24]
 8002da4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	4b54      	ldr	r3, [pc, #336]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	4a53      	ldr	r2, [pc, #332]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002db0:	f043 0310 	orr.w	r3, r3, #16
 8002db4:	6313      	str	r3, [r2, #48]	; 0x30
 8002db6:	4b51      	ldr	r3, [pc, #324]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	4b4d      	ldr	r3, [pc, #308]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4a4c      	ldr	r2, [pc, #304]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002dcc:	f043 0320 	orr.w	r3, r3, #32
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4b4a      	ldr	r3, [pc, #296]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	4b46      	ldr	r3, [pc, #280]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4a45      	ldr	r2, [pc, #276]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b43      	ldr	r3, [pc, #268]	; (8002efc <BSP_SDRAM_MspInit+0x1f4>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002e06:	230c      	movs	r3, #12
 8002e08:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002e0a:	2360      	movs	r3, #96	; 0x60
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002e0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e12:	4619      	mov	r1, r3
 8002e14:	483a      	ldr	r0, [pc, #232]	; (8002f00 <BSP_SDRAM_MspInit+0x1f8>)
 8002e16:	f001 fb1d 	bl	8004454 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e22:	4619      	mov	r1, r3
 8002e24:	4837      	ldr	r0, [pc, #220]	; (8002f04 <BSP_SDRAM_MspInit+0x1fc>)
 8002e26:	f001 fb15 	bl	8004454 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002e2a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002e30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e34:	4619      	mov	r1, r3
 8002e36:	4834      	ldr	r0, [pc, #208]	; (8002f08 <BSP_SDRAM_MspInit+0x200>)
 8002e38:	f001 fb0c 	bl	8004454 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002e3c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e46:	4619      	mov	r1, r3
 8002e48:	4830      	ldr	r0, [pc, #192]	; (8002f0c <BSP_SDRAM_MspInit+0x204>)
 8002e4a:	f001 fb03 	bl	8004454 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002e4e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002e54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e58:	4619      	mov	r1, r3
 8002e5a:	482d      	ldr	r0, [pc, #180]	; (8002f10 <BSP_SDRAM_MspInit+0x208>)
 8002e5c:	f001 fafa 	bl	8004454 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002e60:	f248 1333 	movw	r3, #33075	; 0x8133
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4829      	ldr	r0, [pc, #164]	; (8002f14 <BSP_SDRAM_MspInit+0x20c>)
 8002e6e:	f001 faf1 	bl	8004454 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002e72:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002e78:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002e7a:	2280      	movs	r2, #128	; 0x80
 8002e7c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002e7e:	4b26      	ldr	r3, [pc, #152]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e84:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002e86:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002e88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e8c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e8e:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002e90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e94:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002e96:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002e98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e9c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002e9e:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002ea4:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002ea6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eaa:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002eac:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002eb2:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002eb8:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002ebe:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002ec4:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002ec6:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <BSP_SDRAM_MspInit+0x214>)
 8002ec8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed0:	4a11      	ldr	r2, [pc, #68]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002ed6:	4810      	ldr	r0, [pc, #64]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002ed8:	f000 fe10 	bl	8003afc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002edc:	480e      	ldr	r0, [pc, #56]	; (8002f18 <BSP_SDRAM_MspInit+0x210>)
 8002ede:	f000 fd5f 	bl	80039a0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	210f      	movs	r1, #15
 8002ee6:	2038      	movs	r0, #56	; 0x38
 8002ee8:	f000 fd14 	bl	8003914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002eec:	2038      	movs	r0, #56	; 0x38
 8002eee:	f000 fd2d 	bl	800394c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002ef2:	bf00      	nop
 8002ef4:	3740      	adds	r7, #64	; 0x40
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40020400 	.word	0x40020400
 8002f04:	40020800 	.word	0x40020800
 8002f08:	40020c00 	.word	0x40020c00
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40021400 	.word	0x40021400
 8002f14:	40021800 	.word	0x40021800
 8002f18:	20000608 	.word	0x20000608
 8002f1c:	40026410 	.word	0x40026410

08002f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f24:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <HAL_Init+0x40>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0d      	ldr	r2, [pc, #52]	; (8002f60 <HAL_Init+0x40>)
 8002f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_Init+0x40>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <HAL_Init+0x40>)
 8002f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <HAL_Init+0x40>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <HAL_Init+0x40>)
 8002f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f48:	2003      	movs	r0, #3
 8002f4a:	f000 fcd8 	bl	80038fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f4e:	200f      	movs	r0, #15
 8002f50:	f7fe fbde 	bl	8001710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f54:	f7fe f806 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023c00 	.word	0x40023c00

08002f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_IncTick+0x20>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_IncTick+0x24>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4413      	add	r3, r2
 8002f74:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <HAL_IncTick+0x24>)
 8002f76:	6013      	str	r3, [r2, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000050 	.word	0x20000050
 8002f88:	20000668 	.word	0x20000668

08002f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <HAL_GetTick+0x14>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000668 	.word	0x20000668

08002fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fac:	f7ff ffee 	bl	8002f8c <HAL_GetTick>
 8002fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d005      	beq.n	8002fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <HAL_Delay+0x44>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fca:	bf00      	nop
 8002fcc:	f7ff ffde 	bl	8002f8c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d8f7      	bhi.n	8002fcc <HAL_Delay+0x28>
  {
  }
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000050 	.word	0x20000050

08002fec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e033      	b.n	800306a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fd ffd2 	bl	8000fb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b00      	cmp	r3, #0
 8003028:	d118      	bne.n	800305c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003032:	f023 0302 	bic.w	r3, r3, #2
 8003036:	f043 0202 	orr.w	r2, r3, #2
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fab4 	bl	80035ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f023 0303 	bic.w	r3, r3, #3
 8003052:	f043 0201 	orr.w	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
 800305a:	e001      	b.n	8003060 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003068:	7bfb      	ldrb	r3, [r7, #15]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_ADC_Start+0x1a>
 800308a:	2302      	movs	r3, #2
 800308c:	e0b2      	b.n	80031f4 <HAL_ADC_Start+0x180>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d018      	beq.n	80030d6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030b4:	4b52      	ldr	r3, [pc, #328]	; (8003200 <HAL_ADC_Start+0x18c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_ADC_Start+0x190>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	0c9a      	lsrs	r2, r3, #18
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80030c8:	e002      	b.n	80030d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f9      	bne.n	80030ca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d17a      	bne.n	80031da <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003102:	2b00      	cmp	r3, #0
 8003104:	d007      	beq.n	8003116 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800310e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	d106      	bne.n	8003132 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	f023 0206 	bic.w	r2, r3, #6
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	645a      	str	r2, [r3, #68]	; 0x44
 8003130:	e002      	b.n	8003138 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003140:	4b31      	ldr	r3, [pc, #196]	; (8003208 <HAL_ADC_Start+0x194>)
 8003142:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800314c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	2b00      	cmp	r3, #0
 8003158:	d12a      	bne.n	80031b0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a2b      	ldr	r2, [pc, #172]	; (800320c <HAL_ADC_Start+0x198>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d015      	beq.n	8003190 <HAL_ADC_Start+0x11c>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a29      	ldr	r2, [pc, #164]	; (8003210 <HAL_ADC_Start+0x19c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d105      	bne.n	800317a <HAL_ADC_Start+0x106>
 800316e:	4b26      	ldr	r3, [pc, #152]	; (8003208 <HAL_ADC_Start+0x194>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a25      	ldr	r2, [pc, #148]	; (8003214 <HAL_ADC_Start+0x1a0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d136      	bne.n	80031f2 <HAL_ADC_Start+0x17e>
 8003184:	4b20      	ldr	r3, [pc, #128]	; (8003208 <HAL_ADC_Start+0x194>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	d130      	bne.n	80031f2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d129      	bne.n	80031f2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031ac:	609a      	str	r2, [r3, #8]
 80031ae:	e020      	b.n	80031f2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a15      	ldr	r2, [pc, #84]	; (800320c <HAL_ADC_Start+0x198>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d11b      	bne.n	80031f2 <HAL_ADC_Start+0x17e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d114      	bne.n	80031f2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	e00b      	b.n	80031f2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f043 0210 	orr.w	r2, r3, #16
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	20000000 	.word	0x20000000
 8003204:	431bde83 	.word	0x431bde83
 8003208:	40012300 	.word	0x40012300
 800320c:	40012000 	.word	0x40012000
 8003210:	40012100 	.word	0x40012100
 8003214:	40012200 	.word	0x40012200

08003218 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003234:	d113      	bne.n	800325e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003244:	d10b      	bne.n	800325e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f043 0220 	orr.w	r2, r3, #32
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e063      	b.n	8003326 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800325e:	f7ff fe95 	bl	8002f8c <HAL_GetTick>
 8003262:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003264:	e021      	b.n	80032aa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d01d      	beq.n	80032aa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <HAL_ADC_PollForConversion+0x6c>
 8003274:	f7ff fe8a 	bl	8002f8c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d212      	bcs.n	80032aa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b02      	cmp	r3, #2
 8003290:	d00b      	beq.n	80032aa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f043 0204 	orr.w	r2, r3, #4
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e03d      	b.n	8003326 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d1d6      	bne.n	8003266 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0212 	mvn.w	r2, #18
 80032c0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d123      	bne.n	8003324 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d11f      	bne.n	8003324 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d111      	bne.n	8003324 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d105      	bne.n	8003324 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f043 0201 	orr.w	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800333c:	4618      	mov	r0, r3
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x1c>
 8003360:	2302      	movs	r3, #2
 8003362:	e113      	b.n	800358c <HAL_ADC_ConfigChannel+0x244>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b09      	cmp	r3, #9
 8003372:	d925      	bls.n	80033c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68d9      	ldr	r1, [r3, #12]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	4613      	mov	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4413      	add	r3, r2
 8003388:	3b1e      	subs	r3, #30
 800338a:	2207      	movs	r2, #7
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43da      	mvns	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	400a      	ands	r2, r1
 8003398:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68d9      	ldr	r1, [r3, #12]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	4618      	mov	r0, r3
 80033ac:	4603      	mov	r3, r0
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4403      	add	r3, r0
 80033b2:	3b1e      	subs	r3, #30
 80033b4:	409a      	lsls	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	e022      	b.n	8003406 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6919      	ldr	r1, [r3, #16]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	2207      	movs	r2, #7
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43da      	mvns	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	400a      	ands	r2, r1
 80033e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6919      	ldr	r1, [r3, #16]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	4618      	mov	r0, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4403      	add	r3, r0
 80033fc:	409a      	lsls	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b06      	cmp	r3, #6
 800340c:	d824      	bhi.n	8003458 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	3b05      	subs	r3, #5
 8003420:	221f      	movs	r2, #31
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43da      	mvns	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	400a      	ands	r2, r1
 800342e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	4618      	mov	r0, r3
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	3b05      	subs	r3, #5
 800344a:	fa00 f203 	lsl.w	r2, r0, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	635a      	str	r2, [r3, #52]	; 0x34
 8003456:	e04c      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b0c      	cmp	r3, #12
 800345e:	d824      	bhi.n	80034aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	3b23      	subs	r3, #35	; 0x23
 8003472:	221f      	movs	r2, #31
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43da      	mvns	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	400a      	ands	r2, r1
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	b29b      	uxth	r3, r3
 800348e:	4618      	mov	r0, r3
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	3b23      	subs	r3, #35	; 0x23
 800349c:	fa00 f203 	lsl.w	r2, r0, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
 80034a8:	e023      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	3b41      	subs	r3, #65	; 0x41
 80034bc:	221f      	movs	r2, #31
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43da      	mvns	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	400a      	ands	r2, r1
 80034ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	4618      	mov	r0, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	3b41      	subs	r3, #65	; 0x41
 80034e6:	fa00 f203 	lsl.w	r2, r0, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034f2:	4b29      	ldr	r3, [pc, #164]	; (8003598 <HAL_ADC_ConfigChannel+0x250>)
 80034f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a28      	ldr	r2, [pc, #160]	; (800359c <HAL_ADC_ConfigChannel+0x254>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d10f      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x1d8>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b12      	cmp	r3, #18
 8003506:	d10b      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1d      	ldr	r2, [pc, #116]	; (800359c <HAL_ADC_ConfigChannel+0x254>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d12b      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x23a>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <HAL_ADC_ConfigChannel+0x258>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d003      	beq.n	800353c <HAL_ADC_ConfigChannel+0x1f4>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b11      	cmp	r3, #17
 800353a:	d122      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a11      	ldr	r2, [pc, #68]	; (80035a0 <HAL_ADC_ConfigChannel+0x258>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d111      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_ADC_ConfigChannel+0x25c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <HAL_ADC_ConfigChannel+0x260>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	0c9a      	lsrs	r2, r3, #18
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003574:	e002      	b.n	800357c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	3b01      	subs	r3, #1
 800357a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f9      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	40012300 	.word	0x40012300
 800359c:	40012000 	.word	0x40012000
 80035a0:	10000012 	.word	0x10000012
 80035a4:	20000000 	.word	0x20000000
 80035a8:	431bde83 	.word	0x431bde83

080035ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035b4:	4b79      	ldr	r3, [pc, #484]	; (800379c <ADC_Init+0x1f0>)
 80035b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	021a      	lsls	r2, r3, #8
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6859      	ldr	r1, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6899      	ldr	r1, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	4a58      	ldr	r2, [pc, #352]	; (80037a0 <ADC_Init+0x1f4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d022      	beq.n	800368a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003652:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6899      	ldr	r1, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6899      	ldr	r1, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	e00f      	b.n	80036aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0202 	bic.w	r2, r2, #2
 80036b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6899      	ldr	r1, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	7e1b      	ldrb	r3, [r3, #24]
 80036c4:	005a      	lsls	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01b      	beq.n	8003710 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6859      	ldr	r1, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	3b01      	subs	r3, #1
 8003704:	035a      	lsls	r2, r3, #13
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	e007      	b.n	8003720 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800371e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800372e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	3b01      	subs	r3, #1
 800373c:	051a      	lsls	r2, r3, #20
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6899      	ldr	r1, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003762:	025a      	lsls	r2, r3, #9
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6899      	ldr	r1, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	029a      	lsls	r2, r3, #10
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	609a      	str	r2, [r3, #8]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40012300 	.word	0x40012300
 80037a0:	0f000001 	.word	0x0f000001

080037a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c0:	4013      	ands	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d6:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	60d3      	str	r3, [r2, #12]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <__NVIC_GetPriorityGrouping+0x18>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	f003 0307 	and.w	r3, r3, #7
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	2b00      	cmp	r3, #0
 8003818:	db0b      	blt.n	8003832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4907      	ldr	r1, [pc, #28]	; (8003840 <__NVIC_EnableIRQ+0x38>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2001      	movs	r0, #1
 800382a:	fa00 f202 	lsl.w	r2, r0, r2
 800382e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000e100 	.word	0xe000e100

08003844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	2b00      	cmp	r3, #0
 8003856:	db0a      	blt.n	800386e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	490c      	ldr	r1, [pc, #48]	; (8003890 <__NVIC_SetPriority+0x4c>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	440b      	add	r3, r1
 8003868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800386c:	e00a      	b.n	8003884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4908      	ldr	r1, [pc, #32]	; (8003894 <__NVIC_SetPriority+0x50>)
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3b04      	subs	r3, #4
 800387c:	0112      	lsls	r2, r2, #4
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	440b      	add	r3, r1
 8003882:	761a      	strb	r2, [r3, #24]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000e100 	.word	0xe000e100
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f1c3 0307 	rsb	r3, r3, #7
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	bf28      	it	cs
 80038b6:	2304      	movcs	r3, #4
 80038b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3304      	adds	r3, #4
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d902      	bls.n	80038c8 <NVIC_EncodePriority+0x30>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3b03      	subs	r3, #3
 80038c6:	e000      	b.n	80038ca <NVIC_EncodePriority+0x32>
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	401a      	ands	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e0:	f04f 31ff 	mov.w	r1, #4294967295
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43d9      	mvns	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f0:	4313      	orrs	r3, r2
         );
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3724      	adds	r7, #36	; 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff ff4c 	bl	80037a4 <__NVIC_SetPriorityGrouping>
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003926:	f7ff ff61 	bl	80037ec <__NVIC_GetPriorityGrouping>
 800392a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	6978      	ldr	r0, [r7, #20]
 8003932:	f7ff ffb1 	bl	8003898 <NVIC_EncodePriority>
 8003936:	4602      	mov	r2, r0
 8003938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393c:	4611      	mov	r1, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff ff80 	bl	8003844 <__NVIC_SetPriority>
}
 8003944:	bf00      	nop
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff ff54 	bl	8003808 <__NVIC_EnableIRQ>
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e00e      	b.n	8003998 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	795b      	ldrb	r3, [r3, #5]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d105      	bne.n	8003990 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd fb56 	bl	800103c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039ac:	f7ff faee 	bl	8002f8c <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e099      	b.n	8003af0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039dc:	e00f      	b.n	80039fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039de:	f7ff fad5 	bl	8002f8c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b05      	cmp	r3, #5
 80039ea:	d908      	bls.n	80039fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2203      	movs	r2, #3
 80039f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e078      	b.n	8003af0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e8      	bne.n	80039de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4b38      	ldr	r3, [pc, #224]	; (8003af8 <HAL_DMA_Init+0x158>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d107      	bne.n	8003a68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	4313      	orrs	r3, r2
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f023 0307 	bic.w	r3, r3, #7
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d117      	bne.n	8003ac2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00e      	beq.n	8003ac2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f8bd 	bl	8003c24 <DMA_CheckFifoParam>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2240      	movs	r2, #64	; 0x40
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e016      	b.n	8003af0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f874 	bl	8003bb8 <DMA_CalcBaseAndBitshift>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	223f      	movs	r2, #63	; 0x3f
 8003ada:	409a      	lsls	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	f010803f 	.word	0xf010803f

08003afc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e050      	b.n	8003bb0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d101      	bne.n	8003b1e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e048      	b.n	8003bb0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0201 	bic.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2200      	movs	r2, #0
 8003b54:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2221      	movs	r2, #33	; 0x21
 8003b5c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f82a 	bl	8003bb8 <DMA_CalcBaseAndBitshift>
 8003b64:	4603      	mov	r3, r0
 8003b66:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b90:	223f      	movs	r2, #63	; 0x3f
 8003b92:	409a      	lsls	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	3b10      	subs	r3, #16
 8003bc8:	4a14      	ldr	r2, [pc, #80]	; (8003c1c <DMA_CalcBaseAndBitshift+0x64>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bd2:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <DMA_CalcBaseAndBitshift+0x68>)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d909      	bls.n	8003bfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	1d1a      	adds	r2, r3, #4
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	659a      	str	r2, [r3, #88]	; 0x58
 8003bf8:	e007      	b.n	8003c0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	aaaaaaab 	.word	0xaaaaaaab
 8003c20:	0800a654 	.word	0x0800a654

08003c24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d11f      	bne.n	8003c7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d856      	bhi.n	8003cf2 <DMA_CheckFifoParam+0xce>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <DMA_CheckFifoParam+0x28>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c5d 	.word	0x08003c5d
 8003c50:	08003c6f 	.word	0x08003c6f
 8003c54:	08003c5d 	.word	0x08003c5d
 8003c58:	08003cf3 	.word	0x08003cf3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d046      	beq.n	8003cf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6c:	e043      	b.n	8003cf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c76:	d140      	bne.n	8003cfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c7c:	e03d      	b.n	8003cfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c86:	d121      	bne.n	8003ccc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d837      	bhi.n	8003cfe <DMA_CheckFifoParam+0xda>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <DMA_CheckFifoParam+0x70>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003ca5 	.word	0x08003ca5
 8003c98:	08003cab 	.word	0x08003cab
 8003c9c:	08003ca5 	.word	0x08003ca5
 8003ca0:	08003cbd 	.word	0x08003cbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca8:	e030      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d025      	beq.n	8003d02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cba:	e022      	b.n	8003d02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cc4:	d11f      	bne.n	8003d06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cca:	e01c      	b.n	8003d06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d903      	bls.n	8003cda <DMA_CheckFifoParam+0xb6>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d003      	beq.n	8003ce0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cd8:	e018      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8003cde:	e015      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00e      	beq.n	8003d0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf0:	e00b      	b.n	8003d0a <DMA_CheckFifoParam+0xe6>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e00a      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
      break;
 8003cf6:	bf00      	nop
 8003cf8:	e008      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
      break;
 8003cfa:	bf00      	nop
 8003cfc:	e006      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e004      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
      break;
 8003d02:	bf00      	nop
 8003d04:	e002      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
      break;   
 8003d06:	bf00      	nop
 8003d08:	e000      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
      break;
 8003d0a:	bf00      	nop
    }
  } 
  
  return status; 
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop

08003d1c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e03b      	b.n	8003da6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd f99c 	bl	8001080 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6c:	f023 0107 	bic.w	r1, r3, #7
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68d1      	ldr	r1, [r2, #12]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	430b      	orrs	r3, r1
 8003d94:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b086      	sub	sp, #24
 8003db2:	af02      	add	r7, sp, #8
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_DMA2D_Start+0x1c>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e018      	b.n	8003dfc <HAL_DMA2D_Start+0x4e>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fa99 	bl	800431c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0201 	orr.w	r2, r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d056      	beq.n	8003ece <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e20:	f7ff f8b4 	bl	8002f8c <HAL_GetTick>
 8003e24:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003e26:	e04b      	b.n	8003ec0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d023      	beq.n	8003e82 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e48:	f043 0202 	orr.w	r2, r3, #2
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	f043 0201 	orr.w	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2221      	movs	r2, #33	; 0x21
 8003e6c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2204      	movs	r2, #4
 8003e72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0a5      	b.n	8003fce <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e88:	d01a      	beq.n	8003ec0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e8a:	f7ff f87f 	bl	8002f8c <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d302      	bcc.n	8003ea0 <HAL_DMA2D_PollForTransfer+0x9c>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10f      	bne.n	8003ec0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea4:	f043 0220 	orr.w	r2, r3, #32
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2203      	movs	r2, #3
 8003eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e086      	b.n	8003fce <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0ac      	beq.n	8003e28 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d061      	beq.n	8003fb4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ef0:	f7ff f84c 	bl	8002f8c <HAL_GetTick>
 8003ef4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003ef6:	e056      	b.n	8003fa6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d02e      	beq.n	8003f68 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f18:	f043 0204 	orr.w	r2, r3, #4
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2e:	f043 0202 	orr.w	r2, r3, #2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	f043 0201 	orr.w	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2229      	movs	r2, #41	; 0x29
 8003f52:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2204      	movs	r2, #4
 8003f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e032      	b.n	8003fce <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d01a      	beq.n	8003fa6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f70:	f7ff f80c 	bl	8002f8c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d302      	bcc.n	8003f86 <HAL_DMA2D_PollForTransfer+0x182>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10f      	bne.n	8003fa6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2203      	movs	r2, #3
 8003f96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e013      	b.n	8003fce <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0a1      	beq.n	8003ef8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2212      	movs	r2, #18
 8003fba:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d026      	beq.n	8004046 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d021      	beq.n	8004046 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004010:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004016:	f043 0201 	orr.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2201      	movs	r2, #1
 8004024:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2204      	movs	r2, #4
 800402a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d026      	beq.n	800409e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d021      	beq.n	800409e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004068:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2220      	movs	r2, #32
 8004070:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004076:	f043 0202 	orr.w	r2, r3, #2
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2204      	movs	r2, #4
 8004082:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d026      	beq.n	80040f6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d021      	beq.n	80040f6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040c0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2208      	movs	r2, #8
 80040c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ce:	f043 0204 	orr.w	r2, r3, #4
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2204      	movs	r2, #4
 80040da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d013      	beq.n	8004128 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00e      	beq.n	8004128 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004118:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2204      	movs	r2, #4
 8004120:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f853 	bl	80041ce <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d024      	beq.n	800417c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01f      	beq.n	800417c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800414a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2202      	movs	r2, #2
 8004152:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	2b00      	cmp	r3, #0
 8004184:	d01f      	beq.n	80041c6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01a      	beq.n	80041c6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800419e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2210      	movs	r2, #16
 80041a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f80e 	bl	80041e2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_DMA2D_ConfigLayer+0x20>
 8004214:	2302      	movs	r3, #2
 8004216:	e079      	b.n	800430c <HAL_DMA2D_ConfigLayer+0x114>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	3318      	adds	r3, #24
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4413      	add	r3, r2
 8004232:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	041b      	lsls	r3, r3, #16
 800423e:	4313      	orrs	r3, r2
 8004240:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004242:	4b35      	ldr	r3, [pc, #212]	; (8004318 <HAL_DMA2D_ConfigLayer+0x120>)
 8004244:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b0a      	cmp	r3, #10
 800424c:	d003      	beq.n	8004256 <HAL_DMA2D_ConfigLayer+0x5e>
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b09      	cmp	r3, #9
 8004254:	d107      	bne.n	8004266 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	e005      	b.n	8004272 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	061b      	lsls	r3, r3, #24
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d120      	bne.n	80042ba <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	43db      	mvns	r3, r3
 8004282:	ea02 0103 	and.w	r1, r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	430a      	orrs	r2, r1
 800428e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b0a      	cmp	r3, #10
 80042a0:	d003      	beq.n	80042aa <HAL_DMA2D_ConfigLayer+0xb2>
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b09      	cmp	r3, #9
 80042a8:	d127      	bne.n	80042fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80042b6:	629a      	str	r2, [r3, #40]	; 0x28
 80042b8:	e01f      	b.n	80042fa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69da      	ldr	r2, [r3, #28]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	43db      	mvns	r3, r3
 80042c4:	ea02 0103 	and.w	r1, r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b0a      	cmp	r3, #10
 80042e2:	d003      	beq.n	80042ec <HAL_DMA2D_ConfigLayer+0xf4>
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b09      	cmp	r3, #9
 80042ea:	d106      	bne.n	80042fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80042f8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	ff03000f 	.word	0xff03000f

0800431c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800431c:	b480      	push	{r7}
 800431e:	b08b      	sub	sp, #44	; 0x2c
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004330:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	041a      	lsls	r2, r3, #16
 8004338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433a:	431a      	orrs	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004354:	d174      	bne.n	8004440 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800435c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004364:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800436c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d108      	bne.n	800438e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	431a      	orrs	r2, r3
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	4313      	orrs	r3, r2
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
 800438c:	e053      	b.n	8004436 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d106      	bne.n	80043a4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	4313      	orrs	r3, r2
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	4313      	orrs	r3, r2
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
 80043a2:	e048      	b.n	8004436 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d111      	bne.n	80043d0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	0cdb      	lsrs	r3, r3, #19
 80043b0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	0a9b      	lsrs	r3, r3, #10
 80043b6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	08db      	lsrs	r3, r3, #3
 80043bc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	02db      	lsls	r3, r3, #11
 80043c6:	4313      	orrs	r3, r2
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
 80043ce:	e032      	b.n	8004436 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d117      	bne.n	8004408 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	0fdb      	lsrs	r3, r3, #31
 80043dc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	0cdb      	lsrs	r3, r3, #19
 80043e2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	0adb      	lsrs	r3, r3, #11
 80043e8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	08db      	lsrs	r3, r3, #3
 80043ee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	029b      	lsls	r3, r3, #10
 80043f8:	431a      	orrs	r2, r3
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	03db      	lsls	r3, r3, #15
 80043fe:	4313      	orrs	r3, r2
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
 8004406:	e016      	b.n	8004436 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	0f1b      	lsrs	r3, r3, #28
 800440c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	0d1b      	lsrs	r3, r3, #20
 8004412:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	0b1b      	lsrs	r3, r3, #12
 8004418:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	011a      	lsls	r2, r3, #4
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	431a      	orrs	r2, r3
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	031b      	lsls	r3, r3, #12
 800442e:	4313      	orrs	r3, r2
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800443e:	e003      	b.n	8004448 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	60da      	str	r2, [r3, #12]
}
 8004448:	bf00      	nop
 800444a:	372c      	adds	r7, #44	; 0x2c
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004454:	b480      	push	{r7}
 8004456:	b089      	sub	sp, #36	; 0x24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004462:	2300      	movs	r3, #0
 8004464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004466:	2300      	movs	r3, #0
 8004468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	e177      	b.n	8004760 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004470:	2201      	movs	r2, #1
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4013      	ands	r3, r2
 8004482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	429a      	cmp	r2, r3
 800448a:	f040 8166 	bne.w	800475a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b01      	cmp	r3, #1
 8004498:	d005      	beq.n	80044a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d130      	bne.n	8004508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	2203      	movs	r2, #3
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	43db      	mvns	r3, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4013      	ands	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044dc:	2201      	movs	r2, #1
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	43db      	mvns	r3, r3
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	4013      	ands	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 0201 	and.w	r2, r3, #1
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4313      	orrs	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	2b03      	cmp	r3, #3
 8004512:	d017      	beq.n	8004544 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	2203      	movs	r2, #3
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4013      	ands	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4313      	orrs	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d123      	bne.n	8004598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	08da      	lsrs	r2, r3, #3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3208      	adds	r2, #8
 8004558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800455c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	220f      	movs	r2, #15
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4313      	orrs	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	08da      	lsrs	r2, r3, #3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3208      	adds	r2, #8
 8004592:	69b9      	ldr	r1, [r7, #24]
 8004594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	2203      	movs	r2, #3
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4013      	ands	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 0203 	and.w	r2, r3, #3
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 80c0 	beq.w	800475a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	4b66      	ldr	r3, [pc, #408]	; (8004778 <HAL_GPIO_Init+0x324>)
 80045e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e2:	4a65      	ldr	r2, [pc, #404]	; (8004778 <HAL_GPIO_Init+0x324>)
 80045e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045e8:	6453      	str	r3, [r2, #68]	; 0x44
 80045ea:	4b63      	ldr	r3, [pc, #396]	; (8004778 <HAL_GPIO_Init+0x324>)
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045f6:	4a61      	ldr	r2, [pc, #388]	; (800477c <HAL_GPIO_Init+0x328>)
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	089b      	lsrs	r3, r3, #2
 80045fc:	3302      	adds	r3, #2
 80045fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	220f      	movs	r2, #15
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43db      	mvns	r3, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4013      	ands	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a58      	ldr	r2, [pc, #352]	; (8004780 <HAL_GPIO_Init+0x32c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d037      	beq.n	8004692 <HAL_GPIO_Init+0x23e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a57      	ldr	r2, [pc, #348]	; (8004784 <HAL_GPIO_Init+0x330>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d031      	beq.n	800468e <HAL_GPIO_Init+0x23a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a56      	ldr	r2, [pc, #344]	; (8004788 <HAL_GPIO_Init+0x334>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d02b      	beq.n	800468a <HAL_GPIO_Init+0x236>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a55      	ldr	r2, [pc, #340]	; (800478c <HAL_GPIO_Init+0x338>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d025      	beq.n	8004686 <HAL_GPIO_Init+0x232>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a54      	ldr	r2, [pc, #336]	; (8004790 <HAL_GPIO_Init+0x33c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d01f      	beq.n	8004682 <HAL_GPIO_Init+0x22e>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a53      	ldr	r2, [pc, #332]	; (8004794 <HAL_GPIO_Init+0x340>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d019      	beq.n	800467e <HAL_GPIO_Init+0x22a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a52      	ldr	r2, [pc, #328]	; (8004798 <HAL_GPIO_Init+0x344>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <HAL_GPIO_Init+0x226>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a51      	ldr	r2, [pc, #324]	; (800479c <HAL_GPIO_Init+0x348>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00d      	beq.n	8004676 <HAL_GPIO_Init+0x222>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a50      	ldr	r2, [pc, #320]	; (80047a0 <HAL_GPIO_Init+0x34c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d007      	beq.n	8004672 <HAL_GPIO_Init+0x21e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a4f      	ldr	r2, [pc, #316]	; (80047a4 <HAL_GPIO_Init+0x350>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d101      	bne.n	800466e <HAL_GPIO_Init+0x21a>
 800466a:	2309      	movs	r3, #9
 800466c:	e012      	b.n	8004694 <HAL_GPIO_Init+0x240>
 800466e:	230a      	movs	r3, #10
 8004670:	e010      	b.n	8004694 <HAL_GPIO_Init+0x240>
 8004672:	2308      	movs	r3, #8
 8004674:	e00e      	b.n	8004694 <HAL_GPIO_Init+0x240>
 8004676:	2307      	movs	r3, #7
 8004678:	e00c      	b.n	8004694 <HAL_GPIO_Init+0x240>
 800467a:	2306      	movs	r3, #6
 800467c:	e00a      	b.n	8004694 <HAL_GPIO_Init+0x240>
 800467e:	2305      	movs	r3, #5
 8004680:	e008      	b.n	8004694 <HAL_GPIO_Init+0x240>
 8004682:	2304      	movs	r3, #4
 8004684:	e006      	b.n	8004694 <HAL_GPIO_Init+0x240>
 8004686:	2303      	movs	r3, #3
 8004688:	e004      	b.n	8004694 <HAL_GPIO_Init+0x240>
 800468a:	2302      	movs	r3, #2
 800468c:	e002      	b.n	8004694 <HAL_GPIO_Init+0x240>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <HAL_GPIO_Init+0x240>
 8004692:	2300      	movs	r3, #0
 8004694:	69fa      	ldr	r2, [r7, #28]
 8004696:	f002 0203 	and.w	r2, r2, #3
 800469a:	0092      	lsls	r2, r2, #2
 800469c:	4093      	lsls	r3, r2
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046a4:	4935      	ldr	r1, [pc, #212]	; (800477c <HAL_GPIO_Init+0x328>)
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	089b      	lsrs	r3, r3, #2
 80046aa:	3302      	adds	r3, #2
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046b2:	4b3d      	ldr	r3, [pc, #244]	; (80047a8 <HAL_GPIO_Init+0x354>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	43db      	mvns	r3, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4013      	ands	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046d6:	4a34      	ldr	r2, [pc, #208]	; (80047a8 <HAL_GPIO_Init+0x354>)
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046dc:	4b32      	ldr	r3, [pc, #200]	; (80047a8 <HAL_GPIO_Init+0x354>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	43db      	mvns	r3, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4013      	ands	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004700:	4a29      	ldr	r2, [pc, #164]	; (80047a8 <HAL_GPIO_Init+0x354>)
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004706:	4b28      	ldr	r3, [pc, #160]	; (80047a8 <HAL_GPIO_Init+0x354>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800472a:	4a1f      	ldr	r2, [pc, #124]	; (80047a8 <HAL_GPIO_Init+0x354>)
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004730:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <HAL_GPIO_Init+0x354>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	43db      	mvns	r3, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4013      	ands	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004754:	4a14      	ldr	r2, [pc, #80]	; (80047a8 <HAL_GPIO_Init+0x354>)
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	3301      	adds	r3, #1
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	2b0f      	cmp	r3, #15
 8004764:	f67f ae84 	bls.w	8004470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	3724      	adds	r7, #36	; 0x24
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800
 800477c:	40013800 	.word	0x40013800
 8004780:	40020000 	.word	0x40020000
 8004784:	40020400 	.word	0x40020400
 8004788:	40020800 	.word	0x40020800
 800478c:	40020c00 	.word	0x40020c00
 8004790:	40021000 	.word	0x40021000
 8004794:	40021400 	.word	0x40021400
 8004798:	40021800 	.word	0x40021800
 800479c:	40021c00 	.word	0x40021c00
 80047a0:	40022000 	.word	0x40022000
 80047a4:	40022400 	.word	0x40022400
 80047a8:	40013c00 	.word	0x40013c00

080047ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80047be:	2300      	movs	r3, #0
 80047c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	e0d9      	b.n	800497c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047c8:	2201      	movs	r2, #1
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	4013      	ands	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	429a      	cmp	r2, r3
 80047e0:	f040 80c9 	bne.w	8004976 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80047e4:	4a6b      	ldr	r2, [pc, #428]	; (8004994 <HAL_GPIO_DeInit+0x1e8>)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	089b      	lsrs	r3, r3, #2
 80047ea:	3302      	adds	r3, #2
 80047ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	220f      	movs	r2, #15
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	4013      	ands	r3, r2
 8004804:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a63      	ldr	r2, [pc, #396]	; (8004998 <HAL_GPIO_DeInit+0x1ec>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d037      	beq.n	800487e <HAL_GPIO_DeInit+0xd2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a62      	ldr	r2, [pc, #392]	; (800499c <HAL_GPIO_DeInit+0x1f0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d031      	beq.n	800487a <HAL_GPIO_DeInit+0xce>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a61      	ldr	r2, [pc, #388]	; (80049a0 <HAL_GPIO_DeInit+0x1f4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d02b      	beq.n	8004876 <HAL_GPIO_DeInit+0xca>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a60      	ldr	r2, [pc, #384]	; (80049a4 <HAL_GPIO_DeInit+0x1f8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d025      	beq.n	8004872 <HAL_GPIO_DeInit+0xc6>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a5f      	ldr	r2, [pc, #380]	; (80049a8 <HAL_GPIO_DeInit+0x1fc>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d01f      	beq.n	800486e <HAL_GPIO_DeInit+0xc2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a5e      	ldr	r2, [pc, #376]	; (80049ac <HAL_GPIO_DeInit+0x200>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d019      	beq.n	800486a <HAL_GPIO_DeInit+0xbe>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a5d      	ldr	r2, [pc, #372]	; (80049b0 <HAL_GPIO_DeInit+0x204>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_GPIO_DeInit+0xba>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a5c      	ldr	r2, [pc, #368]	; (80049b4 <HAL_GPIO_DeInit+0x208>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00d      	beq.n	8004862 <HAL_GPIO_DeInit+0xb6>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a5b      	ldr	r2, [pc, #364]	; (80049b8 <HAL_GPIO_DeInit+0x20c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d007      	beq.n	800485e <HAL_GPIO_DeInit+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a5a      	ldr	r2, [pc, #360]	; (80049bc <HAL_GPIO_DeInit+0x210>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d101      	bne.n	800485a <HAL_GPIO_DeInit+0xae>
 8004856:	2309      	movs	r3, #9
 8004858:	e012      	b.n	8004880 <HAL_GPIO_DeInit+0xd4>
 800485a:	230a      	movs	r3, #10
 800485c:	e010      	b.n	8004880 <HAL_GPIO_DeInit+0xd4>
 800485e:	2308      	movs	r3, #8
 8004860:	e00e      	b.n	8004880 <HAL_GPIO_DeInit+0xd4>
 8004862:	2307      	movs	r3, #7
 8004864:	e00c      	b.n	8004880 <HAL_GPIO_DeInit+0xd4>
 8004866:	2306      	movs	r3, #6
 8004868:	e00a      	b.n	8004880 <HAL_GPIO_DeInit+0xd4>
 800486a:	2305      	movs	r3, #5
 800486c:	e008      	b.n	8004880 <HAL_GPIO_DeInit+0xd4>
 800486e:	2304      	movs	r3, #4
 8004870:	e006      	b.n	8004880 <HAL_GPIO_DeInit+0xd4>
 8004872:	2303      	movs	r3, #3
 8004874:	e004      	b.n	8004880 <HAL_GPIO_DeInit+0xd4>
 8004876:	2302      	movs	r3, #2
 8004878:	e002      	b.n	8004880 <HAL_GPIO_DeInit+0xd4>
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HAL_GPIO_DeInit+0xd4>
 800487e:	2300      	movs	r3, #0
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	f002 0203 	and.w	r2, r2, #3
 8004886:	0092      	lsls	r2, r2, #2
 8004888:	4093      	lsls	r3, r2
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	429a      	cmp	r2, r3
 800488e:	d132      	bne.n	80048f6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004890:	4b4b      	ldr	r3, [pc, #300]	; (80049c0 <HAL_GPIO_DeInit+0x214>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	43db      	mvns	r3, r3
 8004898:	4949      	ldr	r1, [pc, #292]	; (80049c0 <HAL_GPIO_DeInit+0x214>)
 800489a:	4013      	ands	r3, r2
 800489c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800489e:	4b48      	ldr	r3, [pc, #288]	; (80049c0 <HAL_GPIO_DeInit+0x214>)
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	43db      	mvns	r3, r3
 80048a6:	4946      	ldr	r1, [pc, #280]	; (80049c0 <HAL_GPIO_DeInit+0x214>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80048ac:	4b44      	ldr	r3, [pc, #272]	; (80049c0 <HAL_GPIO_DeInit+0x214>)
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	43db      	mvns	r3, r3
 80048b4:	4942      	ldr	r1, [pc, #264]	; (80049c0 <HAL_GPIO_DeInit+0x214>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80048ba:	4b41      	ldr	r3, [pc, #260]	; (80049c0 <HAL_GPIO_DeInit+0x214>)
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	493f      	ldr	r1, [pc, #252]	; (80049c0 <HAL_GPIO_DeInit+0x214>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	220f      	movs	r2, #15
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80048d8:	4a2e      	ldr	r2, [pc, #184]	; (8004994 <HAL_GPIO_DeInit+0x1e8>)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	089b      	lsrs	r3, r3, #2
 80048de:	3302      	adds	r3, #2
 80048e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	43da      	mvns	r2, r3
 80048e8:	482a      	ldr	r0, [pc, #168]	; (8004994 <HAL_GPIO_DeInit+0x1e8>)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	089b      	lsrs	r3, r3, #2
 80048ee:	400a      	ands	r2, r1
 80048f0:	3302      	adds	r3, #2
 80048f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	2103      	movs	r1, #3
 8004900:	fa01 f303 	lsl.w	r3, r1, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	401a      	ands	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	08da      	lsrs	r2, r3, #3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3208      	adds	r2, #8
 8004914:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	220f      	movs	r2, #15
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	43db      	mvns	r3, r3
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	08d2      	lsrs	r2, r2, #3
 800492c:	4019      	ands	r1, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3208      	adds	r2, #8
 8004932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	2103      	movs	r1, #3
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	43db      	mvns	r3, r3
 8004946:	401a      	ands	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	2101      	movs	r1, #1
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	fa01 f303 	lsl.w	r3, r1, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	401a      	ands	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	2103      	movs	r1, #3
 800496a:	fa01 f303 	lsl.w	r3, r1, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	401a      	ands	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	3301      	adds	r3, #1
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2b0f      	cmp	r3, #15
 8004980:	f67f af22 	bls.w	80047c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40013800 	.word	0x40013800
 8004998:	40020000 	.word	0x40020000
 800499c:	40020400 	.word	0x40020400
 80049a0:	40020800 	.word	0x40020800
 80049a4:	40020c00 	.word	0x40020c00
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40021400 	.word	0x40021400
 80049b0:	40021800 	.word	0x40021800
 80049b4:	40021c00 	.word	0x40021c00
 80049b8:	40022000 	.word	0x40022000
 80049bc:	40022400 	.word	0x40022400
 80049c0:	40013c00 	.word	0x40013c00

080049c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	807b      	strh	r3, [r7, #2]
 80049d0:	4613      	mov	r3, r2
 80049d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049d4:	787b      	ldrb	r3, [r7, #1]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049da:	887a      	ldrh	r2, [r7, #2]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049e0:	e003      	b.n	80049ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049e2:	887b      	ldrh	r3, [r7, #2]
 80049e4:	041a      	lsls	r2, r3, #16
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	619a      	str	r2, [r3, #24]
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e12b      	b.n	8004c62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fc fb56 	bl	80010d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2224      	movs	r2, #36	; 0x24
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a5c:	f001 f9de 	bl	8005e1c <HAL_RCC_GetPCLK1Freq>
 8004a60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	4a81      	ldr	r2, [pc, #516]	; (8004c6c <HAL_I2C_Init+0x274>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d807      	bhi.n	8004a7c <HAL_I2C_Init+0x84>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4a80      	ldr	r2, [pc, #512]	; (8004c70 <HAL_I2C_Init+0x278>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	bf94      	ite	ls
 8004a74:	2301      	movls	r3, #1
 8004a76:	2300      	movhi	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	e006      	b.n	8004a8a <HAL_I2C_Init+0x92>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4a7d      	ldr	r2, [pc, #500]	; (8004c74 <HAL_I2C_Init+0x27c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	bf94      	ite	ls
 8004a84:	2301      	movls	r3, #1
 8004a86:	2300      	movhi	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e0e7      	b.n	8004c62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4a78      	ldr	r2, [pc, #480]	; (8004c78 <HAL_I2C_Init+0x280>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	0c9b      	lsrs	r3, r3, #18
 8004a9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	4a6a      	ldr	r2, [pc, #424]	; (8004c6c <HAL_I2C_Init+0x274>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d802      	bhi.n	8004acc <HAL_I2C_Init+0xd4>
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	e009      	b.n	8004ae0 <HAL_I2C_Init+0xe8>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ad2:	fb02 f303 	mul.w	r3, r2, r3
 8004ad6:	4a69      	ldr	r2, [pc, #420]	; (8004c7c <HAL_I2C_Init+0x284>)
 8004ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8004adc:	099b      	lsrs	r3, r3, #6
 8004ade:	3301      	adds	r3, #1
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004af2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	495c      	ldr	r1, [pc, #368]	; (8004c6c <HAL_I2C_Init+0x274>)
 8004afc:	428b      	cmp	r3, r1
 8004afe:	d819      	bhi.n	8004b34 <HAL_I2C_Init+0x13c>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	1e59      	subs	r1, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b0e:	1c59      	adds	r1, r3, #1
 8004b10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b14:	400b      	ands	r3, r1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <HAL_I2C_Init+0x138>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1e59      	subs	r1, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2e:	e051      	b.n	8004bd4 <HAL_I2C_Init+0x1dc>
 8004b30:	2304      	movs	r3, #4
 8004b32:	e04f      	b.n	8004bd4 <HAL_I2C_Init+0x1dc>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d111      	bne.n	8004b60 <HAL_I2C_Init+0x168>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	1e58      	subs	r0, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6859      	ldr	r1, [r3, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	440b      	add	r3, r1
 8004b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b4e:	3301      	adds	r3, #1
 8004b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bf0c      	ite	eq
 8004b58:	2301      	moveq	r3, #1
 8004b5a:	2300      	movne	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	e012      	b.n	8004b86 <HAL_I2C_Init+0x18e>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1e58      	subs	r0, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6859      	ldr	r1, [r3, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	0099      	lsls	r1, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b76:	3301      	adds	r3, #1
 8004b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	bf0c      	ite	eq
 8004b80:	2301      	moveq	r3, #1
 8004b82:	2300      	movne	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_I2C_Init+0x196>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e022      	b.n	8004bd4 <HAL_I2C_Init+0x1dc>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10e      	bne.n	8004bb4 <HAL_I2C_Init+0x1bc>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1e58      	subs	r0, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6859      	ldr	r1, [r3, #4]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	440b      	add	r3, r1
 8004ba4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba8:	3301      	adds	r3, #1
 8004baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb2:	e00f      	b.n	8004bd4 <HAL_I2C_Init+0x1dc>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	1e58      	subs	r0, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6859      	ldr	r1, [r3, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	0099      	lsls	r1, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bca:	3301      	adds	r3, #1
 8004bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	6809      	ldr	r1, [r1, #0]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69da      	ldr	r2, [r3, #28]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6911      	ldr	r1, [r2, #16]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	68d2      	ldr	r2, [r2, #12]
 8004c0e:	4311      	orrs	r1, r2
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	430b      	orrs	r3, r1
 8004c16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	000186a0 	.word	0x000186a0
 8004c70:	001e847f 	.word	0x001e847f
 8004c74:	003d08ff 	.word	0x003d08ff
 8004c78:	431bde83 	.word	0x431bde83
 8004c7c:	10624dd3 	.word	0x10624dd3

08004c80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	d129      	bne.n	8004cea <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2224      	movs	r2, #36	; 0x24
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0201 	bic.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0210 	bic.w	r2, r2, #16
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0201 	orr.w	r2, r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	e000      	b.n	8004cec <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004cea:	2302      	movs	r3, #2
  }
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b20      	cmp	r3, #32
 8004d10:	d12a      	bne.n	8004d68 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2224      	movs	r2, #36	; 0x24
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004d32:	89fb      	ldrh	r3, [r7, #14]
 8004d34:	f023 030f 	bic.w	r3, r3, #15
 8004d38:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	89fb      	ldrh	r3, [r7, #14]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	89fa      	ldrh	r2, [r7, #14]
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	e000      	b.n	8004d6a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e0bf      	b.n	8004f0a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fc fa00 	bl	80011a4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004dba:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6999      	ldr	r1, [r3, #24]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004dd0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6899      	ldr	r1, [r3, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4b4a      	ldr	r3, [pc, #296]	; (8004f14 <HAL_LTDC_Init+0x19c>)
 8004dec:	400b      	ands	r3, r1
 8004dee:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	041b      	lsls	r3, r3, #16
 8004df6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6899      	ldr	r1, [r3, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68d9      	ldr	r1, [r3, #12]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	4b3e      	ldr	r3, [pc, #248]	; (8004f14 <HAL_LTDC_Init+0x19c>)
 8004e1a:	400b      	ands	r3, r1
 8004e1c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	041b      	lsls	r3, r3, #16
 8004e24:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68d9      	ldr	r1, [r3, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1a      	ldr	r2, [r3, #32]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6919      	ldr	r1, [r3, #16]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4b33      	ldr	r3, [pc, #204]	; (8004f14 <HAL_LTDC_Init+0x19c>)
 8004e48:	400b      	ands	r3, r1
 8004e4a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	041b      	lsls	r3, r3, #16
 8004e52:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6919      	ldr	r1, [r3, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6959      	ldr	r1, [r3, #20]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	4b27      	ldr	r3, [pc, #156]	; (8004f14 <HAL_LTDC_Init+0x19c>)
 8004e76:	400b      	ands	r3, r1
 8004e78:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6959      	ldr	r1, [r3, #20]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e9e:	021b      	lsls	r3, r3, #8
 8004ea0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004ea8:	041b      	lsls	r3, r3, #16
 8004eaa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0206 	orr.w	r2, r2, #6
 8004ee6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	f000f800 	.word	0xf000f800

08004f18 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d023      	beq.n	8004f82 <HAL_LTDC_IRQHandler+0x6a>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01e      	beq.n	8004f82 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0204 	bic.w	r2, r2, #4
 8004f52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2204      	movs	r2, #4
 8004f5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f62:	f043 0201 	orr.w	r2, r3, #1
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2204      	movs	r2, #4
 8004f70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f86f 	bl	8005060 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d023      	beq.n	8004fd4 <HAL_LTDC_IRQHandler+0xbc>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01e      	beq.n	8004fd4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0202 	bic.w	r2, r2, #2
 8004fa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2202      	movs	r2, #2
 8004fac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fb4:	f043 0202 	orr.w	r2, r3, #2
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2204      	movs	r2, #4
 8004fc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f846 	bl	8005060 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01b      	beq.n	8005016 <HAL_LTDC_IRQHandler+0xfe>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d016      	beq.n	8005016 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f82f 	bl	8005074 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01b      	beq.n	8005058 <HAL_LTDC_IRQHandler+0x140>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d016      	beq.n	8005058 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0208 	bic.w	r2, r2, #8
 8005038:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2208      	movs	r2, #8
 8005040:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f818 	bl	8005088 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800509c:	b5b0      	push	{r4, r5, r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_LTDC_ConfigLayer+0x1a>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e02c      	b.n	8005110 <HAL_LTDC_ConfigLayer+0x74>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2202      	movs	r2, #2
 80050c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2134      	movs	r1, #52	; 0x34
 80050cc:	fb01 f303 	mul.w	r3, r1, r3
 80050d0:	4413      	add	r3, r2
 80050d2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	4614      	mov	r4, r2
 80050da:	461d      	mov	r5, r3
 80050dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	68b9      	ldr	r1, [r7, #8]
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 f83b 	bl	800516c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2201      	movs	r2, #1
 80050fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bdb0      	pop	{r4, r5, r7, pc}

08005118 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_LTDC_EnableDither+0x16>
 800512a:	2302      	movs	r3, #2
 800512c:	e016      	b.n	800515c <HAL_LTDC_EnableDither+0x44>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2202      	movs	r2, #2
 800513a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800513e:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <HAL_LTDC_EnableDither+0x50>)
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	4a09      	ldr	r2, [pc, #36]	; (8005168 <HAL_LTDC_EnableDither+0x50>)
 8005144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005148:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	40016800 	.word	0x40016800

0800516c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800516c:	b480      	push	{r7}
 800516e:	b089      	sub	sp, #36	; 0x24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	0c1b      	lsrs	r3, r3, #16
 8005184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005188:	4413      	add	r3, r2
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	01db      	lsls	r3, r3, #7
 8005198:	4413      	add	r3, r2
 800519a:	3384      	adds	r3, #132	; 0x84
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	4611      	mov	r1, r2
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	01d2      	lsls	r2, r2, #7
 80051a8:	440a      	add	r2, r1
 80051aa:	3284      	adds	r2, #132	; 0x84
 80051ac:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80051b0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	0c1b      	lsrs	r3, r3, #16
 80051be:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051c2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80051c4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4619      	mov	r1, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	01db      	lsls	r3, r3, #7
 80051d0:	440b      	add	r3, r1
 80051d2:	3384      	adds	r3, #132	; 0x84
 80051d4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051da:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051ea:	4413      	add	r3, r2
 80051ec:	041b      	lsls	r3, r3, #16
 80051ee:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	461a      	mov	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	01db      	lsls	r3, r3, #7
 80051fa:	4413      	add	r3, r2
 80051fc:	3384      	adds	r3, #132	; 0x84
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	4611      	mov	r1, r2
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	01d2      	lsls	r2, r2, #7
 800520a:	440a      	add	r2, r1
 800520c:	3284      	adds	r2, #132	; 0x84
 800520e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005212:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005222:	4413      	add	r3, r2
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4619      	mov	r1, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	01db      	lsls	r3, r3, #7
 8005230:	440b      	add	r3, r1
 8005232:	3384      	adds	r3, #132	; 0x84
 8005234:	4619      	mov	r1, r3
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4313      	orrs	r3, r2
 800523a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	01db      	lsls	r3, r3, #7
 8005246:	4413      	add	r3, r2
 8005248:	3384      	adds	r3, #132	; 0x84
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	4611      	mov	r1, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	01d2      	lsls	r2, r2, #7
 8005256:	440a      	add	r2, r1
 8005258:	3284      	adds	r2, #132	; 0x84
 800525a:	f023 0307 	bic.w	r3, r3, #7
 800525e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	01db      	lsls	r3, r3, #7
 800526a:	4413      	add	r3, r2
 800526c:	3384      	adds	r3, #132	; 0x84
 800526e:	461a      	mov	r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800527c:	021b      	lsls	r3, r3, #8
 800527e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005286:	041b      	lsls	r3, r3, #16
 8005288:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	061b      	lsls	r3, r3, #24
 8005290:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	461a      	mov	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	01db      	lsls	r3, r3, #7
 800529c:	4413      	add	r3, r2
 800529e:	3384      	adds	r3, #132	; 0x84
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	01db      	lsls	r3, r3, #7
 80052ac:	4413      	add	r3, r2
 80052ae:	3384      	adds	r3, #132	; 0x84
 80052b0:	461a      	mov	r2, r3
 80052b2:	2300      	movs	r3, #0
 80052b4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052bc:	461a      	mov	r2, r3
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	431a      	orrs	r2, r3
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4619      	mov	r1, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	01db      	lsls	r3, r3, #7
 80052d0:	440b      	add	r3, r1
 80052d2:	3384      	adds	r3, #132	; 0x84
 80052d4:	4619      	mov	r1, r3
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	01db      	lsls	r3, r3, #7
 80052e6:	4413      	add	r3, r2
 80052e8:	3384      	adds	r3, #132	; 0x84
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	4611      	mov	r1, r2
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	01d2      	lsls	r2, r2, #7
 80052f6:	440a      	add	r2, r1
 80052f8:	3284      	adds	r2, #132	; 0x84
 80052fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052fe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	461a      	mov	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	01db      	lsls	r3, r3, #7
 800530a:	4413      	add	r3, r2
 800530c:	3384      	adds	r3, #132	; 0x84
 800530e:	461a      	mov	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	01db      	lsls	r3, r3, #7
 8005320:	4413      	add	r3, r2
 8005322:	3384      	adds	r3, #132	; 0x84
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	4611      	mov	r1, r2
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	01d2      	lsls	r2, r2, #7
 8005330:	440a      	add	r2, r1
 8005332:	3284      	adds	r2, #132	; 0x84
 8005334:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005338:	f023 0307 	bic.w	r3, r3, #7
 800533c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	69da      	ldr	r2, [r3, #28]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	68f9      	ldr	r1, [r7, #12]
 8005348:	6809      	ldr	r1, [r1, #0]
 800534a:	4608      	mov	r0, r1
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	01c9      	lsls	r1, r1, #7
 8005350:	4401      	add	r1, r0
 8005352:	3184      	adds	r1, #132	; 0x84
 8005354:	4313      	orrs	r3, r2
 8005356:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	01db      	lsls	r3, r3, #7
 8005362:	4413      	add	r3, r2
 8005364:	3384      	adds	r3, #132	; 0x84
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	01db      	lsls	r3, r3, #7
 8005372:	4413      	add	r3, r2
 8005374:	3384      	adds	r3, #132	; 0x84
 8005376:	461a      	mov	r2, r3
 8005378:	2300      	movs	r3, #0
 800537a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	461a      	mov	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	01db      	lsls	r3, r3, #7
 8005386:	4413      	add	r3, r2
 8005388:	3384      	adds	r3, #132	; 0x84
 800538a:	461a      	mov	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d102      	bne.n	80053a0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800539a:	2304      	movs	r3, #4
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	e01b      	b.n	80053d8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d102      	bne.n	80053ae <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80053a8:	2303      	movs	r3, #3
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	e014      	b.n	80053d8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d00b      	beq.n	80053ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d007      	beq.n	80053ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	d003      	beq.n	80053ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80053ca:	2b07      	cmp	r3, #7
 80053cc:	d102      	bne.n	80053d4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80053ce:	2302      	movs	r3, #2
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	e001      	b.n	80053d8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80053d4:	2301      	movs	r3, #1
 80053d6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	01db      	lsls	r3, r3, #7
 80053e2:	4413      	add	r3, r2
 80053e4:	3384      	adds	r3, #132	; 0x84
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	6812      	ldr	r2, [r2, #0]
 80053ec:	4611      	mov	r1, r2
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	01d2      	lsls	r2, r2, #7
 80053f2:	440a      	add	r2, r1
 80053f4:	3284      	adds	r2, #132	; 0x84
 80053f6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80053fa:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	fb02 f303 	mul.w	r3, r2, r3
 8005406:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	6859      	ldr	r1, [r3, #4]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	1acb      	subs	r3, r1, r3
 8005412:	69f9      	ldr	r1, [r7, #28]
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	6809      	ldr	r1, [r1, #0]
 800541e:	4608      	mov	r0, r1
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	01c9      	lsls	r1, r1, #7
 8005424:	4401      	add	r1, r0
 8005426:	3184      	adds	r1, #132	; 0x84
 8005428:	4313      	orrs	r3, r2
 800542a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	01db      	lsls	r3, r3, #7
 8005436:	4413      	add	r3, r2
 8005438:	3384      	adds	r3, #132	; 0x84
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	4611      	mov	r1, r2
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	01d2      	lsls	r2, r2, #7
 8005446:	440a      	add	r2, r1
 8005448:	3284      	adds	r2, #132	; 0x84
 800544a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800544e:	f023 0307 	bic.w	r3, r3, #7
 8005452:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	01db      	lsls	r3, r3, #7
 800545e:	4413      	add	r3, r2
 8005460:	3384      	adds	r3, #132	; 0x84
 8005462:	461a      	mov	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	01db      	lsls	r3, r3, #7
 8005474:	4413      	add	r3, r2
 8005476:	3384      	adds	r3, #132	; 0x84
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	4611      	mov	r1, r2
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	01d2      	lsls	r2, r2, #7
 8005484:	440a      	add	r2, r1
 8005486:	3284      	adds	r2, #132	; 0x84
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	6013      	str	r3, [r2, #0]
}
 800548e:	bf00      	nop
 8005490:	3724      	adds	r7, #36	; 0x24
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80054a6:	2300      	movs	r3, #0
 80054a8:	603b      	str	r3, [r7, #0]
 80054aa:	4b20      	ldr	r3, [pc, #128]	; (800552c <HAL_PWREx_EnableOverDrive+0x90>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	4a1f      	ldr	r2, [pc, #124]	; (800552c <HAL_PWREx_EnableOverDrive+0x90>)
 80054b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b4:	6413      	str	r3, [r2, #64]	; 0x40
 80054b6:	4b1d      	ldr	r3, [pc, #116]	; (800552c <HAL_PWREx_EnableOverDrive+0x90>)
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80054c2:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <HAL_PWREx_EnableOverDrive+0x94>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054c8:	f7fd fd60 	bl	8002f8c <HAL_GetTick>
 80054cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054ce:	e009      	b.n	80054e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054d0:	f7fd fd5c 	bl	8002f8c <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054de:	d901      	bls.n	80054e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e01f      	b.n	8005524 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054e4:	4b13      	ldr	r3, [pc, #76]	; (8005534 <HAL_PWREx_EnableOverDrive+0x98>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f0:	d1ee      	bne.n	80054d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80054f2:	4b11      	ldr	r3, [pc, #68]	; (8005538 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054f8:	f7fd fd48 	bl	8002f8c <HAL_GetTick>
 80054fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80054fe:	e009      	b.n	8005514 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005500:	f7fd fd44 	bl	8002f8c <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800550e:	d901      	bls.n	8005514 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e007      	b.n	8005524 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005514:	4b07      	ldr	r3, [pc, #28]	; (8005534 <HAL_PWREx_EnableOverDrive+0x98>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005520:	d1ee      	bne.n	8005500 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40023800 	.word	0x40023800
 8005530:	420e0040 	.word	0x420e0040
 8005534:	40007000 	.word	0x40007000
 8005538:	420e0044 	.word	0x420e0044

0800553c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e267      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d075      	beq.n	8005646 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800555a:	4b88      	ldr	r3, [pc, #544]	; (800577c <HAL_RCC_OscConfig+0x240>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 030c 	and.w	r3, r3, #12
 8005562:	2b04      	cmp	r3, #4
 8005564:	d00c      	beq.n	8005580 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005566:	4b85      	ldr	r3, [pc, #532]	; (800577c <HAL_RCC_OscConfig+0x240>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800556e:	2b08      	cmp	r3, #8
 8005570:	d112      	bne.n	8005598 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005572:	4b82      	ldr	r3, [pc, #520]	; (800577c <HAL_RCC_OscConfig+0x240>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800557a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800557e:	d10b      	bne.n	8005598 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005580:	4b7e      	ldr	r3, [pc, #504]	; (800577c <HAL_RCC_OscConfig+0x240>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d05b      	beq.n	8005644 <HAL_RCC_OscConfig+0x108>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d157      	bne.n	8005644 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e242      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a0:	d106      	bne.n	80055b0 <HAL_RCC_OscConfig+0x74>
 80055a2:	4b76      	ldr	r3, [pc, #472]	; (800577c <HAL_RCC_OscConfig+0x240>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a75      	ldr	r2, [pc, #468]	; (800577c <HAL_RCC_OscConfig+0x240>)
 80055a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e01d      	b.n	80055ec <HAL_RCC_OscConfig+0xb0>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055b8:	d10c      	bne.n	80055d4 <HAL_RCC_OscConfig+0x98>
 80055ba:	4b70      	ldr	r3, [pc, #448]	; (800577c <HAL_RCC_OscConfig+0x240>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a6f      	ldr	r2, [pc, #444]	; (800577c <HAL_RCC_OscConfig+0x240>)
 80055c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	4b6d      	ldr	r3, [pc, #436]	; (800577c <HAL_RCC_OscConfig+0x240>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a6c      	ldr	r2, [pc, #432]	; (800577c <HAL_RCC_OscConfig+0x240>)
 80055cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	e00b      	b.n	80055ec <HAL_RCC_OscConfig+0xb0>
 80055d4:	4b69      	ldr	r3, [pc, #420]	; (800577c <HAL_RCC_OscConfig+0x240>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a68      	ldr	r2, [pc, #416]	; (800577c <HAL_RCC_OscConfig+0x240>)
 80055da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	4b66      	ldr	r3, [pc, #408]	; (800577c <HAL_RCC_OscConfig+0x240>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a65      	ldr	r2, [pc, #404]	; (800577c <HAL_RCC_OscConfig+0x240>)
 80055e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d013      	beq.n	800561c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f4:	f7fd fcca 	bl	8002f8c <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055fc:	f7fd fcc6 	bl	8002f8c <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b64      	cmp	r3, #100	; 0x64
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e207      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800560e:	4b5b      	ldr	r3, [pc, #364]	; (800577c <HAL_RCC_OscConfig+0x240>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0f0      	beq.n	80055fc <HAL_RCC_OscConfig+0xc0>
 800561a:	e014      	b.n	8005646 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561c:	f7fd fcb6 	bl	8002f8c <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005624:	f7fd fcb2 	bl	8002f8c <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b64      	cmp	r3, #100	; 0x64
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e1f3      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005636:	4b51      	ldr	r3, [pc, #324]	; (800577c <HAL_RCC_OscConfig+0x240>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <HAL_RCC_OscConfig+0xe8>
 8005642:	e000      	b.n	8005646 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d063      	beq.n	800571a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005652:	4b4a      	ldr	r3, [pc, #296]	; (800577c <HAL_RCC_OscConfig+0x240>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 030c 	and.w	r3, r3, #12
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00b      	beq.n	8005676 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800565e:	4b47      	ldr	r3, [pc, #284]	; (800577c <HAL_RCC_OscConfig+0x240>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005666:	2b08      	cmp	r3, #8
 8005668:	d11c      	bne.n	80056a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800566a:	4b44      	ldr	r3, [pc, #272]	; (800577c <HAL_RCC_OscConfig+0x240>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d116      	bne.n	80056a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005676:	4b41      	ldr	r3, [pc, #260]	; (800577c <HAL_RCC_OscConfig+0x240>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <HAL_RCC_OscConfig+0x152>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d001      	beq.n	800568e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e1c7      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800568e:	4b3b      	ldr	r3, [pc, #236]	; (800577c <HAL_RCC_OscConfig+0x240>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	4937      	ldr	r1, [pc, #220]	; (800577c <HAL_RCC_OscConfig+0x240>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056a2:	e03a      	b.n	800571a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d020      	beq.n	80056ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056ac:	4b34      	ldr	r3, [pc, #208]	; (8005780 <HAL_RCC_OscConfig+0x244>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b2:	f7fd fc6b 	bl	8002f8c <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056ba:	f7fd fc67 	bl	8002f8c <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e1a8      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056cc:	4b2b      	ldr	r3, [pc, #172]	; (800577c <HAL_RCC_OscConfig+0x240>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d8:	4b28      	ldr	r3, [pc, #160]	; (800577c <HAL_RCC_OscConfig+0x240>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	4925      	ldr	r1, [pc, #148]	; (800577c <HAL_RCC_OscConfig+0x240>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	600b      	str	r3, [r1, #0]
 80056ec:	e015      	b.n	800571a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ee:	4b24      	ldr	r3, [pc, #144]	; (8005780 <HAL_RCC_OscConfig+0x244>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f4:	f7fd fc4a 	bl	8002f8c <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056fc:	f7fd fc46 	bl	8002f8c <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e187      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800570e:	4b1b      	ldr	r3, [pc, #108]	; (800577c <HAL_RCC_OscConfig+0x240>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f0      	bne.n	80056fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d036      	beq.n	8005794 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d016      	beq.n	800575c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800572e:	4b15      	ldr	r3, [pc, #84]	; (8005784 <HAL_RCC_OscConfig+0x248>)
 8005730:	2201      	movs	r2, #1
 8005732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005734:	f7fd fc2a 	bl	8002f8c <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800573c:	f7fd fc26 	bl	8002f8c <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e167      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800574e:	4b0b      	ldr	r3, [pc, #44]	; (800577c <HAL_RCC_OscConfig+0x240>)
 8005750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0f0      	beq.n	800573c <HAL_RCC_OscConfig+0x200>
 800575a:	e01b      	b.n	8005794 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800575c:	4b09      	ldr	r3, [pc, #36]	; (8005784 <HAL_RCC_OscConfig+0x248>)
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005762:	f7fd fc13 	bl	8002f8c <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005768:	e00e      	b.n	8005788 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800576a:	f7fd fc0f 	bl	8002f8c <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d907      	bls.n	8005788 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e150      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
 800577c:	40023800 	.word	0x40023800
 8005780:	42470000 	.word	0x42470000
 8005784:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005788:	4b88      	ldr	r3, [pc, #544]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 800578a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1ea      	bne.n	800576a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 8097 	beq.w	80058d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057a2:	2300      	movs	r3, #0
 80057a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057a6:	4b81      	ldr	r3, [pc, #516]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10f      	bne.n	80057d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b2:	2300      	movs	r3, #0
 80057b4:	60bb      	str	r3, [r7, #8]
 80057b6:	4b7d      	ldr	r3, [pc, #500]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	4a7c      	ldr	r2, [pc, #496]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 80057bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c0:	6413      	str	r3, [r2, #64]	; 0x40
 80057c2:	4b7a      	ldr	r3, [pc, #488]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ca:	60bb      	str	r3, [r7, #8]
 80057cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ce:	2301      	movs	r3, #1
 80057d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d2:	4b77      	ldr	r3, [pc, #476]	; (80059b0 <HAL_RCC_OscConfig+0x474>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d118      	bne.n	8005810 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057de:	4b74      	ldr	r3, [pc, #464]	; (80059b0 <HAL_RCC_OscConfig+0x474>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a73      	ldr	r2, [pc, #460]	; (80059b0 <HAL_RCC_OscConfig+0x474>)
 80057e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ea:	f7fd fbcf 	bl	8002f8c <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f2:	f7fd fbcb 	bl	8002f8c <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e10c      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005804:	4b6a      	ldr	r3, [pc, #424]	; (80059b0 <HAL_RCC_OscConfig+0x474>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f0      	beq.n	80057f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d106      	bne.n	8005826 <HAL_RCC_OscConfig+0x2ea>
 8005818:	4b64      	ldr	r3, [pc, #400]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581c:	4a63      	ldr	r2, [pc, #396]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	6713      	str	r3, [r2, #112]	; 0x70
 8005824:	e01c      	b.n	8005860 <HAL_RCC_OscConfig+0x324>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b05      	cmp	r3, #5
 800582c:	d10c      	bne.n	8005848 <HAL_RCC_OscConfig+0x30c>
 800582e:	4b5f      	ldr	r3, [pc, #380]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005832:	4a5e      	ldr	r2, [pc, #376]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 8005834:	f043 0304 	orr.w	r3, r3, #4
 8005838:	6713      	str	r3, [r2, #112]	; 0x70
 800583a:	4b5c      	ldr	r3, [pc, #368]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 800583c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583e:	4a5b      	ldr	r2, [pc, #364]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 8005840:	f043 0301 	orr.w	r3, r3, #1
 8005844:	6713      	str	r3, [r2, #112]	; 0x70
 8005846:	e00b      	b.n	8005860 <HAL_RCC_OscConfig+0x324>
 8005848:	4b58      	ldr	r3, [pc, #352]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 800584a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584c:	4a57      	ldr	r2, [pc, #348]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 800584e:	f023 0301 	bic.w	r3, r3, #1
 8005852:	6713      	str	r3, [r2, #112]	; 0x70
 8005854:	4b55      	ldr	r3, [pc, #340]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 8005856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005858:	4a54      	ldr	r2, [pc, #336]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 800585a:	f023 0304 	bic.w	r3, r3, #4
 800585e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d015      	beq.n	8005894 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005868:	f7fd fb90 	bl	8002f8c <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800586e:	e00a      	b.n	8005886 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005870:	f7fd fb8c 	bl	8002f8c <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	f241 3288 	movw	r2, #5000	; 0x1388
 800587e:	4293      	cmp	r3, r2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e0cb      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005886:	4b49      	ldr	r3, [pc, #292]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0ee      	beq.n	8005870 <HAL_RCC_OscConfig+0x334>
 8005892:	e014      	b.n	80058be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005894:	f7fd fb7a 	bl	8002f8c <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800589a:	e00a      	b.n	80058b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800589c:	f7fd fb76 	bl	8002f8c <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e0b5      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058b2:	4b3e      	ldr	r3, [pc, #248]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 80058b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1ee      	bne.n	800589c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058be:	7dfb      	ldrb	r3, [r7, #23]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d105      	bne.n	80058d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c4:	4b39      	ldr	r3, [pc, #228]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	4a38      	ldr	r2, [pc, #224]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 80058ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 80a1 	beq.w	8005a1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058da:	4b34      	ldr	r3, [pc, #208]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	2b08      	cmp	r3, #8
 80058e4:	d05c      	beq.n	80059a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d141      	bne.n	8005972 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ee:	4b31      	ldr	r3, [pc, #196]	; (80059b4 <HAL_RCC_OscConfig+0x478>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f4:	f7fd fb4a 	bl	8002f8c <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058fc:	f7fd fb46 	bl	8002f8c <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e087      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800590e:	4b27      	ldr	r3, [pc, #156]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1f0      	bne.n	80058fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69da      	ldr	r2, [r3, #28]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	019b      	lsls	r3, r3, #6
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	085b      	lsrs	r3, r3, #1
 8005932:	3b01      	subs	r3, #1
 8005934:	041b      	lsls	r3, r3, #16
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	061b      	lsls	r3, r3, #24
 800593e:	491b      	ldr	r1, [pc, #108]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 8005940:	4313      	orrs	r3, r2
 8005942:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005944:	4b1b      	ldr	r3, [pc, #108]	; (80059b4 <HAL_RCC_OscConfig+0x478>)
 8005946:	2201      	movs	r2, #1
 8005948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594a:	f7fd fb1f 	bl	8002f8c <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005950:	e008      	b.n	8005964 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005952:	f7fd fb1b 	bl	8002f8c <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e05c      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005964:	4b11      	ldr	r3, [pc, #68]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0f0      	beq.n	8005952 <HAL_RCC_OscConfig+0x416>
 8005970:	e054      	b.n	8005a1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005972:	4b10      	ldr	r3, [pc, #64]	; (80059b4 <HAL_RCC_OscConfig+0x478>)
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005978:	f7fd fb08 	bl	8002f8c <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005980:	f7fd fb04 	bl	8002f8c <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e045      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005992:	4b06      	ldr	r3, [pc, #24]	; (80059ac <HAL_RCC_OscConfig+0x470>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1f0      	bne.n	8005980 <HAL_RCC_OscConfig+0x444>
 800599e:	e03d      	b.n	8005a1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d107      	bne.n	80059b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e038      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
 80059ac:	40023800 	.word	0x40023800
 80059b0:	40007000 	.word	0x40007000
 80059b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059b8:	4b1b      	ldr	r3, [pc, #108]	; (8005a28 <HAL_RCC_OscConfig+0x4ec>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d028      	beq.n	8005a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d121      	bne.n	8005a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059de:	429a      	cmp	r2, r3
 80059e0:	d11a      	bne.n	8005a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059e8:	4013      	ands	r3, r2
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d111      	bne.n	8005a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	3b01      	subs	r3, #1
 8005a02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d107      	bne.n	8005a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d001      	beq.n	8005a1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e000      	b.n	8005a1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	40023800 	.word	0x40023800

08005a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e0cc      	b.n	8005bda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a40:	4b68      	ldr	r3, [pc, #416]	; (8005be4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d90c      	bls.n	8005a68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4e:	4b65      	ldr	r3, [pc, #404]	; (8005be4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a56:	4b63      	ldr	r3, [pc, #396]	; (8005be4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d001      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0b8      	b.n	8005bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d020      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a80:	4b59      	ldr	r3, [pc, #356]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	4a58      	ldr	r2, [pc, #352]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a98:	4b53      	ldr	r3, [pc, #332]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	4a52      	ldr	r2, [pc, #328]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005aa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aa4:	4b50      	ldr	r3, [pc, #320]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	494d      	ldr	r1, [pc, #308]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d044      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d107      	bne.n	8005ada <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aca:	4b47      	ldr	r3, [pc, #284]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d119      	bne.n	8005b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e07f      	b.n	8005bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d003      	beq.n	8005aea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d107      	bne.n	8005afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aea:	4b3f      	ldr	r3, [pc, #252]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d109      	bne.n	8005b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e06f      	b.n	8005bda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005afa:	4b3b      	ldr	r3, [pc, #236]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e067      	b.n	8005bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b0a:	4b37      	ldr	r3, [pc, #220]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f023 0203 	bic.w	r2, r3, #3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	4934      	ldr	r1, [pc, #208]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b1c:	f7fd fa36 	bl	8002f8c <HAL_GetTick>
 8005b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b22:	e00a      	b.n	8005b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b24:	f7fd fa32 	bl	8002f8c <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e04f      	b.n	8005bda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3a:	4b2b      	ldr	r3, [pc, #172]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 020c 	and.w	r2, r3, #12
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d1eb      	bne.n	8005b24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b4c:	4b25      	ldr	r3, [pc, #148]	; (8005be4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 030f 	and.w	r3, r3, #15
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d20c      	bcs.n	8005b74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b5a:	4b22      	ldr	r3, [pc, #136]	; (8005be4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b62:	4b20      	ldr	r3, [pc, #128]	; (8005be4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d001      	beq.n	8005b74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e032      	b.n	8005bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d008      	beq.n	8005b92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b80:	4b19      	ldr	r3, [pc, #100]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	4916      	ldr	r1, [pc, #88]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d009      	beq.n	8005bb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b9e:	4b12      	ldr	r3, [pc, #72]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	490e      	ldr	r1, [pc, #56]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bb2:	f000 f821 	bl	8005bf8 <HAL_RCC_GetSysClockFreq>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	091b      	lsrs	r3, r3, #4
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	490a      	ldr	r1, [pc, #40]	; (8005bec <HAL_RCC_ClockConfig+0x1c0>)
 8005bc4:	5ccb      	ldrb	r3, [r1, r3]
 8005bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bca:	4a09      	ldr	r2, [pc, #36]	; (8005bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bce:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fb fd9c 	bl	8001710 <HAL_InitTick>

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	40023c00 	.word	0x40023c00
 8005be8:	40023800 	.word	0x40023800
 8005bec:	08008b84 	.word	0x08008b84
 8005bf0:	20000000 	.word	0x20000000
 8005bf4:	2000004c 	.word	0x2000004c

08005bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bfc:	b094      	sub	sp, #80	; 0x50
 8005bfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	647b      	str	r3, [r7, #68]	; 0x44
 8005c04:	2300      	movs	r3, #0
 8005c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c08:	2300      	movs	r3, #0
 8005c0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c10:	4b79      	ldr	r3, [pc, #484]	; (8005df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 030c 	and.w	r3, r3, #12
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d00d      	beq.n	8005c38 <HAL_RCC_GetSysClockFreq+0x40>
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	f200 80e1 	bhi.w	8005de4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <HAL_RCC_GetSysClockFreq+0x34>
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d003      	beq.n	8005c32 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c2a:	e0db      	b.n	8005de4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c2c:	4b73      	ldr	r3, [pc, #460]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8005c2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005c30:	e0db      	b.n	8005dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c32:	4b73      	ldr	r3, [pc, #460]	; (8005e00 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c36:	e0d8      	b.n	8005dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c38:	4b6f      	ldr	r3, [pc, #444]	; (8005df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c42:	4b6d      	ldr	r3, [pc, #436]	; (8005df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d063      	beq.n	8005d16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c4e:	4b6a      	ldr	r3, [pc, #424]	; (8005df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	099b      	lsrs	r3, r3, #6
 8005c54:	2200      	movs	r2, #0
 8005c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c60:	633b      	str	r3, [r7, #48]	; 0x30
 8005c62:	2300      	movs	r3, #0
 8005c64:	637b      	str	r3, [r7, #52]	; 0x34
 8005c66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	462b      	mov	r3, r5
 8005c6e:	f04f 0000 	mov.w	r0, #0
 8005c72:	f04f 0100 	mov.w	r1, #0
 8005c76:	0159      	lsls	r1, r3, #5
 8005c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c7c:	0150      	lsls	r0, r2, #5
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4621      	mov	r1, r4
 8005c84:	1a51      	subs	r1, r2, r1
 8005c86:	6139      	str	r1, [r7, #16]
 8005c88:	4629      	mov	r1, r5
 8005c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c9c:	4659      	mov	r1, fp
 8005c9e:	018b      	lsls	r3, r1, #6
 8005ca0:	4651      	mov	r1, sl
 8005ca2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ca6:	4651      	mov	r1, sl
 8005ca8:	018a      	lsls	r2, r1, #6
 8005caa:	4651      	mov	r1, sl
 8005cac:	ebb2 0801 	subs.w	r8, r2, r1
 8005cb0:	4659      	mov	r1, fp
 8005cb2:	eb63 0901 	sbc.w	r9, r3, r1
 8005cb6:	f04f 0200 	mov.w	r2, #0
 8005cba:	f04f 0300 	mov.w	r3, #0
 8005cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cca:	4690      	mov	r8, r2
 8005ccc:	4699      	mov	r9, r3
 8005cce:	4623      	mov	r3, r4
 8005cd0:	eb18 0303 	adds.w	r3, r8, r3
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	462b      	mov	r3, r5
 8005cd8:	eb49 0303 	adc.w	r3, r9, r3
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	f04f 0200 	mov.w	r2, #0
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005cea:	4629      	mov	r1, r5
 8005cec:	024b      	lsls	r3, r1, #9
 8005cee:	4621      	mov	r1, r4
 8005cf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	024a      	lsls	r2, r1, #9
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cfe:	2200      	movs	r2, #0
 8005d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d08:	f7fa fac2 	bl	8000290 <__aeabi_uldivmod>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4613      	mov	r3, r2
 8005d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d14:	e058      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d16:	4b38      	ldr	r3, [pc, #224]	; (8005df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	099b      	lsrs	r3, r3, #6
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	4611      	mov	r1, r2
 8005d22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d26:	623b      	str	r3, [r7, #32]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d30:	4642      	mov	r2, r8
 8005d32:	464b      	mov	r3, r9
 8005d34:	f04f 0000 	mov.w	r0, #0
 8005d38:	f04f 0100 	mov.w	r1, #0
 8005d3c:	0159      	lsls	r1, r3, #5
 8005d3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d42:	0150      	lsls	r0, r2, #5
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4641      	mov	r1, r8
 8005d4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d4e:	4649      	mov	r1, r9
 8005d50:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d68:	ebb2 040a 	subs.w	r4, r2, sl
 8005d6c:	eb63 050b 	sbc.w	r5, r3, fp
 8005d70:	f04f 0200 	mov.w	r2, #0
 8005d74:	f04f 0300 	mov.w	r3, #0
 8005d78:	00eb      	lsls	r3, r5, #3
 8005d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d7e:	00e2      	lsls	r2, r4, #3
 8005d80:	4614      	mov	r4, r2
 8005d82:	461d      	mov	r5, r3
 8005d84:	4643      	mov	r3, r8
 8005d86:	18e3      	adds	r3, r4, r3
 8005d88:	603b      	str	r3, [r7, #0]
 8005d8a:	464b      	mov	r3, r9
 8005d8c:	eb45 0303 	adc.w	r3, r5, r3
 8005d90:	607b      	str	r3, [r7, #4]
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	f04f 0300 	mov.w	r3, #0
 8005d9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d9e:	4629      	mov	r1, r5
 8005da0:	028b      	lsls	r3, r1, #10
 8005da2:	4621      	mov	r1, r4
 8005da4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005da8:	4621      	mov	r1, r4
 8005daa:	028a      	lsls	r2, r1, #10
 8005dac:	4610      	mov	r0, r2
 8005dae:	4619      	mov	r1, r3
 8005db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db2:	2200      	movs	r2, #0
 8005db4:	61bb      	str	r3, [r7, #24]
 8005db6:	61fa      	str	r2, [r7, #28]
 8005db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dbc:	f7fa fa68 	bl	8000290 <__aeabi_uldivmod>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dc8:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	0c1b      	lsrs	r3, r3, #16
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005dd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005de2:	e002      	b.n	8005dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005de4:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8005de6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3750      	adds	r7, #80	; 0x50
 8005df0:	46bd      	mov	sp, r7
 8005df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005df6:	bf00      	nop
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	00f42400 	.word	0x00f42400
 8005e00:	007a1200 	.word	0x007a1200

08005e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e04:	b480      	push	{r7}
 8005e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e08:	4b03      	ldr	r3, [pc, #12]	; (8005e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	20000000 	.word	0x20000000

08005e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e20:	f7ff fff0 	bl	8005e04 <HAL_RCC_GetHCLKFreq>
 8005e24:	4602      	mov	r2, r0
 8005e26:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	0a9b      	lsrs	r3, r3, #10
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	4903      	ldr	r1, [pc, #12]	; (8005e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e32:	5ccb      	ldrb	r3, [r1, r3]
 8005e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	40023800 	.word	0x40023800
 8005e40:	08008b94 	.word	0x08008b94

08005e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e48:	f7ff ffdc 	bl	8005e04 <HAL_RCC_GetHCLKFreq>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	0b5b      	lsrs	r3, r3, #13
 8005e54:	f003 0307 	and.w	r3, r3, #7
 8005e58:	4903      	ldr	r1, [pc, #12]	; (8005e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e5a:	5ccb      	ldrb	r3, [r1, r3]
 8005e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	40023800 	.word	0x40023800
 8005e68:	08008b94 	.word	0x08008b94

08005e6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	220f      	movs	r2, #15
 8005e7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e7c:	4b12      	ldr	r3, [pc, #72]	; (8005ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 0203 	and.w	r2, r3, #3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e88:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e94:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ea0:	4b09      	ldr	r3, [pc, #36]	; (8005ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	08db      	lsrs	r3, r3, #3
 8005ea6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005eae:	4b07      	ldr	r3, [pc, #28]	; (8005ecc <HAL_RCC_GetClockConfig+0x60>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 020f 	and.w	r2, r3, #15
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	601a      	str	r2, [r3, #0]
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	40023c00 	.word	0x40023c00

08005ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10b      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d105      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d075      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f04:	4b91      	ldr	r3, [pc, #580]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f0a:	f7fd f83f 	bl	8002f8c <HAL_GetTick>
 8005f0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f10:	e008      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f12:	f7fd f83b 	bl	8002f8c <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e189      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f24:	4b8a      	ldr	r3, [pc, #552]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1f0      	bne.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d009      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	019a      	lsls	r2, r3, #6
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	071b      	lsls	r3, r3, #28
 8005f48:	4981      	ldr	r1, [pc, #516]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01f      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f5c:	4b7c      	ldr	r3, [pc, #496]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f62:	0f1b      	lsrs	r3, r3, #28
 8005f64:	f003 0307 	and.w	r3, r3, #7
 8005f68:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	019a      	lsls	r2, r3, #6
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	061b      	lsls	r3, r3, #24
 8005f76:	431a      	orrs	r2, r3
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	071b      	lsls	r3, r3, #28
 8005f7c:	4974      	ldr	r1, [pc, #464]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f84:	4b72      	ldr	r3, [pc, #456]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f8a:	f023 021f 	bic.w	r2, r3, #31
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	496e      	ldr	r1, [pc, #440]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00d      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	019a      	lsls	r2, r3, #6
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	061b      	lsls	r3, r3, #24
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	071b      	lsls	r3, r3, #28
 8005fbc:	4964      	ldr	r1, [pc, #400]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005fc4:	4b61      	ldr	r3, [pc, #388]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fca:	f7fc ffdf 	bl	8002f8c <HAL_GetTick>
 8005fce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fd0:	e008      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005fd2:	f7fc ffdb 	bl	8002f8c <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e129      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fe4:	4b5a      	ldr	r3, [pc, #360]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0f0      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d105      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006004:	2b00      	cmp	r3, #0
 8006006:	d079      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006008:	4b52      	ldr	r3, [pc, #328]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800600e:	f7fc ffbd 	bl	8002f8c <HAL_GetTick>
 8006012:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006014:	e008      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006016:	f7fc ffb9 	bl	8002f8c <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e107      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006028:	4b49      	ldr	r3, [pc, #292]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006034:	d0ef      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0304 	and.w	r3, r3, #4
 800603e:	2b00      	cmp	r3, #0
 8006040:	d020      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006042:	4b43      	ldr	r3, [pc, #268]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006048:	0f1b      	lsrs	r3, r3, #28
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	019a      	lsls	r2, r3, #6
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	061b      	lsls	r3, r3, #24
 800605c:	431a      	orrs	r2, r3
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	071b      	lsls	r3, r3, #28
 8006062:	493b      	ldr	r1, [pc, #236]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800606a:	4b39      	ldr	r3, [pc, #228]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800606c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006070:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	3b01      	subs	r3, #1
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	4934      	ldr	r1, [pc, #208]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800607e:	4313      	orrs	r3, r2
 8006080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0308 	and.w	r3, r3, #8
 800608c:	2b00      	cmp	r3, #0
 800608e:	d01e      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006090:	4b2f      	ldr	r3, [pc, #188]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006096:	0e1b      	lsrs	r3, r3, #24
 8006098:	f003 030f 	and.w	r3, r3, #15
 800609c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	019a      	lsls	r2, r3, #6
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	061b      	lsls	r3, r3, #24
 80060a8:	431a      	orrs	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	071b      	lsls	r3, r3, #28
 80060b0:	4927      	ldr	r1, [pc, #156]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80060b8:	4b25      	ldr	r3, [pc, #148]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	4922      	ldr	r1, [pc, #136]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80060ce:	4b21      	ldr	r3, [pc, #132]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80060d0:	2201      	movs	r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060d4:	f7fc ff5a 	bl	8002f8c <HAL_GetTick>
 80060d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80060dc:	f7fc ff56 	bl	8002f8c <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e0a4      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80060ee:	4b18      	ldr	r3, [pc, #96]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060fa:	d1ef      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 808b 	beq.w	8006220 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	4b10      	ldr	r3, [pc, #64]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	4a0f      	ldr	r2, [pc, #60]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006118:	6413      	str	r3, [r2, #64]	; 0x40
 800611a:	4b0d      	ldr	r3, [pc, #52]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006126:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a0b      	ldr	r2, [pc, #44]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800612c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006130:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006132:	f7fc ff2b 	bl	8002f8c <HAL_GetTick>
 8006136:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006138:	e010      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800613a:	f7fc ff27 	bl	8002f8c <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d909      	bls.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e075      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800614c:	42470068 	.word	0x42470068
 8006150:	40023800 	.word	0x40023800
 8006154:	42470070 	.word	0x42470070
 8006158:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800615c:	4b38      	ldr	r3, [pc, #224]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0e8      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006168:	4b36      	ldr	r3, [pc, #216]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800616a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006170:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d02f      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	429a      	cmp	r2, r3
 8006184:	d028      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006186:	4b2f      	ldr	r3, [pc, #188]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006190:	4b2d      	ldr	r3, [pc, #180]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006192:	2201      	movs	r2, #1
 8006194:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006196:	4b2c      	ldr	r3, [pc, #176]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800619c:	4a29      	ldr	r2, [pc, #164]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061a2:	4b28      	ldr	r3, [pc, #160]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d114      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80061ae:	f7fc feed 	bl	8002f8c <HAL_GetTick>
 80061b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061b4:	e00a      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061b6:	f7fc fee9 	bl	8002f8c <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d901      	bls.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e035      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061cc:	4b1d      	ldr	r3, [pc, #116]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0ee      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061e4:	d10d      	bne.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80061e6:	4b17      	ldr	r3, [pc, #92]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80061f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fa:	4912      	ldr	r1, [pc, #72]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	608b      	str	r3, [r1, #8]
 8006200:	e005      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006202:	4b10      	ldr	r3, [pc, #64]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	4a0f      	ldr	r2, [pc, #60]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006208:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800620c:	6093      	str	r3, [r2, #8]
 800620e:	4b0d      	ldr	r3, [pc, #52]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006210:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800621a:	490a      	ldr	r1, [pc, #40]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800621c:	4313      	orrs	r3, r2
 800621e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0310 	and.w	r3, r3, #16
 8006228:	2b00      	cmp	r3, #0
 800622a:	d004      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006232:	4b06      	ldr	r3, [pc, #24]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006234:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40007000 	.word	0x40007000
 8006244:	40023800 	.word	0x40023800
 8006248:	42470e40 	.word	0x42470e40
 800624c:	424711e0 	.word	0x424711e0

08006250 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e025      	b.n	80062b0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d106      	bne.n	800627e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7fb fa3f 	bl	80016fc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2202      	movs	r2, #2
 8006282:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3304      	adds	r3, #4
 800628e:	4619      	mov	r1, r3
 8006290:	4610      	mov	r0, r2
 8006292:	f001 fe91 	bl	8007fb8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	461a      	mov	r2, r3
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	f001 fee6 	bl	8008072 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80062ca:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d101      	bne.n	80062d6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80062d2:	2302      	movs	r3, #2
 80062d4:	e021      	b.n	800631a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d002      	beq.n	80062e2 <HAL_SDRAM_SendCommand+0x2a>
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
 80062de:	2b05      	cmp	r3, #5
 80062e0:	d118      	bne.n	8006314 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2202      	movs	r2, #2
 80062e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f001 ff26 	bl	8008144 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d104      	bne.n	800630a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2205      	movs	r2, #5
 8006304:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006308:	e006      	b.n	8006318 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006312:	e001      	b.n	8006318 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e000      	b.n	800631a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b082      	sub	sp, #8
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d101      	bne.n	800633c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006338:	2302      	movs	r3, #2
 800633a:	e016      	b.n	800636a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b01      	cmp	r3, #1
 8006346:	d10f      	bne.n	8006368 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	f001 ff31 	bl	80081be <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	e000      	b.n	800636a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b082      	sub	sp, #8
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e07b      	b.n	800647c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	2b00      	cmp	r3, #0
 800638a:	d108      	bne.n	800639e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006394:	d009      	beq.n	80063aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	61da      	str	r2, [r3, #28]
 800639c:	e005      	b.n	80063aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d106      	bne.n	80063ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7fb f81d 	bl	8001404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2202      	movs	r2, #2
 80063ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80063f2:	431a      	orrs	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063fc:	431a      	orrs	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006424:	431a      	orrs	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800642e:	ea42 0103 	orr.w	r1, r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	0c1b      	lsrs	r3, r3, #16
 8006448:	f003 0104 	and.w	r1, r3, #4
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	f003 0210 	and.w	r2, r3, #16
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69da      	ldr	r2, [r3, #28]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800646a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e01a      	b.n	80064cc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2202      	movs	r2, #2
 800649a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fa fff0 	bl	8001494 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	4613      	mov	r3, r2
 80064e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d101      	bne.n	80064f6 <HAL_SPI_Transmit+0x22>
 80064f2:	2302      	movs	r3, #2
 80064f4:	e126      	b.n	8006744 <HAL_SPI_Transmit+0x270>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064fe:	f7fc fd45 	bl	8002f8c <HAL_GetTick>
 8006502:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006504:	88fb      	ldrh	r3, [r7, #6]
 8006506:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	d002      	beq.n	800651a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006514:	2302      	movs	r3, #2
 8006516:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006518:	e10b      	b.n	8006732 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_SPI_Transmit+0x52>
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d102      	bne.n	800652c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	77fb      	strb	r3, [r7, #31]
    goto error;
 800652a:	e102      	b.n	8006732 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2203      	movs	r2, #3
 8006530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	88fa      	ldrh	r2, [r7, #6]
 8006544:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	88fa      	ldrh	r2, [r7, #6]
 800654a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006572:	d10f      	bne.n	8006594 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006582:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006592:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	d007      	beq.n	80065b2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ba:	d14b      	bne.n	8006654 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <HAL_SPI_Transmit+0xf6>
 80065c4:	8afb      	ldrh	r3, [r7, #22]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d13e      	bne.n	8006648 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ce:	881a      	ldrh	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065da:	1c9a      	adds	r2, r3, #2
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065ee:	e02b      	b.n	8006648 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d112      	bne.n	8006624 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006602:	881a      	ldrh	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660e:	1c9a      	adds	r2, r3, #2
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006618:	b29b      	uxth	r3, r3
 800661a:	3b01      	subs	r3, #1
 800661c:	b29a      	uxth	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	86da      	strh	r2, [r3, #54]	; 0x36
 8006622:	e011      	b.n	8006648 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006624:	f7fc fcb2 	bl	8002f8c <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d803      	bhi.n	800663c <HAL_SPI_Transmit+0x168>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663a:	d102      	bne.n	8006642 <HAL_SPI_Transmit+0x16e>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d102      	bne.n	8006648 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006646:	e074      	b.n	8006732 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1ce      	bne.n	80065f0 <HAL_SPI_Transmit+0x11c>
 8006652:	e04c      	b.n	80066ee <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <HAL_SPI_Transmit+0x18e>
 800665c:	8afb      	ldrh	r3, [r7, #22]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d140      	bne.n	80066e4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	330c      	adds	r3, #12
 800666c:	7812      	ldrb	r2, [r2, #0]
 800666e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800667e:	b29b      	uxth	r3, r3
 8006680:	3b01      	subs	r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006688:	e02c      	b.n	80066e4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b02      	cmp	r3, #2
 8006696:	d113      	bne.n	80066c0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	330c      	adds	r3, #12
 80066a2:	7812      	ldrb	r2, [r2, #0]
 80066a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	3b01      	subs	r3, #1
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80066be:	e011      	b.n	80066e4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066c0:	f7fc fc64 	bl	8002f8c <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d803      	bhi.n	80066d8 <HAL_SPI_Transmit+0x204>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d6:	d102      	bne.n	80066de <HAL_SPI_Transmit+0x20a>
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d102      	bne.n	80066e4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066e2:	e026      	b.n	8006732 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1cd      	bne.n	800668a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 fbda 	bl	8006eac <SPI_EndRxTxTransaction>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10a      	bne.n	8006722 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800670c:	2300      	movs	r3, #0
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	613b      	str	r3, [r7, #16]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	77fb      	strb	r3, [r7, #31]
 800672e:	e000      	b.n	8006732 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006730:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006742:	7ffb      	ldrb	r3, [r7, #31]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3720      	adds	r7, #32
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af02      	add	r7, sp, #8
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	603b      	str	r3, [r7, #0]
 8006758:	4613      	mov	r3, r2
 800675a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006768:	d112      	bne.n	8006790 <HAL_SPI_Receive+0x44>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10e      	bne.n	8006790 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2204      	movs	r2, #4
 8006776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800677a:	88fa      	ldrh	r2, [r7, #6]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	4613      	mov	r3, r2
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 f8f1 	bl	800696e <HAL_SPI_TransmitReceive>
 800678c:	4603      	mov	r3, r0
 800678e:	e0ea      	b.n	8006966 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006796:	2b01      	cmp	r3, #1
 8006798:	d101      	bne.n	800679e <HAL_SPI_Receive+0x52>
 800679a:	2302      	movs	r3, #2
 800679c:	e0e3      	b.n	8006966 <HAL_SPI_Receive+0x21a>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067a6:	f7fc fbf1 	bl	8002f8c <HAL_GetTick>
 80067aa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d002      	beq.n	80067be <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80067b8:	2302      	movs	r3, #2
 80067ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067bc:	e0ca      	b.n	8006954 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <HAL_SPI_Receive+0x7e>
 80067c4:	88fb      	ldrh	r3, [r7, #6]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d102      	bne.n	80067d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067ce:	e0c1      	b.n	8006954 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2204      	movs	r2, #4
 80067d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	88fa      	ldrh	r2, [r7, #6]
 80067e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	88fa      	ldrh	r2, [r7, #6]
 80067ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006816:	d10f      	bne.n	8006838 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006826:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006836:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	d007      	beq.n	8006856 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006854:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d162      	bne.n	8006924 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800685e:	e02e      	b.n	80068be <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b01      	cmp	r3, #1
 800686c:	d115      	bne.n	800689a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f103 020c 	add.w	r2, r3, #12
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	7812      	ldrb	r2, [r2, #0]
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800688e:	b29b      	uxth	r3, r3
 8006890:	3b01      	subs	r3, #1
 8006892:	b29a      	uxth	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006898:	e011      	b.n	80068be <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800689a:	f7fc fb77 	bl	8002f8c <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d803      	bhi.n	80068b2 <HAL_SPI_Receive+0x166>
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b0:	d102      	bne.n	80068b8 <HAL_SPI_Receive+0x16c>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d102      	bne.n	80068be <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80068bc:	e04a      	b.n	8006954 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1cb      	bne.n	8006860 <HAL_SPI_Receive+0x114>
 80068c8:	e031      	b.n	800692e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d113      	bne.n	8006900 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e2:	b292      	uxth	r2, r2
 80068e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	1c9a      	adds	r2, r3, #2
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068fe:	e011      	b.n	8006924 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006900:	f7fc fb44 	bl	8002f8c <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	429a      	cmp	r2, r3
 800690e:	d803      	bhi.n	8006918 <HAL_SPI_Receive+0x1cc>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006916:	d102      	bne.n	800691e <HAL_SPI_Receive+0x1d2>
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d102      	bne.n	8006924 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006922:	e017      	b.n	8006954 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006928:	b29b      	uxth	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1cd      	bne.n	80068ca <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 fa54 	bl	8006de0 <SPI_EndRxTransaction>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	75fb      	strb	r3, [r7, #23]
 8006950:	e000      	b.n	8006954 <HAL_SPI_Receive+0x208>
  }

error :
 8006952:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006964:	7dfb      	ldrb	r3, [r7, #23]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b08c      	sub	sp, #48	; 0x30
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
 800697a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800697c:	2301      	movs	r3, #1
 800697e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_SPI_TransmitReceive+0x26>
 8006990:	2302      	movs	r3, #2
 8006992:	e18a      	b.n	8006caa <HAL_SPI_TransmitReceive+0x33c>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800699c:	f7fc faf6 	bl	8002f8c <HAL_GetTick>
 80069a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80069b2:	887b      	ldrh	r3, [r7, #2]
 80069b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80069b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d00f      	beq.n	80069de <HAL_SPI_TransmitReceive+0x70>
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c4:	d107      	bne.n	80069d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d103      	bne.n	80069d6 <HAL_SPI_TransmitReceive+0x68>
 80069ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d003      	beq.n	80069de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80069d6:	2302      	movs	r3, #2
 80069d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80069dc:	e15b      	b.n	8006c96 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <HAL_SPI_TransmitReceive+0x82>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <HAL_SPI_TransmitReceive+0x82>
 80069ea:	887b      	ldrh	r3, [r7, #2]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d103      	bne.n	80069f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80069f6:	e14e      	b.n	8006c96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d003      	beq.n	8006a0c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2205      	movs	r2, #5
 8006a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	887a      	ldrh	r2, [r7, #2]
 8006a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	887a      	ldrh	r2, [r7, #2]
 8006a22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	887a      	ldrh	r2, [r7, #2]
 8006a2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	887a      	ldrh	r2, [r7, #2]
 8006a34:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b40      	cmp	r3, #64	; 0x40
 8006a4e:	d007      	beq.n	8006a60 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a68:	d178      	bne.n	8006b5c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <HAL_SPI_TransmitReceive+0x10a>
 8006a72:	8b7b      	ldrh	r3, [r7, #26]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d166      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	881a      	ldrh	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	1c9a      	adds	r2, r3, #2
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a9c:	e053      	b.n	8006b46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d11b      	bne.n	8006ae4 <HAL_SPI_TransmitReceive+0x176>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d016      	beq.n	8006ae4 <HAL_SPI_TransmitReceive+0x176>
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d113      	bne.n	8006ae4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac0:	881a      	ldrh	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006acc:	1c9a      	adds	r2, r3, #2
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d119      	bne.n	8006b26 <HAL_SPI_TransmitReceive+0x1b8>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d014      	beq.n	8006b26 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	b292      	uxth	r2, r2
 8006b08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0e:	1c9a      	adds	r2, r3, #2
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b22:	2301      	movs	r3, #1
 8006b24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b26:	f7fc fa31 	bl	8002f8c <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d807      	bhi.n	8006b46 <HAL_SPI_TransmitReceive+0x1d8>
 8006b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3c:	d003      	beq.n	8006b46 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b44:	e0a7      	b.n	8006c96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1a6      	bne.n	8006a9e <HAL_SPI_TransmitReceive+0x130>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1a1      	bne.n	8006a9e <HAL_SPI_TransmitReceive+0x130>
 8006b5a:	e07c      	b.n	8006c56 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <HAL_SPI_TransmitReceive+0x1fc>
 8006b64:	8b7b      	ldrh	r3, [r7, #26]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d16b      	bne.n	8006c42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	330c      	adds	r3, #12
 8006b74:	7812      	ldrb	r2, [r2, #0]
 8006b76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b90:	e057      	b.n	8006c42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d11c      	bne.n	8006bda <HAL_SPI_TransmitReceive+0x26c>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d017      	beq.n	8006bda <HAL_SPI_TransmitReceive+0x26c>
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d114      	bne.n	8006bda <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	330c      	adds	r3, #12
 8006bba:	7812      	ldrb	r2, [r2, #0]
 8006bbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d119      	bne.n	8006c1c <HAL_SPI_TransmitReceive+0x2ae>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d014      	beq.n	8006c1c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	b2d2      	uxtb	r2, r2
 8006bfe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	1c5a      	adds	r2, r3, #1
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c1c:	f7fc f9b6 	bl	8002f8c <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d803      	bhi.n	8006c34 <HAL_SPI_TransmitReceive+0x2c6>
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c32:	d102      	bne.n	8006c3a <HAL_SPI_TransmitReceive+0x2cc>
 8006c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d103      	bne.n	8006c42 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006c40:	e029      	b.n	8006c96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1a2      	bne.n	8006b92 <HAL_SPI_TransmitReceive+0x224>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d19d      	bne.n	8006b92 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f000 f926 	bl	8006eac <SPI_EndRxTxTransaction>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d006      	beq.n	8006c74 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006c72:	e010      	b.n	8006c96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10b      	bne.n	8006c94 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	617b      	str	r3, [r7, #20]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	617b      	str	r3, [r7, #20]
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	e000      	b.n	8006c96 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006c94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ca6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3730      	adds	r7, #48	; 0x30
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cc0:	b2db      	uxtb	r3, r3
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
	...

08006cd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ce0:	f7fc f954 	bl	8002f8c <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	1a9b      	subs	r3, r3, r2
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	4413      	add	r3, r2
 8006cee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006cf0:	f7fc f94c 	bl	8002f8c <HAL_GetTick>
 8006cf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006cf6:	4b39      	ldr	r3, [pc, #228]	; (8006ddc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	015b      	lsls	r3, r3, #5
 8006cfc:	0d1b      	lsrs	r3, r3, #20
 8006cfe:	69fa      	ldr	r2, [r7, #28]
 8006d00:	fb02 f303 	mul.w	r3, r2, r3
 8006d04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d06:	e054      	b.n	8006db2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0e:	d050      	beq.n	8006db2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d10:	f7fc f93c 	bl	8002f8c <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	69fa      	ldr	r2, [r7, #28]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d902      	bls.n	8006d26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d13d      	bne.n	8006da2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d3e:	d111      	bne.n	8006d64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d48:	d004      	beq.n	8006d54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d52:	d107      	bne.n	8006d64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d6c:	d10f      	bne.n	8006d8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e017      	b.n	8006dd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	bf0c      	ite	eq
 8006dc2:	2301      	moveq	r3, #1
 8006dc4:	2300      	movne	r3, #0
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d19b      	bne.n	8006d08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3720      	adds	r7, #32
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000000 	.word	0x20000000

08006de0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af02      	add	r7, sp, #8
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006df4:	d111      	bne.n	8006e1a <SPI_EndRxTransaction+0x3a>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dfe:	d004      	beq.n	8006e0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e08:	d107      	bne.n	8006e1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e18:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e22:	d12a      	bne.n	8006e7a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e2c:	d012      	beq.n	8006e54 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2200      	movs	r2, #0
 8006e36:	2180      	movs	r1, #128	; 0x80
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f7ff ff49 	bl	8006cd0 <SPI_WaitFlagStateUntilTimeout>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d02d      	beq.n	8006ea0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e48:	f043 0220 	orr.w	r2, r3, #32
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e026      	b.n	8006ea2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff ff36 	bl	8006cd0 <SPI_WaitFlagStateUntilTimeout>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d01a      	beq.n	8006ea0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6e:	f043 0220 	orr.w	r2, r3, #32
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e013      	b.n	8006ea2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2200      	movs	r2, #0
 8006e82:	2101      	movs	r1, #1
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f7ff ff23 	bl	8006cd0 <SPI_WaitFlagStateUntilTimeout>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d007      	beq.n	8006ea0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e94:	f043 0220 	orr.w	r2, r3, #32
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e000      	b.n	8006ea2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006eb8:	4b1b      	ldr	r3, [pc, #108]	; (8006f28 <SPI_EndRxTxTransaction+0x7c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a1b      	ldr	r2, [pc, #108]	; (8006f2c <SPI_EndRxTxTransaction+0x80>)
 8006ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec2:	0d5b      	lsrs	r3, r3, #21
 8006ec4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ec8:	fb02 f303 	mul.w	r3, r2, r3
 8006ecc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ed6:	d112      	bne.n	8006efe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2180      	movs	r1, #128	; 0x80
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f7ff fef4 	bl	8006cd0 <SPI_WaitFlagStateUntilTimeout>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d016      	beq.n	8006f1c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef2:	f043 0220 	orr.w	r2, r3, #32
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e00f      	b.n	8006f1e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00a      	beq.n	8006f1a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f14:	2b80      	cmp	r3, #128	; 0x80
 8006f16:	d0f2      	beq.n	8006efe <SPI_EndRxTxTransaction+0x52>
 8006f18:	e000      	b.n	8006f1c <SPI_EndRxTxTransaction+0x70>
        break;
 8006f1a:	bf00      	nop
  }

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000000 	.word	0x20000000
 8006f2c:	165e9f81 	.word	0x165e9f81

08006f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e041      	b.n	8006fc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d106      	bne.n	8006f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fa faba 	bl	80014d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	f000 fa96 	bl	80074a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d001      	beq.n	8006fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e04e      	b.n	8007086 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0201 	orr.w	r2, r2, #1
 8006ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a23      	ldr	r2, [pc, #140]	; (8007094 <HAL_TIM_Base_Start_IT+0xc4>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d022      	beq.n	8007050 <HAL_TIM_Base_Start_IT+0x80>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007012:	d01d      	beq.n	8007050 <HAL_TIM_Base_Start_IT+0x80>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a1f      	ldr	r2, [pc, #124]	; (8007098 <HAL_TIM_Base_Start_IT+0xc8>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d018      	beq.n	8007050 <HAL_TIM_Base_Start_IT+0x80>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a1e      	ldr	r2, [pc, #120]	; (800709c <HAL_TIM_Base_Start_IT+0xcc>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d013      	beq.n	8007050 <HAL_TIM_Base_Start_IT+0x80>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a1c      	ldr	r2, [pc, #112]	; (80070a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00e      	beq.n	8007050 <HAL_TIM_Base_Start_IT+0x80>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a1b      	ldr	r2, [pc, #108]	; (80070a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d009      	beq.n	8007050 <HAL_TIM_Base_Start_IT+0x80>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a19      	ldr	r2, [pc, #100]	; (80070a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d004      	beq.n	8007050 <HAL_TIM_Base_Start_IT+0x80>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a18      	ldr	r2, [pc, #96]	; (80070ac <HAL_TIM_Base_Start_IT+0xdc>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d111      	bne.n	8007074 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2b06      	cmp	r3, #6
 8007060:	d010      	beq.n	8007084 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f042 0201 	orr.w	r2, r2, #1
 8007070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007072:	e007      	b.n	8007084 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0201 	orr.w	r2, r2, #1
 8007082:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	40010000 	.word	0x40010000
 8007098:	40000400 	.word	0x40000400
 800709c:	40000800 	.word	0x40000800
 80070a0:	40000c00 	.word	0x40000c00
 80070a4:	40010400 	.word	0x40010400
 80070a8:	40014000 	.word	0x40014000
 80070ac:	40001800 	.word	0x40001800

080070b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d122      	bne.n	800710c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d11b      	bne.n	800710c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f06f 0202 	mvn.w	r2, #2
 80070dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f9b5 	bl	8007462 <HAL_TIM_IC_CaptureCallback>
 80070f8:	e005      	b.n	8007106 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f9a7 	bl	800744e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f9b8 	bl	8007476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b04      	cmp	r3, #4
 8007118:	d122      	bne.n	8007160 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b04      	cmp	r3, #4
 8007126:	d11b      	bne.n	8007160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f06f 0204 	mvn.w	r2, #4
 8007130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2202      	movs	r2, #2
 8007136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f98b 	bl	8007462 <HAL_TIM_IC_CaptureCallback>
 800714c:	e005      	b.n	800715a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f97d 	bl	800744e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f98e 	bl	8007476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f003 0308 	and.w	r3, r3, #8
 800716a:	2b08      	cmp	r3, #8
 800716c:	d122      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f003 0308 	and.w	r3, r3, #8
 8007178:	2b08      	cmp	r3, #8
 800717a:	d11b      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f06f 0208 	mvn.w	r2, #8
 8007184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2204      	movs	r2, #4
 800718a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	f003 0303 	and.w	r3, r3, #3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f961 	bl	8007462 <HAL_TIM_IC_CaptureCallback>
 80071a0:	e005      	b.n	80071ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f953 	bl	800744e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f964 	bl	8007476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	f003 0310 	and.w	r3, r3, #16
 80071be:	2b10      	cmp	r3, #16
 80071c0:	d122      	bne.n	8007208 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f003 0310 	and.w	r3, r3, #16
 80071cc:	2b10      	cmp	r3, #16
 80071ce:	d11b      	bne.n	8007208 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f06f 0210 	mvn.w	r2, #16
 80071d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2208      	movs	r2, #8
 80071de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f937 	bl	8007462 <HAL_TIM_IC_CaptureCallback>
 80071f4:	e005      	b.n	8007202 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f929 	bl	800744e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f93a 	bl	8007476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b01      	cmp	r3, #1
 8007214:	d10e      	bne.n	8007234 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b01      	cmp	r3, #1
 8007222:	d107      	bne.n	8007234 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f06f 0201 	mvn.w	r2, #1
 800722c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7f9 fe80 	bl	8000f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723e:	2b80      	cmp	r3, #128	; 0x80
 8007240:	d10e      	bne.n	8007260 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800724c:	2b80      	cmp	r3, #128	; 0x80
 800724e:	d107      	bne.n	8007260 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fae0 	bl	8007820 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726a:	2b40      	cmp	r3, #64	; 0x40
 800726c:	d10e      	bne.n	800728c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007278:	2b40      	cmp	r3, #64	; 0x40
 800727a:	d107      	bne.n	800728c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f8ff 	bl	800748a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 0320 	and.w	r3, r3, #32
 8007296:	2b20      	cmp	r3, #32
 8007298:	d10e      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f003 0320 	and.w	r3, r3, #32
 80072a4:	2b20      	cmp	r3, #32
 80072a6:	d107      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0220 	mvn.w	r2, #32
 80072b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 faaa 	bl	800780c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072b8:	bf00      	nop
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_TIM_ConfigClockSource+0x1c>
 80072d8:	2302      	movs	r3, #2
 80072da:	e0b4      	b.n	8007446 <HAL_TIM_ConfigClockSource+0x186>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007314:	d03e      	beq.n	8007394 <HAL_TIM_ConfigClockSource+0xd4>
 8007316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800731a:	f200 8087 	bhi.w	800742c <HAL_TIM_ConfigClockSource+0x16c>
 800731e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007322:	f000 8086 	beq.w	8007432 <HAL_TIM_ConfigClockSource+0x172>
 8007326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800732a:	d87f      	bhi.n	800742c <HAL_TIM_ConfigClockSource+0x16c>
 800732c:	2b70      	cmp	r3, #112	; 0x70
 800732e:	d01a      	beq.n	8007366 <HAL_TIM_ConfigClockSource+0xa6>
 8007330:	2b70      	cmp	r3, #112	; 0x70
 8007332:	d87b      	bhi.n	800742c <HAL_TIM_ConfigClockSource+0x16c>
 8007334:	2b60      	cmp	r3, #96	; 0x60
 8007336:	d050      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x11a>
 8007338:	2b60      	cmp	r3, #96	; 0x60
 800733a:	d877      	bhi.n	800742c <HAL_TIM_ConfigClockSource+0x16c>
 800733c:	2b50      	cmp	r3, #80	; 0x50
 800733e:	d03c      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0xfa>
 8007340:	2b50      	cmp	r3, #80	; 0x50
 8007342:	d873      	bhi.n	800742c <HAL_TIM_ConfigClockSource+0x16c>
 8007344:	2b40      	cmp	r3, #64	; 0x40
 8007346:	d058      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0x13a>
 8007348:	2b40      	cmp	r3, #64	; 0x40
 800734a:	d86f      	bhi.n	800742c <HAL_TIM_ConfigClockSource+0x16c>
 800734c:	2b30      	cmp	r3, #48	; 0x30
 800734e:	d064      	beq.n	800741a <HAL_TIM_ConfigClockSource+0x15a>
 8007350:	2b30      	cmp	r3, #48	; 0x30
 8007352:	d86b      	bhi.n	800742c <HAL_TIM_ConfigClockSource+0x16c>
 8007354:	2b20      	cmp	r3, #32
 8007356:	d060      	beq.n	800741a <HAL_TIM_ConfigClockSource+0x15a>
 8007358:	2b20      	cmp	r3, #32
 800735a:	d867      	bhi.n	800742c <HAL_TIM_ConfigClockSource+0x16c>
 800735c:	2b00      	cmp	r3, #0
 800735e:	d05c      	beq.n	800741a <HAL_TIM_ConfigClockSource+0x15a>
 8007360:	2b10      	cmp	r3, #16
 8007362:	d05a      	beq.n	800741a <HAL_TIM_ConfigClockSource+0x15a>
 8007364:	e062      	b.n	800742c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	6899      	ldr	r1, [r3, #8]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	f000 f9ad 	bl	80076d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	609a      	str	r2, [r3, #8]
      break;
 8007392:	e04f      	b.n	8007434 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	6899      	ldr	r1, [r3, #8]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f000 f996 	bl	80076d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073b6:	609a      	str	r2, [r3, #8]
      break;
 80073b8:	e03c      	b.n	8007434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	6859      	ldr	r1, [r3, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	461a      	mov	r2, r3
 80073c8:	f000 f90a 	bl	80075e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2150      	movs	r1, #80	; 0x50
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 f963 	bl	800769e <TIM_ITRx_SetConfig>
      break;
 80073d8:	e02c      	b.n	8007434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6818      	ldr	r0, [r3, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	6859      	ldr	r1, [r3, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	461a      	mov	r2, r3
 80073e8:	f000 f929 	bl	800763e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2160      	movs	r1, #96	; 0x60
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 f953 	bl	800769e <TIM_ITRx_SetConfig>
      break;
 80073f8:	e01c      	b.n	8007434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	6859      	ldr	r1, [r3, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	461a      	mov	r2, r3
 8007408:	f000 f8ea 	bl	80075e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2140      	movs	r1, #64	; 0x40
 8007412:	4618      	mov	r0, r3
 8007414:	f000 f943 	bl	800769e <TIM_ITRx_SetConfig>
      break;
 8007418:	e00c      	b.n	8007434 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4619      	mov	r1, r3
 8007424:	4610      	mov	r0, r2
 8007426:	f000 f93a 	bl	800769e <TIM_ITRx_SetConfig>
      break;
 800742a:	e003      	b.n	8007434 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	73fb      	strb	r3, [r7, #15]
      break;
 8007430:	e000      	b.n	8007434 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007444:	7bfb      	ldrb	r3, [r7, #15]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007476:	b480      	push	{r7}
 8007478:	b083      	sub	sp, #12
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800747e:	bf00      	nop
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007492:	bf00      	nop
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
	...

080074a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a40      	ldr	r2, [pc, #256]	; (80075b4 <TIM_Base_SetConfig+0x114>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d013      	beq.n	80074e0 <TIM_Base_SetConfig+0x40>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074be:	d00f      	beq.n	80074e0 <TIM_Base_SetConfig+0x40>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a3d      	ldr	r2, [pc, #244]	; (80075b8 <TIM_Base_SetConfig+0x118>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d00b      	beq.n	80074e0 <TIM_Base_SetConfig+0x40>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a3c      	ldr	r2, [pc, #240]	; (80075bc <TIM_Base_SetConfig+0x11c>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d007      	beq.n	80074e0 <TIM_Base_SetConfig+0x40>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a3b      	ldr	r2, [pc, #236]	; (80075c0 <TIM_Base_SetConfig+0x120>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d003      	beq.n	80074e0 <TIM_Base_SetConfig+0x40>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a3a      	ldr	r2, [pc, #232]	; (80075c4 <TIM_Base_SetConfig+0x124>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d108      	bne.n	80074f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a2f      	ldr	r2, [pc, #188]	; (80075b4 <TIM_Base_SetConfig+0x114>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d02b      	beq.n	8007552 <TIM_Base_SetConfig+0xb2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007500:	d027      	beq.n	8007552 <TIM_Base_SetConfig+0xb2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a2c      	ldr	r2, [pc, #176]	; (80075b8 <TIM_Base_SetConfig+0x118>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d023      	beq.n	8007552 <TIM_Base_SetConfig+0xb2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a2b      	ldr	r2, [pc, #172]	; (80075bc <TIM_Base_SetConfig+0x11c>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d01f      	beq.n	8007552 <TIM_Base_SetConfig+0xb2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a2a      	ldr	r2, [pc, #168]	; (80075c0 <TIM_Base_SetConfig+0x120>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d01b      	beq.n	8007552 <TIM_Base_SetConfig+0xb2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a29      	ldr	r2, [pc, #164]	; (80075c4 <TIM_Base_SetConfig+0x124>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d017      	beq.n	8007552 <TIM_Base_SetConfig+0xb2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a28      	ldr	r2, [pc, #160]	; (80075c8 <TIM_Base_SetConfig+0x128>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d013      	beq.n	8007552 <TIM_Base_SetConfig+0xb2>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a27      	ldr	r2, [pc, #156]	; (80075cc <TIM_Base_SetConfig+0x12c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d00f      	beq.n	8007552 <TIM_Base_SetConfig+0xb2>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a26      	ldr	r2, [pc, #152]	; (80075d0 <TIM_Base_SetConfig+0x130>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00b      	beq.n	8007552 <TIM_Base_SetConfig+0xb2>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a25      	ldr	r2, [pc, #148]	; (80075d4 <TIM_Base_SetConfig+0x134>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d007      	beq.n	8007552 <TIM_Base_SetConfig+0xb2>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a24      	ldr	r2, [pc, #144]	; (80075d8 <TIM_Base_SetConfig+0x138>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d003      	beq.n	8007552 <TIM_Base_SetConfig+0xb2>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a23      	ldr	r2, [pc, #140]	; (80075dc <TIM_Base_SetConfig+0x13c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d108      	bne.n	8007564 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a0a      	ldr	r2, [pc, #40]	; (80075b4 <TIM_Base_SetConfig+0x114>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d003      	beq.n	8007598 <TIM_Base_SetConfig+0xf8>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a0c      	ldr	r2, [pc, #48]	; (80075c4 <TIM_Base_SetConfig+0x124>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d103      	bne.n	80075a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	691a      	ldr	r2, [r3, #16]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	615a      	str	r2, [r3, #20]
}
 80075a6:	bf00      	nop
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	40010000 	.word	0x40010000
 80075b8:	40000400 	.word	0x40000400
 80075bc:	40000800 	.word	0x40000800
 80075c0:	40000c00 	.word	0x40000c00
 80075c4:	40010400 	.word	0x40010400
 80075c8:	40014000 	.word	0x40014000
 80075cc:	40014400 	.word	0x40014400
 80075d0:	40014800 	.word	0x40014800
 80075d4:	40001800 	.word	0x40001800
 80075d8:	40001c00 	.word	0x40001c00
 80075dc:	40002000 	.word	0x40002000

080075e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f023 0201 	bic.w	r2, r3, #1
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800760a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	4313      	orrs	r3, r2
 8007614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f023 030a 	bic.w	r3, r3, #10
 800761c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	4313      	orrs	r3, r2
 8007624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	621a      	str	r2, [r3, #32]
}
 8007632:	bf00      	nop
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800763e:	b480      	push	{r7}
 8007640:	b087      	sub	sp, #28
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	f023 0210 	bic.w	r2, r3, #16
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	031b      	lsls	r3, r3, #12
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4313      	orrs	r3, r2
 8007672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800767a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	011b      	lsls	r3, r3, #4
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	4313      	orrs	r3, r2
 8007684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	621a      	str	r2, [r3, #32]
}
 8007692:	bf00      	nop
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800769e:	b480      	push	{r7}
 80076a0:	b085      	sub	sp, #20
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f043 0307 	orr.w	r3, r3, #7
 80076c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	609a      	str	r2, [r3, #8]
}
 80076c8:	bf00      	nop
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	021a      	lsls	r2, r3, #8
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	431a      	orrs	r2, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	4313      	orrs	r3, r2
 8007700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	609a      	str	r2, [r3, #8]
}
 8007708:	bf00      	nop
 800770a:	371c      	adds	r7, #28
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007728:	2302      	movs	r3, #2
 800772a:	e05a      	b.n	80077e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	4313      	orrs	r3, r2
 800775c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a21      	ldr	r2, [pc, #132]	; (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d022      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007778:	d01d      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a1d      	ldr	r2, [pc, #116]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d018      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a1b      	ldr	r2, [pc, #108]	; (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d013      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a1a      	ldr	r2, [pc, #104]	; (80077fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d00e      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a18      	ldr	r2, [pc, #96]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d009      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a17      	ldr	r2, [pc, #92]	; (8007804 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d004      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a15      	ldr	r2, [pc, #84]	; (8007808 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d10c      	bne.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	40010000 	.word	0x40010000
 80077f4:	40000400 	.word	0x40000400
 80077f8:	40000800 	.word	0x40000800
 80077fc:	40000c00 	.word	0x40000c00
 8007800:	40010400 	.word	0x40010400
 8007804:	40014000 	.word	0x40014000
 8007808:	40001800 	.word	0x40001800

0800780c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e03f      	b.n	80078c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7f9 fe74 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2224      	movs	r2, #36	; 0x24
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007876:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f929 	bl	8007ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	691a      	ldr	r2, [r3, #16]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800788c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	695a      	ldr	r2, [r3, #20]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800789c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68da      	ldr	r2, [r3, #12]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2220      	movs	r2, #32
 80078c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b08a      	sub	sp, #40	; 0x28
 80078d2:	af02      	add	r7, sp, #8
 80078d4:	60f8      	str	r0, [r7, #12]
 80078d6:	60b9      	str	r1, [r7, #8]
 80078d8:	603b      	str	r3, [r7, #0]
 80078da:	4613      	mov	r3, r2
 80078dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078de:	2300      	movs	r3, #0
 80078e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	d17c      	bne.n	80079e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <HAL_UART_Transmit+0x2c>
 80078f4:	88fb      	ldrh	r3, [r7, #6]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e075      	b.n	80079ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007904:	2b01      	cmp	r3, #1
 8007906:	d101      	bne.n	800790c <HAL_UART_Transmit+0x3e>
 8007908:	2302      	movs	r3, #2
 800790a:	e06e      	b.n	80079ea <HAL_UART_Transmit+0x11c>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2221      	movs	r2, #33	; 0x21
 800791e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007922:	f7fb fb33 	bl	8002f8c <HAL_GetTick>
 8007926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	88fa      	ldrh	r2, [r7, #6]
 800792c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	88fa      	ldrh	r2, [r7, #6]
 8007932:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800793c:	d108      	bne.n	8007950 <HAL_UART_Transmit+0x82>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d104      	bne.n	8007950 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	61bb      	str	r3, [r7, #24]
 800794e:	e003      	b.n	8007958 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007954:	2300      	movs	r3, #0
 8007956:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007960:	e02a      	b.n	80079b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2200      	movs	r2, #0
 800796a:	2180      	movs	r1, #128	; 0x80
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 f840 	bl	80079f2 <UART_WaitOnFlagUntilTimeout>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d001      	beq.n	800797c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e036      	b.n	80079ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10b      	bne.n	800799a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007990:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	3302      	adds	r3, #2
 8007996:	61bb      	str	r3, [r7, #24]
 8007998:	e007      	b.n	80079aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	781a      	ldrb	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	3301      	adds	r3, #1
 80079a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	3b01      	subs	r3, #1
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079bc:	b29b      	uxth	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1cf      	bne.n	8007962 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2200      	movs	r2, #0
 80079ca:	2140      	movs	r1, #64	; 0x40
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f810 	bl	80079f2 <UART_WaitOnFlagUntilTimeout>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e006      	b.n	80079ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2220      	movs	r2, #32
 80079e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	e000      	b.n	80079ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80079e8:	2302      	movs	r3, #2
  }
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3720      	adds	r7, #32
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b090      	sub	sp, #64	; 0x40
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	60f8      	str	r0, [r7, #12]
 80079fa:	60b9      	str	r1, [r7, #8]
 80079fc:	603b      	str	r3, [r7, #0]
 80079fe:	4613      	mov	r3, r2
 8007a00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a02:	e050      	b.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0a:	d04c      	beq.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d007      	beq.n	8007a22 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a12:	f7fb fabb 	bl	8002f8c <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d241      	bcs.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	330c      	adds	r3, #12
 8007a28:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2c:	e853 3f00 	ldrex	r3, [r3]
 8007a30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	330c      	adds	r3, #12
 8007a40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a42:	637a      	str	r2, [r7, #52]	; 0x34
 8007a44:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a4a:	e841 2300 	strex	r3, r2, [r1]
 8007a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1e5      	bne.n	8007a22 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	3314      	adds	r3, #20
 8007a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	613b      	str	r3, [r7, #16]
   return(result);
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f023 0301 	bic.w	r3, r3, #1
 8007a6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3314      	adds	r3, #20
 8007a74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a76:	623a      	str	r2, [r7, #32]
 8007a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7a:	69f9      	ldr	r1, [r7, #28]
 8007a7c:	6a3a      	ldr	r2, [r7, #32]
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e5      	bne.n	8007a56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2220      	movs	r2, #32
 8007a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e00f      	b.n	8007ac6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	bf0c      	ite	eq
 8007ab6:	2301      	moveq	r3, #1
 8007ab8:	2300      	movne	r3, #0
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	461a      	mov	r2, r3
 8007abe:	79fb      	ldrb	r3, [r7, #7]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d09f      	beq.n	8007a04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3740      	adds	r7, #64	; 0x40
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
	...

08007ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ad4:	b0c0      	sub	sp, #256	; 0x100
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aec:	68d9      	ldr	r1, [r3, #12]
 8007aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	ea40 0301 	orr.w	r3, r0, r1
 8007af8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	431a      	orrs	r2, r3
 8007b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b28:	f021 010c 	bic.w	r1, r1, #12
 8007b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b36:	430b      	orrs	r3, r1
 8007b38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b4a:	6999      	ldr	r1, [r3, #24]
 8007b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	ea40 0301 	orr.w	r3, r0, r1
 8007b56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	4b8f      	ldr	r3, [pc, #572]	; (8007d9c <UART_SetConfig+0x2cc>)
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d005      	beq.n	8007b70 <UART_SetConfig+0xa0>
 8007b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	4b8d      	ldr	r3, [pc, #564]	; (8007da0 <UART_SetConfig+0x2d0>)
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d104      	bne.n	8007b7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b70:	f7fe f968 	bl	8005e44 <HAL_RCC_GetPCLK2Freq>
 8007b74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b78:	e003      	b.n	8007b82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b7a:	f7fe f94f 	bl	8005e1c <HAL_RCC_GetPCLK1Freq>
 8007b7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b8c:	f040 810c 	bne.w	8007da8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b94:	2200      	movs	r2, #0
 8007b96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007ba2:	4622      	mov	r2, r4
 8007ba4:	462b      	mov	r3, r5
 8007ba6:	1891      	adds	r1, r2, r2
 8007ba8:	65b9      	str	r1, [r7, #88]	; 0x58
 8007baa:	415b      	adcs	r3, r3
 8007bac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007bb2:	4621      	mov	r1, r4
 8007bb4:	eb12 0801 	adds.w	r8, r2, r1
 8007bb8:	4629      	mov	r1, r5
 8007bba:	eb43 0901 	adc.w	r9, r3, r1
 8007bbe:	f04f 0200 	mov.w	r2, #0
 8007bc2:	f04f 0300 	mov.w	r3, #0
 8007bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bd2:	4690      	mov	r8, r2
 8007bd4:	4699      	mov	r9, r3
 8007bd6:	4623      	mov	r3, r4
 8007bd8:	eb18 0303 	adds.w	r3, r8, r3
 8007bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007be0:	462b      	mov	r3, r5
 8007be2:	eb49 0303 	adc.w	r3, r9, r3
 8007be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bf6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007bfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007bfe:	460b      	mov	r3, r1
 8007c00:	18db      	adds	r3, r3, r3
 8007c02:	653b      	str	r3, [r7, #80]	; 0x50
 8007c04:	4613      	mov	r3, r2
 8007c06:	eb42 0303 	adc.w	r3, r2, r3
 8007c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8007c0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c14:	f7f8 fb3c 	bl	8000290 <__aeabi_uldivmod>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4b61      	ldr	r3, [pc, #388]	; (8007da4 <UART_SetConfig+0x2d4>)
 8007c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c22:	095b      	lsrs	r3, r3, #5
 8007c24:	011c      	lsls	r4, r3, #4
 8007c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007c34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c38:	4642      	mov	r2, r8
 8007c3a:	464b      	mov	r3, r9
 8007c3c:	1891      	adds	r1, r2, r2
 8007c3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007c40:	415b      	adcs	r3, r3
 8007c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c48:	4641      	mov	r1, r8
 8007c4a:	eb12 0a01 	adds.w	sl, r2, r1
 8007c4e:	4649      	mov	r1, r9
 8007c50:	eb43 0b01 	adc.w	fp, r3, r1
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	f04f 0300 	mov.w	r3, #0
 8007c5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c68:	4692      	mov	sl, r2
 8007c6a:	469b      	mov	fp, r3
 8007c6c:	4643      	mov	r3, r8
 8007c6e:	eb1a 0303 	adds.w	r3, sl, r3
 8007c72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c76:	464b      	mov	r3, r9
 8007c78:	eb4b 0303 	adc.w	r3, fp, r3
 8007c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c94:	460b      	mov	r3, r1
 8007c96:	18db      	adds	r3, r3, r3
 8007c98:	643b      	str	r3, [r7, #64]	; 0x40
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	eb42 0303 	adc.w	r3, r2, r3
 8007ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ca6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007caa:	f7f8 faf1 	bl	8000290 <__aeabi_uldivmod>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	4b3b      	ldr	r3, [pc, #236]	; (8007da4 <UART_SetConfig+0x2d4>)
 8007cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8007cba:	095b      	lsrs	r3, r3, #5
 8007cbc:	2264      	movs	r2, #100	; 0x64
 8007cbe:	fb02 f303 	mul.w	r3, r2, r3
 8007cc2:	1acb      	subs	r3, r1, r3
 8007cc4:	00db      	lsls	r3, r3, #3
 8007cc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007cca:	4b36      	ldr	r3, [pc, #216]	; (8007da4 <UART_SetConfig+0x2d4>)
 8007ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8007cd0:	095b      	lsrs	r3, r3, #5
 8007cd2:	005b      	lsls	r3, r3, #1
 8007cd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007cd8:	441c      	add	r4, r3
 8007cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ce4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007ce8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007cec:	4642      	mov	r2, r8
 8007cee:	464b      	mov	r3, r9
 8007cf0:	1891      	adds	r1, r2, r2
 8007cf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007cf4:	415b      	adcs	r3, r3
 8007cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007cfc:	4641      	mov	r1, r8
 8007cfe:	1851      	adds	r1, r2, r1
 8007d00:	6339      	str	r1, [r7, #48]	; 0x30
 8007d02:	4649      	mov	r1, r9
 8007d04:	414b      	adcs	r3, r1
 8007d06:	637b      	str	r3, [r7, #52]	; 0x34
 8007d08:	f04f 0200 	mov.w	r2, #0
 8007d0c:	f04f 0300 	mov.w	r3, #0
 8007d10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d14:	4659      	mov	r1, fp
 8007d16:	00cb      	lsls	r3, r1, #3
 8007d18:	4651      	mov	r1, sl
 8007d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d1e:	4651      	mov	r1, sl
 8007d20:	00ca      	lsls	r2, r1, #3
 8007d22:	4610      	mov	r0, r2
 8007d24:	4619      	mov	r1, r3
 8007d26:	4603      	mov	r3, r0
 8007d28:	4642      	mov	r2, r8
 8007d2a:	189b      	adds	r3, r3, r2
 8007d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d30:	464b      	mov	r3, r9
 8007d32:	460a      	mov	r2, r1
 8007d34:	eb42 0303 	adc.w	r3, r2, r3
 8007d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d50:	460b      	mov	r3, r1
 8007d52:	18db      	adds	r3, r3, r3
 8007d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d56:	4613      	mov	r3, r2
 8007d58:	eb42 0303 	adc.w	r3, r2, r3
 8007d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d66:	f7f8 fa93 	bl	8000290 <__aeabi_uldivmod>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4b0d      	ldr	r3, [pc, #52]	; (8007da4 <UART_SetConfig+0x2d4>)
 8007d70:	fba3 1302 	umull	r1, r3, r3, r2
 8007d74:	095b      	lsrs	r3, r3, #5
 8007d76:	2164      	movs	r1, #100	; 0x64
 8007d78:	fb01 f303 	mul.w	r3, r1, r3
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	00db      	lsls	r3, r3, #3
 8007d80:	3332      	adds	r3, #50	; 0x32
 8007d82:	4a08      	ldr	r2, [pc, #32]	; (8007da4 <UART_SetConfig+0x2d4>)
 8007d84:	fba2 2303 	umull	r2, r3, r2, r3
 8007d88:	095b      	lsrs	r3, r3, #5
 8007d8a:	f003 0207 	and.w	r2, r3, #7
 8007d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4422      	add	r2, r4
 8007d96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d98:	e105      	b.n	8007fa6 <UART_SetConfig+0x4d6>
 8007d9a:	bf00      	nop
 8007d9c:	40011000 	.word	0x40011000
 8007da0:	40011400 	.word	0x40011400
 8007da4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dac:	2200      	movs	r2, #0
 8007dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007db2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007db6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007dba:	4642      	mov	r2, r8
 8007dbc:	464b      	mov	r3, r9
 8007dbe:	1891      	adds	r1, r2, r2
 8007dc0:	6239      	str	r1, [r7, #32]
 8007dc2:	415b      	adcs	r3, r3
 8007dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007dca:	4641      	mov	r1, r8
 8007dcc:	1854      	adds	r4, r2, r1
 8007dce:	4649      	mov	r1, r9
 8007dd0:	eb43 0501 	adc.w	r5, r3, r1
 8007dd4:	f04f 0200 	mov.w	r2, #0
 8007dd8:	f04f 0300 	mov.w	r3, #0
 8007ddc:	00eb      	lsls	r3, r5, #3
 8007dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007de2:	00e2      	lsls	r2, r4, #3
 8007de4:	4614      	mov	r4, r2
 8007de6:	461d      	mov	r5, r3
 8007de8:	4643      	mov	r3, r8
 8007dea:	18e3      	adds	r3, r4, r3
 8007dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007df0:	464b      	mov	r3, r9
 8007df2:	eb45 0303 	adc.w	r3, r5, r3
 8007df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e0a:	f04f 0200 	mov.w	r2, #0
 8007e0e:	f04f 0300 	mov.w	r3, #0
 8007e12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e16:	4629      	mov	r1, r5
 8007e18:	008b      	lsls	r3, r1, #2
 8007e1a:	4621      	mov	r1, r4
 8007e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e20:	4621      	mov	r1, r4
 8007e22:	008a      	lsls	r2, r1, #2
 8007e24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e28:	f7f8 fa32 	bl	8000290 <__aeabi_uldivmod>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4b60      	ldr	r3, [pc, #384]	; (8007fb4 <UART_SetConfig+0x4e4>)
 8007e32:	fba3 2302 	umull	r2, r3, r3, r2
 8007e36:	095b      	lsrs	r3, r3, #5
 8007e38:	011c      	lsls	r4, r3, #4
 8007e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e4c:	4642      	mov	r2, r8
 8007e4e:	464b      	mov	r3, r9
 8007e50:	1891      	adds	r1, r2, r2
 8007e52:	61b9      	str	r1, [r7, #24]
 8007e54:	415b      	adcs	r3, r3
 8007e56:	61fb      	str	r3, [r7, #28]
 8007e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e5c:	4641      	mov	r1, r8
 8007e5e:	1851      	adds	r1, r2, r1
 8007e60:	6139      	str	r1, [r7, #16]
 8007e62:	4649      	mov	r1, r9
 8007e64:	414b      	adcs	r3, r1
 8007e66:	617b      	str	r3, [r7, #20]
 8007e68:	f04f 0200 	mov.w	r2, #0
 8007e6c:	f04f 0300 	mov.w	r3, #0
 8007e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e74:	4659      	mov	r1, fp
 8007e76:	00cb      	lsls	r3, r1, #3
 8007e78:	4651      	mov	r1, sl
 8007e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e7e:	4651      	mov	r1, sl
 8007e80:	00ca      	lsls	r2, r1, #3
 8007e82:	4610      	mov	r0, r2
 8007e84:	4619      	mov	r1, r3
 8007e86:	4603      	mov	r3, r0
 8007e88:	4642      	mov	r2, r8
 8007e8a:	189b      	adds	r3, r3, r2
 8007e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e90:	464b      	mov	r3, r9
 8007e92:	460a      	mov	r2, r1
 8007e94:	eb42 0303 	adc.w	r3, r2, r3
 8007e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ea6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ea8:	f04f 0200 	mov.w	r2, #0
 8007eac:	f04f 0300 	mov.w	r3, #0
 8007eb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007eb4:	4649      	mov	r1, r9
 8007eb6:	008b      	lsls	r3, r1, #2
 8007eb8:	4641      	mov	r1, r8
 8007eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ebe:	4641      	mov	r1, r8
 8007ec0:	008a      	lsls	r2, r1, #2
 8007ec2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007ec6:	f7f8 f9e3 	bl	8000290 <__aeabi_uldivmod>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	4b39      	ldr	r3, [pc, #228]	; (8007fb4 <UART_SetConfig+0x4e4>)
 8007ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ed4:	095b      	lsrs	r3, r3, #5
 8007ed6:	2164      	movs	r1, #100	; 0x64
 8007ed8:	fb01 f303 	mul.w	r3, r1, r3
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	3332      	adds	r3, #50	; 0x32
 8007ee2:	4a34      	ldr	r2, [pc, #208]	; (8007fb4 <UART_SetConfig+0x4e4>)
 8007ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee8:	095b      	lsrs	r3, r3, #5
 8007eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007eee:	441c      	add	r4, r3
 8007ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	673b      	str	r3, [r7, #112]	; 0x70
 8007ef8:	677a      	str	r2, [r7, #116]	; 0x74
 8007efa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007efe:	4642      	mov	r2, r8
 8007f00:	464b      	mov	r3, r9
 8007f02:	1891      	adds	r1, r2, r2
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	415b      	adcs	r3, r3
 8007f08:	60fb      	str	r3, [r7, #12]
 8007f0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f0e:	4641      	mov	r1, r8
 8007f10:	1851      	adds	r1, r2, r1
 8007f12:	6039      	str	r1, [r7, #0]
 8007f14:	4649      	mov	r1, r9
 8007f16:	414b      	adcs	r3, r1
 8007f18:	607b      	str	r3, [r7, #4]
 8007f1a:	f04f 0200 	mov.w	r2, #0
 8007f1e:	f04f 0300 	mov.w	r3, #0
 8007f22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f26:	4659      	mov	r1, fp
 8007f28:	00cb      	lsls	r3, r1, #3
 8007f2a:	4651      	mov	r1, sl
 8007f2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f30:	4651      	mov	r1, sl
 8007f32:	00ca      	lsls	r2, r1, #3
 8007f34:	4610      	mov	r0, r2
 8007f36:	4619      	mov	r1, r3
 8007f38:	4603      	mov	r3, r0
 8007f3a:	4642      	mov	r2, r8
 8007f3c:	189b      	adds	r3, r3, r2
 8007f3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f40:	464b      	mov	r3, r9
 8007f42:	460a      	mov	r2, r1
 8007f44:	eb42 0303 	adc.w	r3, r2, r3
 8007f48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	663b      	str	r3, [r7, #96]	; 0x60
 8007f54:	667a      	str	r2, [r7, #100]	; 0x64
 8007f56:	f04f 0200 	mov.w	r2, #0
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f62:	4649      	mov	r1, r9
 8007f64:	008b      	lsls	r3, r1, #2
 8007f66:	4641      	mov	r1, r8
 8007f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f6c:	4641      	mov	r1, r8
 8007f6e:	008a      	lsls	r2, r1, #2
 8007f70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f74:	f7f8 f98c 	bl	8000290 <__aeabi_uldivmod>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4b0d      	ldr	r3, [pc, #52]	; (8007fb4 <UART_SetConfig+0x4e4>)
 8007f7e:	fba3 1302 	umull	r1, r3, r3, r2
 8007f82:	095b      	lsrs	r3, r3, #5
 8007f84:	2164      	movs	r1, #100	; 0x64
 8007f86:	fb01 f303 	mul.w	r3, r1, r3
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	011b      	lsls	r3, r3, #4
 8007f8e:	3332      	adds	r3, #50	; 0x32
 8007f90:	4a08      	ldr	r2, [pc, #32]	; (8007fb4 <UART_SetConfig+0x4e4>)
 8007f92:	fba2 2303 	umull	r2, r3, r2, r3
 8007f96:	095b      	lsrs	r3, r3, #5
 8007f98:	f003 020f 	and.w	r2, r3, #15
 8007f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4422      	add	r2, r4
 8007fa4:	609a      	str	r2, [r3, #8]
}
 8007fa6:	bf00      	nop
 8007fa8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007fac:	46bd      	mov	sp, r7
 8007fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fb2:	bf00      	nop
 8007fb4:	51eb851f 	.word	0x51eb851f

08007fb8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d123      	bne.n	8008012 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007fd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	6851      	ldr	r1, [r2, #4]
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	6892      	ldr	r2, [r2, #8]
 8007fde:	4311      	orrs	r1, r2
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	68d2      	ldr	r2, [r2, #12]
 8007fe4:	4311      	orrs	r1, r2
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	6912      	ldr	r2, [r2, #16]
 8007fea:	4311      	orrs	r1, r2
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	6952      	ldr	r2, [r2, #20]
 8007ff0:	4311      	orrs	r1, r2
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	6992      	ldr	r2, [r2, #24]
 8007ff6:	4311      	orrs	r1, r2
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	69d2      	ldr	r2, [r2, #28]
 8007ffc:	4311      	orrs	r1, r2
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	6a12      	ldr	r2, [r2, #32]
 8008002:	4311      	orrs	r1, r2
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008008:	430a      	orrs	r2, r1
 800800a:	431a      	orrs	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	e028      	b.n	8008064 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	69d9      	ldr	r1, [r3, #28]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	4319      	orrs	r1, r3
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	430b      	orrs	r3, r1
 800802a:	431a      	orrs	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008038:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800803c:	683a      	ldr	r2, [r7, #0]
 800803e:	6851      	ldr	r1, [r2, #4]
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	6892      	ldr	r2, [r2, #8]
 8008044:	4311      	orrs	r1, r2
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	68d2      	ldr	r2, [r2, #12]
 800804a:	4311      	orrs	r1, r2
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	6912      	ldr	r2, [r2, #16]
 8008050:	4311      	orrs	r1, r2
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	6952      	ldr	r2, [r2, #20]
 8008056:	4311      	orrs	r1, r2
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	6992      	ldr	r2, [r2, #24]
 800805c:	430a      	orrs	r2, r1
 800805e:	431a      	orrs	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008072:	b480      	push	{r7}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	60b9      	str	r1, [r7, #8]
 800807c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d128      	bne.n	80080d6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	1e59      	subs	r1, r3, #1
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	3b01      	subs	r3, #1
 8008098:	011b      	lsls	r3, r3, #4
 800809a:	4319      	orrs	r1, r3
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	021b      	lsls	r3, r3, #8
 80080a4:	4319      	orrs	r1, r3
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	3b01      	subs	r3, #1
 80080ac:	031b      	lsls	r3, r3, #12
 80080ae:	4319      	orrs	r1, r3
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	041b      	lsls	r3, r3, #16
 80080b8:	4319      	orrs	r1, r3
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	3b01      	subs	r3, #1
 80080c0:	051b      	lsls	r3, r3, #20
 80080c2:	4319      	orrs	r1, r3
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	061b      	lsls	r3, r3, #24
 80080cc:	430b      	orrs	r3, r1
 80080ce:	431a      	orrs	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	609a      	str	r2, [r3, #8]
 80080d4:	e02f      	b.n	8008136 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80080de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	68d2      	ldr	r2, [r2, #12]
 80080e6:	3a01      	subs	r2, #1
 80080e8:	0311      	lsls	r1, r2, #12
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	6952      	ldr	r2, [r2, #20]
 80080ee:	3a01      	subs	r2, #1
 80080f0:	0512      	lsls	r2, r2, #20
 80080f2:	430a      	orrs	r2, r1
 80080f4:	431a      	orrs	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	1e59      	subs	r1, r3, #1
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	3b01      	subs	r3, #1
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	4319      	orrs	r1, r3
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	3b01      	subs	r3, #1
 8008118:	021b      	lsls	r3, r3, #8
 800811a:	4319      	orrs	r1, r3
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	3b01      	subs	r3, #1
 8008122:	041b      	lsls	r3, r3, #16
 8008124:	4319      	orrs	r1, r3
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	3b01      	subs	r3, #1
 800812c:	061b      	lsls	r3, r3, #24
 800812e:	430b      	orrs	r3, r1
 8008130:	431a      	orrs	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	0d9b      	lsrs	r3, r3, #22
 800815a:	059b      	lsls	r3, r3, #22
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	6811      	ldr	r1, [r2, #0]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	6852      	ldr	r2, [r2, #4]
 8008164:	4311      	orrs	r1, r2
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	6892      	ldr	r2, [r2, #8]
 800816a:	3a01      	subs	r2, #1
 800816c:	0152      	lsls	r2, r2, #5
 800816e:	4311      	orrs	r1, r2
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	68d2      	ldr	r2, [r2, #12]
 8008174:	0252      	lsls	r2, r2, #9
 8008176:	430a      	orrs	r2, r1
 8008178:	431a      	orrs	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800817e:	f7fa ff05 	bl	8002f8c <HAL_GetTick>
 8008182:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008184:	e010      	b.n	80081a8 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818c:	d00c      	beq.n	80081a8 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d007      	beq.n	80081a4 <FMC_SDRAM_SendCommand+0x60>
 8008194:	f7fa fefa 	bl	8002f8c <HAL_GetTick>
 8008198:	4602      	mov	r2, r0
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d201      	bcs.n	80081a8 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e006      	b.n	80081b6 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	f003 0320 	and.w	r3, r3, #32
 80081b0:	2b20      	cmp	r3, #32
 80081b2:	d0e8      	beq.n	8008186 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80081d0:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	0052      	lsls	r2, r2, #1
 80081d8:	431a      	orrs	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <__errno>:
 80081ec:	4b01      	ldr	r3, [pc, #4]	; (80081f4 <__errno+0x8>)
 80081ee:	6818      	ldr	r0, [r3, #0]
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20000054 	.word	0x20000054

080081f8 <__libc_init_array>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	4d0d      	ldr	r5, [pc, #52]	; (8008230 <__libc_init_array+0x38>)
 80081fc:	4c0d      	ldr	r4, [pc, #52]	; (8008234 <__libc_init_array+0x3c>)
 80081fe:	1b64      	subs	r4, r4, r5
 8008200:	10a4      	asrs	r4, r4, #2
 8008202:	2600      	movs	r6, #0
 8008204:	42a6      	cmp	r6, r4
 8008206:	d109      	bne.n	800821c <__libc_init_array+0x24>
 8008208:	4d0b      	ldr	r5, [pc, #44]	; (8008238 <__libc_init_array+0x40>)
 800820a:	4c0c      	ldr	r4, [pc, #48]	; (800823c <__libc_init_array+0x44>)
 800820c:	f000 fca2 	bl	8008b54 <_init>
 8008210:	1b64      	subs	r4, r4, r5
 8008212:	10a4      	asrs	r4, r4, #2
 8008214:	2600      	movs	r6, #0
 8008216:	42a6      	cmp	r6, r4
 8008218:	d105      	bne.n	8008226 <__libc_init_array+0x2e>
 800821a:	bd70      	pop	{r4, r5, r6, pc}
 800821c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008220:	4798      	blx	r3
 8008222:	3601      	adds	r6, #1
 8008224:	e7ee      	b.n	8008204 <__libc_init_array+0xc>
 8008226:	f855 3b04 	ldr.w	r3, [r5], #4
 800822a:	4798      	blx	r3
 800822c:	3601      	adds	r6, #1
 800822e:	e7f2      	b.n	8008216 <__libc_init_array+0x1e>
 8008230:	0800a698 	.word	0x0800a698
 8008234:	0800a698 	.word	0x0800a698
 8008238:	0800a698 	.word	0x0800a698
 800823c:	0800a69c 	.word	0x0800a69c

08008240 <memset>:
 8008240:	4402      	add	r2, r0
 8008242:	4603      	mov	r3, r0
 8008244:	4293      	cmp	r3, r2
 8008246:	d100      	bne.n	800824a <memset+0xa>
 8008248:	4770      	bx	lr
 800824a:	f803 1b01 	strb.w	r1, [r3], #1
 800824e:	e7f9      	b.n	8008244 <memset+0x4>

08008250 <sniprintf>:
 8008250:	b40c      	push	{r2, r3}
 8008252:	b530      	push	{r4, r5, lr}
 8008254:	4b17      	ldr	r3, [pc, #92]	; (80082b4 <sniprintf+0x64>)
 8008256:	1e0c      	subs	r4, r1, #0
 8008258:	681d      	ldr	r5, [r3, #0]
 800825a:	b09d      	sub	sp, #116	; 0x74
 800825c:	da08      	bge.n	8008270 <sniprintf+0x20>
 800825e:	238b      	movs	r3, #139	; 0x8b
 8008260:	602b      	str	r3, [r5, #0]
 8008262:	f04f 30ff 	mov.w	r0, #4294967295
 8008266:	b01d      	add	sp, #116	; 0x74
 8008268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800826c:	b002      	add	sp, #8
 800826e:	4770      	bx	lr
 8008270:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008274:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008278:	bf14      	ite	ne
 800827a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800827e:	4623      	moveq	r3, r4
 8008280:	9304      	str	r3, [sp, #16]
 8008282:	9307      	str	r3, [sp, #28]
 8008284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008288:	9002      	str	r0, [sp, #8]
 800828a:	9006      	str	r0, [sp, #24]
 800828c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008290:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008292:	ab21      	add	r3, sp, #132	; 0x84
 8008294:	a902      	add	r1, sp, #8
 8008296:	4628      	mov	r0, r5
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	f000 f869 	bl	8008370 <_svfiprintf_r>
 800829e:	1c43      	adds	r3, r0, #1
 80082a0:	bfbc      	itt	lt
 80082a2:	238b      	movlt	r3, #139	; 0x8b
 80082a4:	602b      	strlt	r3, [r5, #0]
 80082a6:	2c00      	cmp	r4, #0
 80082a8:	d0dd      	beq.n	8008266 <sniprintf+0x16>
 80082aa:	9b02      	ldr	r3, [sp, #8]
 80082ac:	2200      	movs	r2, #0
 80082ae:	701a      	strb	r2, [r3, #0]
 80082b0:	e7d9      	b.n	8008266 <sniprintf+0x16>
 80082b2:	bf00      	nop
 80082b4:	20000054 	.word	0x20000054

080082b8 <__ssputs_r>:
 80082b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082bc:	688e      	ldr	r6, [r1, #8]
 80082be:	429e      	cmp	r6, r3
 80082c0:	4682      	mov	sl, r0
 80082c2:	460c      	mov	r4, r1
 80082c4:	4690      	mov	r8, r2
 80082c6:	461f      	mov	r7, r3
 80082c8:	d838      	bhi.n	800833c <__ssputs_r+0x84>
 80082ca:	898a      	ldrh	r2, [r1, #12]
 80082cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082d0:	d032      	beq.n	8008338 <__ssputs_r+0x80>
 80082d2:	6825      	ldr	r5, [r4, #0]
 80082d4:	6909      	ldr	r1, [r1, #16]
 80082d6:	eba5 0901 	sub.w	r9, r5, r1
 80082da:	6965      	ldr	r5, [r4, #20]
 80082dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082e4:	3301      	adds	r3, #1
 80082e6:	444b      	add	r3, r9
 80082e8:	106d      	asrs	r5, r5, #1
 80082ea:	429d      	cmp	r5, r3
 80082ec:	bf38      	it	cc
 80082ee:	461d      	movcc	r5, r3
 80082f0:	0553      	lsls	r3, r2, #21
 80082f2:	d531      	bpl.n	8008358 <__ssputs_r+0xa0>
 80082f4:	4629      	mov	r1, r5
 80082f6:	f000 fb63 	bl	80089c0 <_malloc_r>
 80082fa:	4606      	mov	r6, r0
 80082fc:	b950      	cbnz	r0, 8008314 <__ssputs_r+0x5c>
 80082fe:	230c      	movs	r3, #12
 8008300:	f8ca 3000 	str.w	r3, [sl]
 8008304:	89a3      	ldrh	r3, [r4, #12]
 8008306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800830a:	81a3      	strh	r3, [r4, #12]
 800830c:	f04f 30ff 	mov.w	r0, #4294967295
 8008310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008314:	6921      	ldr	r1, [r4, #16]
 8008316:	464a      	mov	r2, r9
 8008318:	f000 fabe 	bl	8008898 <memcpy>
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008326:	81a3      	strh	r3, [r4, #12]
 8008328:	6126      	str	r6, [r4, #16]
 800832a:	6165      	str	r5, [r4, #20]
 800832c:	444e      	add	r6, r9
 800832e:	eba5 0509 	sub.w	r5, r5, r9
 8008332:	6026      	str	r6, [r4, #0]
 8008334:	60a5      	str	r5, [r4, #8]
 8008336:	463e      	mov	r6, r7
 8008338:	42be      	cmp	r6, r7
 800833a:	d900      	bls.n	800833e <__ssputs_r+0x86>
 800833c:	463e      	mov	r6, r7
 800833e:	6820      	ldr	r0, [r4, #0]
 8008340:	4632      	mov	r2, r6
 8008342:	4641      	mov	r1, r8
 8008344:	f000 fab6 	bl	80088b4 <memmove>
 8008348:	68a3      	ldr	r3, [r4, #8]
 800834a:	1b9b      	subs	r3, r3, r6
 800834c:	60a3      	str	r3, [r4, #8]
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	4433      	add	r3, r6
 8008352:	6023      	str	r3, [r4, #0]
 8008354:	2000      	movs	r0, #0
 8008356:	e7db      	b.n	8008310 <__ssputs_r+0x58>
 8008358:	462a      	mov	r2, r5
 800835a:	f000 fba5 	bl	8008aa8 <_realloc_r>
 800835e:	4606      	mov	r6, r0
 8008360:	2800      	cmp	r0, #0
 8008362:	d1e1      	bne.n	8008328 <__ssputs_r+0x70>
 8008364:	6921      	ldr	r1, [r4, #16]
 8008366:	4650      	mov	r0, sl
 8008368:	f000 fabe 	bl	80088e8 <_free_r>
 800836c:	e7c7      	b.n	80082fe <__ssputs_r+0x46>
	...

08008370 <_svfiprintf_r>:
 8008370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008374:	4698      	mov	r8, r3
 8008376:	898b      	ldrh	r3, [r1, #12]
 8008378:	061b      	lsls	r3, r3, #24
 800837a:	b09d      	sub	sp, #116	; 0x74
 800837c:	4607      	mov	r7, r0
 800837e:	460d      	mov	r5, r1
 8008380:	4614      	mov	r4, r2
 8008382:	d50e      	bpl.n	80083a2 <_svfiprintf_r+0x32>
 8008384:	690b      	ldr	r3, [r1, #16]
 8008386:	b963      	cbnz	r3, 80083a2 <_svfiprintf_r+0x32>
 8008388:	2140      	movs	r1, #64	; 0x40
 800838a:	f000 fb19 	bl	80089c0 <_malloc_r>
 800838e:	6028      	str	r0, [r5, #0]
 8008390:	6128      	str	r0, [r5, #16]
 8008392:	b920      	cbnz	r0, 800839e <_svfiprintf_r+0x2e>
 8008394:	230c      	movs	r3, #12
 8008396:	603b      	str	r3, [r7, #0]
 8008398:	f04f 30ff 	mov.w	r0, #4294967295
 800839c:	e0d1      	b.n	8008542 <_svfiprintf_r+0x1d2>
 800839e:	2340      	movs	r3, #64	; 0x40
 80083a0:	616b      	str	r3, [r5, #20]
 80083a2:	2300      	movs	r3, #0
 80083a4:	9309      	str	r3, [sp, #36]	; 0x24
 80083a6:	2320      	movs	r3, #32
 80083a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80083b0:	2330      	movs	r3, #48	; 0x30
 80083b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800855c <_svfiprintf_r+0x1ec>
 80083b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083ba:	f04f 0901 	mov.w	r9, #1
 80083be:	4623      	mov	r3, r4
 80083c0:	469a      	mov	sl, r3
 80083c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083c6:	b10a      	cbz	r2, 80083cc <_svfiprintf_r+0x5c>
 80083c8:	2a25      	cmp	r2, #37	; 0x25
 80083ca:	d1f9      	bne.n	80083c0 <_svfiprintf_r+0x50>
 80083cc:	ebba 0b04 	subs.w	fp, sl, r4
 80083d0:	d00b      	beq.n	80083ea <_svfiprintf_r+0x7a>
 80083d2:	465b      	mov	r3, fp
 80083d4:	4622      	mov	r2, r4
 80083d6:	4629      	mov	r1, r5
 80083d8:	4638      	mov	r0, r7
 80083da:	f7ff ff6d 	bl	80082b8 <__ssputs_r>
 80083de:	3001      	adds	r0, #1
 80083e0:	f000 80aa 	beq.w	8008538 <_svfiprintf_r+0x1c8>
 80083e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083e6:	445a      	add	r2, fp
 80083e8:	9209      	str	r2, [sp, #36]	; 0x24
 80083ea:	f89a 3000 	ldrb.w	r3, [sl]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 80a2 	beq.w	8008538 <_svfiprintf_r+0x1c8>
 80083f4:	2300      	movs	r3, #0
 80083f6:	f04f 32ff 	mov.w	r2, #4294967295
 80083fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083fe:	f10a 0a01 	add.w	sl, sl, #1
 8008402:	9304      	str	r3, [sp, #16]
 8008404:	9307      	str	r3, [sp, #28]
 8008406:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800840a:	931a      	str	r3, [sp, #104]	; 0x68
 800840c:	4654      	mov	r4, sl
 800840e:	2205      	movs	r2, #5
 8008410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008414:	4851      	ldr	r0, [pc, #324]	; (800855c <_svfiprintf_r+0x1ec>)
 8008416:	f7f7 feeb 	bl	80001f0 <memchr>
 800841a:	9a04      	ldr	r2, [sp, #16]
 800841c:	b9d8      	cbnz	r0, 8008456 <_svfiprintf_r+0xe6>
 800841e:	06d0      	lsls	r0, r2, #27
 8008420:	bf44      	itt	mi
 8008422:	2320      	movmi	r3, #32
 8008424:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008428:	0711      	lsls	r1, r2, #28
 800842a:	bf44      	itt	mi
 800842c:	232b      	movmi	r3, #43	; 0x2b
 800842e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008432:	f89a 3000 	ldrb.w	r3, [sl]
 8008436:	2b2a      	cmp	r3, #42	; 0x2a
 8008438:	d015      	beq.n	8008466 <_svfiprintf_r+0xf6>
 800843a:	9a07      	ldr	r2, [sp, #28]
 800843c:	4654      	mov	r4, sl
 800843e:	2000      	movs	r0, #0
 8008440:	f04f 0c0a 	mov.w	ip, #10
 8008444:	4621      	mov	r1, r4
 8008446:	f811 3b01 	ldrb.w	r3, [r1], #1
 800844a:	3b30      	subs	r3, #48	; 0x30
 800844c:	2b09      	cmp	r3, #9
 800844e:	d94e      	bls.n	80084ee <_svfiprintf_r+0x17e>
 8008450:	b1b0      	cbz	r0, 8008480 <_svfiprintf_r+0x110>
 8008452:	9207      	str	r2, [sp, #28]
 8008454:	e014      	b.n	8008480 <_svfiprintf_r+0x110>
 8008456:	eba0 0308 	sub.w	r3, r0, r8
 800845a:	fa09 f303 	lsl.w	r3, r9, r3
 800845e:	4313      	orrs	r3, r2
 8008460:	9304      	str	r3, [sp, #16]
 8008462:	46a2      	mov	sl, r4
 8008464:	e7d2      	b.n	800840c <_svfiprintf_r+0x9c>
 8008466:	9b03      	ldr	r3, [sp, #12]
 8008468:	1d19      	adds	r1, r3, #4
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	9103      	str	r1, [sp, #12]
 800846e:	2b00      	cmp	r3, #0
 8008470:	bfbb      	ittet	lt
 8008472:	425b      	neglt	r3, r3
 8008474:	f042 0202 	orrlt.w	r2, r2, #2
 8008478:	9307      	strge	r3, [sp, #28]
 800847a:	9307      	strlt	r3, [sp, #28]
 800847c:	bfb8      	it	lt
 800847e:	9204      	strlt	r2, [sp, #16]
 8008480:	7823      	ldrb	r3, [r4, #0]
 8008482:	2b2e      	cmp	r3, #46	; 0x2e
 8008484:	d10c      	bne.n	80084a0 <_svfiprintf_r+0x130>
 8008486:	7863      	ldrb	r3, [r4, #1]
 8008488:	2b2a      	cmp	r3, #42	; 0x2a
 800848a:	d135      	bne.n	80084f8 <_svfiprintf_r+0x188>
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	1d1a      	adds	r2, r3, #4
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	9203      	str	r2, [sp, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	bfb8      	it	lt
 8008498:	f04f 33ff 	movlt.w	r3, #4294967295
 800849c:	3402      	adds	r4, #2
 800849e:	9305      	str	r3, [sp, #20]
 80084a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800856c <_svfiprintf_r+0x1fc>
 80084a4:	7821      	ldrb	r1, [r4, #0]
 80084a6:	2203      	movs	r2, #3
 80084a8:	4650      	mov	r0, sl
 80084aa:	f7f7 fea1 	bl	80001f0 <memchr>
 80084ae:	b140      	cbz	r0, 80084c2 <_svfiprintf_r+0x152>
 80084b0:	2340      	movs	r3, #64	; 0x40
 80084b2:	eba0 000a 	sub.w	r0, r0, sl
 80084b6:	fa03 f000 	lsl.w	r0, r3, r0
 80084ba:	9b04      	ldr	r3, [sp, #16]
 80084bc:	4303      	orrs	r3, r0
 80084be:	3401      	adds	r4, #1
 80084c0:	9304      	str	r3, [sp, #16]
 80084c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084c6:	4826      	ldr	r0, [pc, #152]	; (8008560 <_svfiprintf_r+0x1f0>)
 80084c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084cc:	2206      	movs	r2, #6
 80084ce:	f7f7 fe8f 	bl	80001f0 <memchr>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	d038      	beq.n	8008548 <_svfiprintf_r+0x1d8>
 80084d6:	4b23      	ldr	r3, [pc, #140]	; (8008564 <_svfiprintf_r+0x1f4>)
 80084d8:	bb1b      	cbnz	r3, 8008522 <_svfiprintf_r+0x1b2>
 80084da:	9b03      	ldr	r3, [sp, #12]
 80084dc:	3307      	adds	r3, #7
 80084de:	f023 0307 	bic.w	r3, r3, #7
 80084e2:	3308      	adds	r3, #8
 80084e4:	9303      	str	r3, [sp, #12]
 80084e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e8:	4433      	add	r3, r6
 80084ea:	9309      	str	r3, [sp, #36]	; 0x24
 80084ec:	e767      	b.n	80083be <_svfiprintf_r+0x4e>
 80084ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80084f2:	460c      	mov	r4, r1
 80084f4:	2001      	movs	r0, #1
 80084f6:	e7a5      	b.n	8008444 <_svfiprintf_r+0xd4>
 80084f8:	2300      	movs	r3, #0
 80084fa:	3401      	adds	r4, #1
 80084fc:	9305      	str	r3, [sp, #20]
 80084fe:	4619      	mov	r1, r3
 8008500:	f04f 0c0a 	mov.w	ip, #10
 8008504:	4620      	mov	r0, r4
 8008506:	f810 2b01 	ldrb.w	r2, [r0], #1
 800850a:	3a30      	subs	r2, #48	; 0x30
 800850c:	2a09      	cmp	r2, #9
 800850e:	d903      	bls.n	8008518 <_svfiprintf_r+0x1a8>
 8008510:	2b00      	cmp	r3, #0
 8008512:	d0c5      	beq.n	80084a0 <_svfiprintf_r+0x130>
 8008514:	9105      	str	r1, [sp, #20]
 8008516:	e7c3      	b.n	80084a0 <_svfiprintf_r+0x130>
 8008518:	fb0c 2101 	mla	r1, ip, r1, r2
 800851c:	4604      	mov	r4, r0
 800851e:	2301      	movs	r3, #1
 8008520:	e7f0      	b.n	8008504 <_svfiprintf_r+0x194>
 8008522:	ab03      	add	r3, sp, #12
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	462a      	mov	r2, r5
 8008528:	4b0f      	ldr	r3, [pc, #60]	; (8008568 <_svfiprintf_r+0x1f8>)
 800852a:	a904      	add	r1, sp, #16
 800852c:	4638      	mov	r0, r7
 800852e:	f3af 8000 	nop.w
 8008532:	1c42      	adds	r2, r0, #1
 8008534:	4606      	mov	r6, r0
 8008536:	d1d6      	bne.n	80084e6 <_svfiprintf_r+0x176>
 8008538:	89ab      	ldrh	r3, [r5, #12]
 800853a:	065b      	lsls	r3, r3, #25
 800853c:	f53f af2c 	bmi.w	8008398 <_svfiprintf_r+0x28>
 8008540:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008542:	b01d      	add	sp, #116	; 0x74
 8008544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008548:	ab03      	add	r3, sp, #12
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	462a      	mov	r2, r5
 800854e:	4b06      	ldr	r3, [pc, #24]	; (8008568 <_svfiprintf_r+0x1f8>)
 8008550:	a904      	add	r1, sp, #16
 8008552:	4638      	mov	r0, r7
 8008554:	f000 f87a 	bl	800864c <_printf_i>
 8008558:	e7eb      	b.n	8008532 <_svfiprintf_r+0x1c2>
 800855a:	bf00      	nop
 800855c:	0800a65c 	.word	0x0800a65c
 8008560:	0800a666 	.word	0x0800a666
 8008564:	00000000 	.word	0x00000000
 8008568:	080082b9 	.word	0x080082b9
 800856c:	0800a662 	.word	0x0800a662

08008570 <_printf_common>:
 8008570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008574:	4616      	mov	r6, r2
 8008576:	4699      	mov	r9, r3
 8008578:	688a      	ldr	r2, [r1, #8]
 800857a:	690b      	ldr	r3, [r1, #16]
 800857c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008580:	4293      	cmp	r3, r2
 8008582:	bfb8      	it	lt
 8008584:	4613      	movlt	r3, r2
 8008586:	6033      	str	r3, [r6, #0]
 8008588:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800858c:	4607      	mov	r7, r0
 800858e:	460c      	mov	r4, r1
 8008590:	b10a      	cbz	r2, 8008596 <_printf_common+0x26>
 8008592:	3301      	adds	r3, #1
 8008594:	6033      	str	r3, [r6, #0]
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	0699      	lsls	r1, r3, #26
 800859a:	bf42      	ittt	mi
 800859c:	6833      	ldrmi	r3, [r6, #0]
 800859e:	3302      	addmi	r3, #2
 80085a0:	6033      	strmi	r3, [r6, #0]
 80085a2:	6825      	ldr	r5, [r4, #0]
 80085a4:	f015 0506 	ands.w	r5, r5, #6
 80085a8:	d106      	bne.n	80085b8 <_printf_common+0x48>
 80085aa:	f104 0a19 	add.w	sl, r4, #25
 80085ae:	68e3      	ldr	r3, [r4, #12]
 80085b0:	6832      	ldr	r2, [r6, #0]
 80085b2:	1a9b      	subs	r3, r3, r2
 80085b4:	42ab      	cmp	r3, r5
 80085b6:	dc26      	bgt.n	8008606 <_printf_common+0x96>
 80085b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085bc:	1e13      	subs	r3, r2, #0
 80085be:	6822      	ldr	r2, [r4, #0]
 80085c0:	bf18      	it	ne
 80085c2:	2301      	movne	r3, #1
 80085c4:	0692      	lsls	r2, r2, #26
 80085c6:	d42b      	bmi.n	8008620 <_printf_common+0xb0>
 80085c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085cc:	4649      	mov	r1, r9
 80085ce:	4638      	mov	r0, r7
 80085d0:	47c0      	blx	r8
 80085d2:	3001      	adds	r0, #1
 80085d4:	d01e      	beq.n	8008614 <_printf_common+0xa4>
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	68e5      	ldr	r5, [r4, #12]
 80085da:	6832      	ldr	r2, [r6, #0]
 80085dc:	f003 0306 	and.w	r3, r3, #6
 80085e0:	2b04      	cmp	r3, #4
 80085e2:	bf08      	it	eq
 80085e4:	1aad      	subeq	r5, r5, r2
 80085e6:	68a3      	ldr	r3, [r4, #8]
 80085e8:	6922      	ldr	r2, [r4, #16]
 80085ea:	bf0c      	ite	eq
 80085ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085f0:	2500      	movne	r5, #0
 80085f2:	4293      	cmp	r3, r2
 80085f4:	bfc4      	itt	gt
 80085f6:	1a9b      	subgt	r3, r3, r2
 80085f8:	18ed      	addgt	r5, r5, r3
 80085fa:	2600      	movs	r6, #0
 80085fc:	341a      	adds	r4, #26
 80085fe:	42b5      	cmp	r5, r6
 8008600:	d11a      	bne.n	8008638 <_printf_common+0xc8>
 8008602:	2000      	movs	r0, #0
 8008604:	e008      	b.n	8008618 <_printf_common+0xa8>
 8008606:	2301      	movs	r3, #1
 8008608:	4652      	mov	r2, sl
 800860a:	4649      	mov	r1, r9
 800860c:	4638      	mov	r0, r7
 800860e:	47c0      	blx	r8
 8008610:	3001      	adds	r0, #1
 8008612:	d103      	bne.n	800861c <_printf_common+0xac>
 8008614:	f04f 30ff 	mov.w	r0, #4294967295
 8008618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800861c:	3501      	adds	r5, #1
 800861e:	e7c6      	b.n	80085ae <_printf_common+0x3e>
 8008620:	18e1      	adds	r1, r4, r3
 8008622:	1c5a      	adds	r2, r3, #1
 8008624:	2030      	movs	r0, #48	; 0x30
 8008626:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800862a:	4422      	add	r2, r4
 800862c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008630:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008634:	3302      	adds	r3, #2
 8008636:	e7c7      	b.n	80085c8 <_printf_common+0x58>
 8008638:	2301      	movs	r3, #1
 800863a:	4622      	mov	r2, r4
 800863c:	4649      	mov	r1, r9
 800863e:	4638      	mov	r0, r7
 8008640:	47c0      	blx	r8
 8008642:	3001      	adds	r0, #1
 8008644:	d0e6      	beq.n	8008614 <_printf_common+0xa4>
 8008646:	3601      	adds	r6, #1
 8008648:	e7d9      	b.n	80085fe <_printf_common+0x8e>
	...

0800864c <_printf_i>:
 800864c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008650:	7e0f      	ldrb	r7, [r1, #24]
 8008652:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008654:	2f78      	cmp	r7, #120	; 0x78
 8008656:	4691      	mov	r9, r2
 8008658:	4680      	mov	r8, r0
 800865a:	460c      	mov	r4, r1
 800865c:	469a      	mov	sl, r3
 800865e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008662:	d807      	bhi.n	8008674 <_printf_i+0x28>
 8008664:	2f62      	cmp	r7, #98	; 0x62
 8008666:	d80a      	bhi.n	800867e <_printf_i+0x32>
 8008668:	2f00      	cmp	r7, #0
 800866a:	f000 80d8 	beq.w	800881e <_printf_i+0x1d2>
 800866e:	2f58      	cmp	r7, #88	; 0x58
 8008670:	f000 80a3 	beq.w	80087ba <_printf_i+0x16e>
 8008674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800867c:	e03a      	b.n	80086f4 <_printf_i+0xa8>
 800867e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008682:	2b15      	cmp	r3, #21
 8008684:	d8f6      	bhi.n	8008674 <_printf_i+0x28>
 8008686:	a101      	add	r1, pc, #4	; (adr r1, 800868c <_printf_i+0x40>)
 8008688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800868c:	080086e5 	.word	0x080086e5
 8008690:	080086f9 	.word	0x080086f9
 8008694:	08008675 	.word	0x08008675
 8008698:	08008675 	.word	0x08008675
 800869c:	08008675 	.word	0x08008675
 80086a0:	08008675 	.word	0x08008675
 80086a4:	080086f9 	.word	0x080086f9
 80086a8:	08008675 	.word	0x08008675
 80086ac:	08008675 	.word	0x08008675
 80086b0:	08008675 	.word	0x08008675
 80086b4:	08008675 	.word	0x08008675
 80086b8:	08008805 	.word	0x08008805
 80086bc:	08008729 	.word	0x08008729
 80086c0:	080087e7 	.word	0x080087e7
 80086c4:	08008675 	.word	0x08008675
 80086c8:	08008675 	.word	0x08008675
 80086cc:	08008827 	.word	0x08008827
 80086d0:	08008675 	.word	0x08008675
 80086d4:	08008729 	.word	0x08008729
 80086d8:	08008675 	.word	0x08008675
 80086dc:	08008675 	.word	0x08008675
 80086e0:	080087ef 	.word	0x080087ef
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	1d1a      	adds	r2, r3, #4
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	602a      	str	r2, [r5, #0]
 80086ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086f4:	2301      	movs	r3, #1
 80086f6:	e0a3      	b.n	8008840 <_printf_i+0x1f4>
 80086f8:	6820      	ldr	r0, [r4, #0]
 80086fa:	6829      	ldr	r1, [r5, #0]
 80086fc:	0606      	lsls	r6, r0, #24
 80086fe:	f101 0304 	add.w	r3, r1, #4
 8008702:	d50a      	bpl.n	800871a <_printf_i+0xce>
 8008704:	680e      	ldr	r6, [r1, #0]
 8008706:	602b      	str	r3, [r5, #0]
 8008708:	2e00      	cmp	r6, #0
 800870a:	da03      	bge.n	8008714 <_printf_i+0xc8>
 800870c:	232d      	movs	r3, #45	; 0x2d
 800870e:	4276      	negs	r6, r6
 8008710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008714:	485e      	ldr	r0, [pc, #376]	; (8008890 <_printf_i+0x244>)
 8008716:	230a      	movs	r3, #10
 8008718:	e019      	b.n	800874e <_printf_i+0x102>
 800871a:	680e      	ldr	r6, [r1, #0]
 800871c:	602b      	str	r3, [r5, #0]
 800871e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008722:	bf18      	it	ne
 8008724:	b236      	sxthne	r6, r6
 8008726:	e7ef      	b.n	8008708 <_printf_i+0xbc>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	6820      	ldr	r0, [r4, #0]
 800872c:	1d19      	adds	r1, r3, #4
 800872e:	6029      	str	r1, [r5, #0]
 8008730:	0601      	lsls	r1, r0, #24
 8008732:	d501      	bpl.n	8008738 <_printf_i+0xec>
 8008734:	681e      	ldr	r6, [r3, #0]
 8008736:	e002      	b.n	800873e <_printf_i+0xf2>
 8008738:	0646      	lsls	r6, r0, #25
 800873a:	d5fb      	bpl.n	8008734 <_printf_i+0xe8>
 800873c:	881e      	ldrh	r6, [r3, #0]
 800873e:	4854      	ldr	r0, [pc, #336]	; (8008890 <_printf_i+0x244>)
 8008740:	2f6f      	cmp	r7, #111	; 0x6f
 8008742:	bf0c      	ite	eq
 8008744:	2308      	moveq	r3, #8
 8008746:	230a      	movne	r3, #10
 8008748:	2100      	movs	r1, #0
 800874a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800874e:	6865      	ldr	r5, [r4, #4]
 8008750:	60a5      	str	r5, [r4, #8]
 8008752:	2d00      	cmp	r5, #0
 8008754:	bfa2      	ittt	ge
 8008756:	6821      	ldrge	r1, [r4, #0]
 8008758:	f021 0104 	bicge.w	r1, r1, #4
 800875c:	6021      	strge	r1, [r4, #0]
 800875e:	b90e      	cbnz	r6, 8008764 <_printf_i+0x118>
 8008760:	2d00      	cmp	r5, #0
 8008762:	d04d      	beq.n	8008800 <_printf_i+0x1b4>
 8008764:	4615      	mov	r5, r2
 8008766:	fbb6 f1f3 	udiv	r1, r6, r3
 800876a:	fb03 6711 	mls	r7, r3, r1, r6
 800876e:	5dc7      	ldrb	r7, [r0, r7]
 8008770:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008774:	4637      	mov	r7, r6
 8008776:	42bb      	cmp	r3, r7
 8008778:	460e      	mov	r6, r1
 800877a:	d9f4      	bls.n	8008766 <_printf_i+0x11a>
 800877c:	2b08      	cmp	r3, #8
 800877e:	d10b      	bne.n	8008798 <_printf_i+0x14c>
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	07de      	lsls	r6, r3, #31
 8008784:	d508      	bpl.n	8008798 <_printf_i+0x14c>
 8008786:	6923      	ldr	r3, [r4, #16]
 8008788:	6861      	ldr	r1, [r4, #4]
 800878a:	4299      	cmp	r1, r3
 800878c:	bfde      	ittt	le
 800878e:	2330      	movle	r3, #48	; 0x30
 8008790:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008794:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008798:	1b52      	subs	r2, r2, r5
 800879a:	6122      	str	r2, [r4, #16]
 800879c:	f8cd a000 	str.w	sl, [sp]
 80087a0:	464b      	mov	r3, r9
 80087a2:	aa03      	add	r2, sp, #12
 80087a4:	4621      	mov	r1, r4
 80087a6:	4640      	mov	r0, r8
 80087a8:	f7ff fee2 	bl	8008570 <_printf_common>
 80087ac:	3001      	adds	r0, #1
 80087ae:	d14c      	bne.n	800884a <_printf_i+0x1fe>
 80087b0:	f04f 30ff 	mov.w	r0, #4294967295
 80087b4:	b004      	add	sp, #16
 80087b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ba:	4835      	ldr	r0, [pc, #212]	; (8008890 <_printf_i+0x244>)
 80087bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80087c0:	6829      	ldr	r1, [r5, #0]
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80087c8:	6029      	str	r1, [r5, #0]
 80087ca:	061d      	lsls	r5, r3, #24
 80087cc:	d514      	bpl.n	80087f8 <_printf_i+0x1ac>
 80087ce:	07df      	lsls	r7, r3, #31
 80087d0:	bf44      	itt	mi
 80087d2:	f043 0320 	orrmi.w	r3, r3, #32
 80087d6:	6023      	strmi	r3, [r4, #0]
 80087d8:	b91e      	cbnz	r6, 80087e2 <_printf_i+0x196>
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	f023 0320 	bic.w	r3, r3, #32
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	2310      	movs	r3, #16
 80087e4:	e7b0      	b.n	8008748 <_printf_i+0xfc>
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	f043 0320 	orr.w	r3, r3, #32
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	2378      	movs	r3, #120	; 0x78
 80087f0:	4828      	ldr	r0, [pc, #160]	; (8008894 <_printf_i+0x248>)
 80087f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087f6:	e7e3      	b.n	80087c0 <_printf_i+0x174>
 80087f8:	0659      	lsls	r1, r3, #25
 80087fa:	bf48      	it	mi
 80087fc:	b2b6      	uxthmi	r6, r6
 80087fe:	e7e6      	b.n	80087ce <_printf_i+0x182>
 8008800:	4615      	mov	r5, r2
 8008802:	e7bb      	b.n	800877c <_printf_i+0x130>
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	6826      	ldr	r6, [r4, #0]
 8008808:	6961      	ldr	r1, [r4, #20]
 800880a:	1d18      	adds	r0, r3, #4
 800880c:	6028      	str	r0, [r5, #0]
 800880e:	0635      	lsls	r5, r6, #24
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	d501      	bpl.n	8008818 <_printf_i+0x1cc>
 8008814:	6019      	str	r1, [r3, #0]
 8008816:	e002      	b.n	800881e <_printf_i+0x1d2>
 8008818:	0670      	lsls	r0, r6, #25
 800881a:	d5fb      	bpl.n	8008814 <_printf_i+0x1c8>
 800881c:	8019      	strh	r1, [r3, #0]
 800881e:	2300      	movs	r3, #0
 8008820:	6123      	str	r3, [r4, #16]
 8008822:	4615      	mov	r5, r2
 8008824:	e7ba      	b.n	800879c <_printf_i+0x150>
 8008826:	682b      	ldr	r3, [r5, #0]
 8008828:	1d1a      	adds	r2, r3, #4
 800882a:	602a      	str	r2, [r5, #0]
 800882c:	681d      	ldr	r5, [r3, #0]
 800882e:	6862      	ldr	r2, [r4, #4]
 8008830:	2100      	movs	r1, #0
 8008832:	4628      	mov	r0, r5
 8008834:	f7f7 fcdc 	bl	80001f0 <memchr>
 8008838:	b108      	cbz	r0, 800883e <_printf_i+0x1f2>
 800883a:	1b40      	subs	r0, r0, r5
 800883c:	6060      	str	r0, [r4, #4]
 800883e:	6863      	ldr	r3, [r4, #4]
 8008840:	6123      	str	r3, [r4, #16]
 8008842:	2300      	movs	r3, #0
 8008844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008848:	e7a8      	b.n	800879c <_printf_i+0x150>
 800884a:	6923      	ldr	r3, [r4, #16]
 800884c:	462a      	mov	r2, r5
 800884e:	4649      	mov	r1, r9
 8008850:	4640      	mov	r0, r8
 8008852:	47d0      	blx	sl
 8008854:	3001      	adds	r0, #1
 8008856:	d0ab      	beq.n	80087b0 <_printf_i+0x164>
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	079b      	lsls	r3, r3, #30
 800885c:	d413      	bmi.n	8008886 <_printf_i+0x23a>
 800885e:	68e0      	ldr	r0, [r4, #12]
 8008860:	9b03      	ldr	r3, [sp, #12]
 8008862:	4298      	cmp	r0, r3
 8008864:	bfb8      	it	lt
 8008866:	4618      	movlt	r0, r3
 8008868:	e7a4      	b.n	80087b4 <_printf_i+0x168>
 800886a:	2301      	movs	r3, #1
 800886c:	4632      	mov	r2, r6
 800886e:	4649      	mov	r1, r9
 8008870:	4640      	mov	r0, r8
 8008872:	47d0      	blx	sl
 8008874:	3001      	adds	r0, #1
 8008876:	d09b      	beq.n	80087b0 <_printf_i+0x164>
 8008878:	3501      	adds	r5, #1
 800887a:	68e3      	ldr	r3, [r4, #12]
 800887c:	9903      	ldr	r1, [sp, #12]
 800887e:	1a5b      	subs	r3, r3, r1
 8008880:	42ab      	cmp	r3, r5
 8008882:	dcf2      	bgt.n	800886a <_printf_i+0x21e>
 8008884:	e7eb      	b.n	800885e <_printf_i+0x212>
 8008886:	2500      	movs	r5, #0
 8008888:	f104 0619 	add.w	r6, r4, #25
 800888c:	e7f5      	b.n	800887a <_printf_i+0x22e>
 800888e:	bf00      	nop
 8008890:	0800a66d 	.word	0x0800a66d
 8008894:	0800a67e 	.word	0x0800a67e

08008898 <memcpy>:
 8008898:	440a      	add	r2, r1
 800889a:	4291      	cmp	r1, r2
 800889c:	f100 33ff 	add.w	r3, r0, #4294967295
 80088a0:	d100      	bne.n	80088a4 <memcpy+0xc>
 80088a2:	4770      	bx	lr
 80088a4:	b510      	push	{r4, lr}
 80088a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ae:	4291      	cmp	r1, r2
 80088b0:	d1f9      	bne.n	80088a6 <memcpy+0xe>
 80088b2:	bd10      	pop	{r4, pc}

080088b4 <memmove>:
 80088b4:	4288      	cmp	r0, r1
 80088b6:	b510      	push	{r4, lr}
 80088b8:	eb01 0402 	add.w	r4, r1, r2
 80088bc:	d902      	bls.n	80088c4 <memmove+0x10>
 80088be:	4284      	cmp	r4, r0
 80088c0:	4623      	mov	r3, r4
 80088c2:	d807      	bhi.n	80088d4 <memmove+0x20>
 80088c4:	1e43      	subs	r3, r0, #1
 80088c6:	42a1      	cmp	r1, r4
 80088c8:	d008      	beq.n	80088dc <memmove+0x28>
 80088ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088d2:	e7f8      	b.n	80088c6 <memmove+0x12>
 80088d4:	4402      	add	r2, r0
 80088d6:	4601      	mov	r1, r0
 80088d8:	428a      	cmp	r2, r1
 80088da:	d100      	bne.n	80088de <memmove+0x2a>
 80088dc:	bd10      	pop	{r4, pc}
 80088de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088e6:	e7f7      	b.n	80088d8 <memmove+0x24>

080088e8 <_free_r>:
 80088e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088ea:	2900      	cmp	r1, #0
 80088ec:	d044      	beq.n	8008978 <_free_r+0x90>
 80088ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088f2:	9001      	str	r0, [sp, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f1a1 0404 	sub.w	r4, r1, #4
 80088fa:	bfb8      	it	lt
 80088fc:	18e4      	addlt	r4, r4, r3
 80088fe:	f000 f913 	bl	8008b28 <__malloc_lock>
 8008902:	4a1e      	ldr	r2, [pc, #120]	; (800897c <_free_r+0x94>)
 8008904:	9801      	ldr	r0, [sp, #4]
 8008906:	6813      	ldr	r3, [r2, #0]
 8008908:	b933      	cbnz	r3, 8008918 <_free_r+0x30>
 800890a:	6063      	str	r3, [r4, #4]
 800890c:	6014      	str	r4, [r2, #0]
 800890e:	b003      	add	sp, #12
 8008910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008914:	f000 b90e 	b.w	8008b34 <__malloc_unlock>
 8008918:	42a3      	cmp	r3, r4
 800891a:	d908      	bls.n	800892e <_free_r+0x46>
 800891c:	6825      	ldr	r5, [r4, #0]
 800891e:	1961      	adds	r1, r4, r5
 8008920:	428b      	cmp	r3, r1
 8008922:	bf01      	itttt	eq
 8008924:	6819      	ldreq	r1, [r3, #0]
 8008926:	685b      	ldreq	r3, [r3, #4]
 8008928:	1949      	addeq	r1, r1, r5
 800892a:	6021      	streq	r1, [r4, #0]
 800892c:	e7ed      	b.n	800890a <_free_r+0x22>
 800892e:	461a      	mov	r2, r3
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	b10b      	cbz	r3, 8008938 <_free_r+0x50>
 8008934:	42a3      	cmp	r3, r4
 8008936:	d9fa      	bls.n	800892e <_free_r+0x46>
 8008938:	6811      	ldr	r1, [r2, #0]
 800893a:	1855      	adds	r5, r2, r1
 800893c:	42a5      	cmp	r5, r4
 800893e:	d10b      	bne.n	8008958 <_free_r+0x70>
 8008940:	6824      	ldr	r4, [r4, #0]
 8008942:	4421      	add	r1, r4
 8008944:	1854      	adds	r4, r2, r1
 8008946:	42a3      	cmp	r3, r4
 8008948:	6011      	str	r1, [r2, #0]
 800894a:	d1e0      	bne.n	800890e <_free_r+0x26>
 800894c:	681c      	ldr	r4, [r3, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	6053      	str	r3, [r2, #4]
 8008952:	4421      	add	r1, r4
 8008954:	6011      	str	r1, [r2, #0]
 8008956:	e7da      	b.n	800890e <_free_r+0x26>
 8008958:	d902      	bls.n	8008960 <_free_r+0x78>
 800895a:	230c      	movs	r3, #12
 800895c:	6003      	str	r3, [r0, #0]
 800895e:	e7d6      	b.n	800890e <_free_r+0x26>
 8008960:	6825      	ldr	r5, [r4, #0]
 8008962:	1961      	adds	r1, r4, r5
 8008964:	428b      	cmp	r3, r1
 8008966:	bf04      	itt	eq
 8008968:	6819      	ldreq	r1, [r3, #0]
 800896a:	685b      	ldreq	r3, [r3, #4]
 800896c:	6063      	str	r3, [r4, #4]
 800896e:	bf04      	itt	eq
 8008970:	1949      	addeq	r1, r1, r5
 8008972:	6021      	streq	r1, [r4, #0]
 8008974:	6054      	str	r4, [r2, #4]
 8008976:	e7ca      	b.n	800890e <_free_r+0x26>
 8008978:	b003      	add	sp, #12
 800897a:	bd30      	pop	{r4, r5, pc}
 800897c:	2000066c 	.word	0x2000066c

08008980 <sbrk_aligned>:
 8008980:	b570      	push	{r4, r5, r6, lr}
 8008982:	4e0e      	ldr	r6, [pc, #56]	; (80089bc <sbrk_aligned+0x3c>)
 8008984:	460c      	mov	r4, r1
 8008986:	6831      	ldr	r1, [r6, #0]
 8008988:	4605      	mov	r5, r0
 800898a:	b911      	cbnz	r1, 8008992 <sbrk_aligned+0x12>
 800898c:	f000 f8bc 	bl	8008b08 <_sbrk_r>
 8008990:	6030      	str	r0, [r6, #0]
 8008992:	4621      	mov	r1, r4
 8008994:	4628      	mov	r0, r5
 8008996:	f000 f8b7 	bl	8008b08 <_sbrk_r>
 800899a:	1c43      	adds	r3, r0, #1
 800899c:	d00a      	beq.n	80089b4 <sbrk_aligned+0x34>
 800899e:	1cc4      	adds	r4, r0, #3
 80089a0:	f024 0403 	bic.w	r4, r4, #3
 80089a4:	42a0      	cmp	r0, r4
 80089a6:	d007      	beq.n	80089b8 <sbrk_aligned+0x38>
 80089a8:	1a21      	subs	r1, r4, r0
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 f8ac 	bl	8008b08 <_sbrk_r>
 80089b0:	3001      	adds	r0, #1
 80089b2:	d101      	bne.n	80089b8 <sbrk_aligned+0x38>
 80089b4:	f04f 34ff 	mov.w	r4, #4294967295
 80089b8:	4620      	mov	r0, r4
 80089ba:	bd70      	pop	{r4, r5, r6, pc}
 80089bc:	20000670 	.word	0x20000670

080089c0 <_malloc_r>:
 80089c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c4:	1ccd      	adds	r5, r1, #3
 80089c6:	f025 0503 	bic.w	r5, r5, #3
 80089ca:	3508      	adds	r5, #8
 80089cc:	2d0c      	cmp	r5, #12
 80089ce:	bf38      	it	cc
 80089d0:	250c      	movcc	r5, #12
 80089d2:	2d00      	cmp	r5, #0
 80089d4:	4607      	mov	r7, r0
 80089d6:	db01      	blt.n	80089dc <_malloc_r+0x1c>
 80089d8:	42a9      	cmp	r1, r5
 80089da:	d905      	bls.n	80089e8 <_malloc_r+0x28>
 80089dc:	230c      	movs	r3, #12
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	2600      	movs	r6, #0
 80089e2:	4630      	mov	r0, r6
 80089e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e8:	4e2e      	ldr	r6, [pc, #184]	; (8008aa4 <_malloc_r+0xe4>)
 80089ea:	f000 f89d 	bl	8008b28 <__malloc_lock>
 80089ee:	6833      	ldr	r3, [r6, #0]
 80089f0:	461c      	mov	r4, r3
 80089f2:	bb34      	cbnz	r4, 8008a42 <_malloc_r+0x82>
 80089f4:	4629      	mov	r1, r5
 80089f6:	4638      	mov	r0, r7
 80089f8:	f7ff ffc2 	bl	8008980 <sbrk_aligned>
 80089fc:	1c43      	adds	r3, r0, #1
 80089fe:	4604      	mov	r4, r0
 8008a00:	d14d      	bne.n	8008a9e <_malloc_r+0xde>
 8008a02:	6834      	ldr	r4, [r6, #0]
 8008a04:	4626      	mov	r6, r4
 8008a06:	2e00      	cmp	r6, #0
 8008a08:	d140      	bne.n	8008a8c <_malloc_r+0xcc>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4638      	mov	r0, r7
 8008a10:	eb04 0803 	add.w	r8, r4, r3
 8008a14:	f000 f878 	bl	8008b08 <_sbrk_r>
 8008a18:	4580      	cmp	r8, r0
 8008a1a:	d13a      	bne.n	8008a92 <_malloc_r+0xd2>
 8008a1c:	6821      	ldr	r1, [r4, #0]
 8008a1e:	3503      	adds	r5, #3
 8008a20:	1a6d      	subs	r5, r5, r1
 8008a22:	f025 0503 	bic.w	r5, r5, #3
 8008a26:	3508      	adds	r5, #8
 8008a28:	2d0c      	cmp	r5, #12
 8008a2a:	bf38      	it	cc
 8008a2c:	250c      	movcc	r5, #12
 8008a2e:	4629      	mov	r1, r5
 8008a30:	4638      	mov	r0, r7
 8008a32:	f7ff ffa5 	bl	8008980 <sbrk_aligned>
 8008a36:	3001      	adds	r0, #1
 8008a38:	d02b      	beq.n	8008a92 <_malloc_r+0xd2>
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	442b      	add	r3, r5
 8008a3e:	6023      	str	r3, [r4, #0]
 8008a40:	e00e      	b.n	8008a60 <_malloc_r+0xa0>
 8008a42:	6822      	ldr	r2, [r4, #0]
 8008a44:	1b52      	subs	r2, r2, r5
 8008a46:	d41e      	bmi.n	8008a86 <_malloc_r+0xc6>
 8008a48:	2a0b      	cmp	r2, #11
 8008a4a:	d916      	bls.n	8008a7a <_malloc_r+0xba>
 8008a4c:	1961      	adds	r1, r4, r5
 8008a4e:	42a3      	cmp	r3, r4
 8008a50:	6025      	str	r5, [r4, #0]
 8008a52:	bf18      	it	ne
 8008a54:	6059      	strne	r1, [r3, #4]
 8008a56:	6863      	ldr	r3, [r4, #4]
 8008a58:	bf08      	it	eq
 8008a5a:	6031      	streq	r1, [r6, #0]
 8008a5c:	5162      	str	r2, [r4, r5]
 8008a5e:	604b      	str	r3, [r1, #4]
 8008a60:	4638      	mov	r0, r7
 8008a62:	f104 060b 	add.w	r6, r4, #11
 8008a66:	f000 f865 	bl	8008b34 <__malloc_unlock>
 8008a6a:	f026 0607 	bic.w	r6, r6, #7
 8008a6e:	1d23      	adds	r3, r4, #4
 8008a70:	1af2      	subs	r2, r6, r3
 8008a72:	d0b6      	beq.n	80089e2 <_malloc_r+0x22>
 8008a74:	1b9b      	subs	r3, r3, r6
 8008a76:	50a3      	str	r3, [r4, r2]
 8008a78:	e7b3      	b.n	80089e2 <_malloc_r+0x22>
 8008a7a:	6862      	ldr	r2, [r4, #4]
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	bf0c      	ite	eq
 8008a80:	6032      	streq	r2, [r6, #0]
 8008a82:	605a      	strne	r2, [r3, #4]
 8008a84:	e7ec      	b.n	8008a60 <_malloc_r+0xa0>
 8008a86:	4623      	mov	r3, r4
 8008a88:	6864      	ldr	r4, [r4, #4]
 8008a8a:	e7b2      	b.n	80089f2 <_malloc_r+0x32>
 8008a8c:	4634      	mov	r4, r6
 8008a8e:	6876      	ldr	r6, [r6, #4]
 8008a90:	e7b9      	b.n	8008a06 <_malloc_r+0x46>
 8008a92:	230c      	movs	r3, #12
 8008a94:	603b      	str	r3, [r7, #0]
 8008a96:	4638      	mov	r0, r7
 8008a98:	f000 f84c 	bl	8008b34 <__malloc_unlock>
 8008a9c:	e7a1      	b.n	80089e2 <_malloc_r+0x22>
 8008a9e:	6025      	str	r5, [r4, #0]
 8008aa0:	e7de      	b.n	8008a60 <_malloc_r+0xa0>
 8008aa2:	bf00      	nop
 8008aa4:	2000066c 	.word	0x2000066c

08008aa8 <_realloc_r>:
 8008aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aac:	4680      	mov	r8, r0
 8008aae:	4614      	mov	r4, r2
 8008ab0:	460e      	mov	r6, r1
 8008ab2:	b921      	cbnz	r1, 8008abe <_realloc_r+0x16>
 8008ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab8:	4611      	mov	r1, r2
 8008aba:	f7ff bf81 	b.w	80089c0 <_malloc_r>
 8008abe:	b92a      	cbnz	r2, 8008acc <_realloc_r+0x24>
 8008ac0:	f7ff ff12 	bl	80088e8 <_free_r>
 8008ac4:	4625      	mov	r5, r4
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008acc:	f000 f838 	bl	8008b40 <_malloc_usable_size_r>
 8008ad0:	4284      	cmp	r4, r0
 8008ad2:	4607      	mov	r7, r0
 8008ad4:	d802      	bhi.n	8008adc <_realloc_r+0x34>
 8008ad6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ada:	d812      	bhi.n	8008b02 <_realloc_r+0x5a>
 8008adc:	4621      	mov	r1, r4
 8008ade:	4640      	mov	r0, r8
 8008ae0:	f7ff ff6e 	bl	80089c0 <_malloc_r>
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d0ed      	beq.n	8008ac6 <_realloc_r+0x1e>
 8008aea:	42bc      	cmp	r4, r7
 8008aec:	4622      	mov	r2, r4
 8008aee:	4631      	mov	r1, r6
 8008af0:	bf28      	it	cs
 8008af2:	463a      	movcs	r2, r7
 8008af4:	f7ff fed0 	bl	8008898 <memcpy>
 8008af8:	4631      	mov	r1, r6
 8008afa:	4640      	mov	r0, r8
 8008afc:	f7ff fef4 	bl	80088e8 <_free_r>
 8008b00:	e7e1      	b.n	8008ac6 <_realloc_r+0x1e>
 8008b02:	4635      	mov	r5, r6
 8008b04:	e7df      	b.n	8008ac6 <_realloc_r+0x1e>
	...

08008b08 <_sbrk_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4d06      	ldr	r5, [pc, #24]	; (8008b24 <_sbrk_r+0x1c>)
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	4604      	mov	r4, r0
 8008b10:	4608      	mov	r0, r1
 8008b12:	602b      	str	r3, [r5, #0]
 8008b14:	f7f8 fef8 	bl	8001908 <_sbrk>
 8008b18:	1c43      	adds	r3, r0, #1
 8008b1a:	d102      	bne.n	8008b22 <_sbrk_r+0x1a>
 8008b1c:	682b      	ldr	r3, [r5, #0]
 8008b1e:	b103      	cbz	r3, 8008b22 <_sbrk_r+0x1a>
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	bd38      	pop	{r3, r4, r5, pc}
 8008b24:	20000674 	.word	0x20000674

08008b28 <__malloc_lock>:
 8008b28:	4801      	ldr	r0, [pc, #4]	; (8008b30 <__malloc_lock+0x8>)
 8008b2a:	f000 b811 	b.w	8008b50 <__retarget_lock_acquire_recursive>
 8008b2e:	bf00      	nop
 8008b30:	20000678 	.word	0x20000678

08008b34 <__malloc_unlock>:
 8008b34:	4801      	ldr	r0, [pc, #4]	; (8008b3c <__malloc_unlock+0x8>)
 8008b36:	f000 b80c 	b.w	8008b52 <__retarget_lock_release_recursive>
 8008b3a:	bf00      	nop
 8008b3c:	20000678 	.word	0x20000678

08008b40 <_malloc_usable_size_r>:
 8008b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b44:	1f18      	subs	r0, r3, #4
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	bfbc      	itt	lt
 8008b4a:	580b      	ldrlt	r3, [r1, r0]
 8008b4c:	18c0      	addlt	r0, r0, r3
 8008b4e:	4770      	bx	lr

08008b50 <__retarget_lock_acquire_recursive>:
 8008b50:	4770      	bx	lr

08008b52 <__retarget_lock_release_recursive>:
 8008b52:	4770      	bx	lr

08008b54 <_init>:
 8008b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b56:	bf00      	nop
 8008b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5a:	bc08      	pop	{r3}
 8008b5c:	469e      	mov	lr, r3
 8008b5e:	4770      	bx	lr

08008b60 <_fini>:
 8008b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b62:	bf00      	nop
 8008b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b66:	bc08      	pop	{r3}
 8008b68:	469e      	mov	lr, r3
 8008b6a:	4770      	bx	lr
