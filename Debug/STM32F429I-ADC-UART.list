
STM32F429I-ADC-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e64  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b58  0800a014  0800a014  0001a014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb6c  0800bb6c  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb6c  0800bb6c  0001bb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb74  0800bb74  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb74  0800bb74  0001bb74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb78  0800bb78  0001bb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800bb7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200bc  2**0
                  CONTENTS
 10 .bss          00008974  200000bc  200000bc  000200bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008a30  20008a30  000200bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025c7b  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ab2  00000000  00000000  00045d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002040  00000000  00000000  0004a820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e60  00000000  00000000  0004c860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002acc5  00000000  00000000  0004e6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024bed  00000000  00000000  00079385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff919  00000000  00000000  0009df72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019d88b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008cc4  00000000  00000000  0019d8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009ffc 	.word	0x08009ffc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	08009ffc 	.word	0x08009ffc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <vApplicationGetIdleTaskMemory+0x30>)
 80005de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200000d8 	.word	0x200000d8
 80005f8:	20000130 	.word	0x20000130

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f002 fcb1 	bl	8002f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f831 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 fb3f 	bl	8000c8c <MX_GPIO_Init>
  MX_CRC_Init();
 800060e:	f000 f8eb 	bl	80007e8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000612:	f000 f8fd 	bl	8000810 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000616:	f000 fae9 	bl	8000bec <MX_FMC_Init>
  MX_I2C3_Init();
 800061a:	f000 f92b 	bl	8000874 <MX_I2C3_Init>
  MX_LTDC_Init();
 800061e:	f000 f969 	bl	80008f4 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000622:	f000 f9e7 	bl	80009f4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000626:	f000 fa1b 	bl	8000a60 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800062a:	f000 fab5 	bl	8000b98 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800062e:	f000 f889 	bl	8000744 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000632:	f000 fa65 	bl	8000b00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  vBoardInit();
 8000636:	f000 fc57 	bl	8000ee8 <vBoardInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of _DisplayTask */
  osThreadDef(_DisplayTask, DisplayTask, osPriorityNormal, 0, 4096);
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <main+0x68>)
 800063c:	1d3c      	adds	r4, r7, #4
 800063e:	461d      	mov	r5, r3
 8000640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000644:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  _DisplayTaskHandle = osThreadCreate(osThread(_DisplayTask), NULL);
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f007 fdbe 	bl	80081d2 <osThreadCreate>
 8000656:	4603      	mov	r3, r0
 8000658:	4a03      	ldr	r2, [pc, #12]	; (8000668 <main+0x6c>)
 800065a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065c:	f007 fdb2 	bl	80081c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	e7fe      	b.n	8000660 <main+0x64>
 8000662:	bf00      	nop
 8000664:	0800a024 	.word	0x0800a024
 8000668:	2000061c 	.word	0x2000061c

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f009 f842 	bl	8009704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b29      	ldr	r3, [pc, #164]	; (800073c <SystemClock_Config+0xd0>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a28      	ldr	r2, [pc, #160]	; (800073c <SystemClock_Config+0xd0>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b26      	ldr	r3, [pc, #152]	; (800073c <SystemClock_Config+0xd0>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b23      	ldr	r3, [pc, #140]	; (8000740 <SystemClock_Config+0xd4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <SystemClock_Config+0xd4>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <SystemClock_Config+0xd4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e0:	2308      	movs	r3, #8
 80006e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 80006e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80006e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ea:	2304      	movs	r3, #4
 80006ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006ee:	2308      	movs	r3, #8
 80006f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 fef4 	bl	80054e4 <HAL_RCC_OscConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000702:	f000 fc65 	bl	8000fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	230f      	movs	r3, #15
 8000708:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070a:	2302      	movs	r3, #2
 800070c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000712:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000716:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2103      	movs	r1, #3
 8000724:	4618      	mov	r0, r3
 8000726:	f005 f955 	bl	80059d4 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000730:	f000 fc4e 	bl	8000fd0 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3750      	adds	r7, #80	; 0x50
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000756:	4b21      	ldr	r3, [pc, #132]	; (80007dc <MX_ADC1_Init+0x98>)
 8000758:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <MX_ADC1_Init+0x9c>)
 800075a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_ADC1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_ADC1_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_ADC1_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_ADC1_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_ADC1_Init+0x98>)
 8000784:	4a17      	ldr	r2, [pc, #92]	; (80007e4 <MX_ADC1_Init+0xa0>)
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_ADC1_Init+0x98>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_ADC1_Init+0x98>)
 8000790:	2201      	movs	r2, #1
 8000792:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_ADC1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_ADC1_Init+0x98>)
 800079e:	2201      	movs	r2, #1
 80007a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a2:	480e      	ldr	r0, [pc, #56]	; (80007dc <MX_ADC1_Init+0x98>)
 80007a4:	f002 fc46 	bl	8003034 <HAL_ADC_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007ae:	f000 fc0f 	bl	8000fd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007b2:	2305      	movs	r3, #5
 80007b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	; (80007dc <MX_ADC1_Init+0x98>)
 80007c4:	f002 fde4 	bl	8003390 <HAL_ADC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007ce:	f000 fbff 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000330 	.word	0x20000330
 80007e0:	40012000 	.word	0x40012000
 80007e4:	0f000001 	.word	0x0f000001

080007e8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_CRC_Init+0x20>)
 80007ee:	4a07      	ldr	r2, [pc, #28]	; (800080c <MX_CRC_Init+0x24>)
 80007f0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_CRC_Init+0x20>)
 80007f4:	f003 f8dc 	bl	80039b0 <HAL_CRC_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007fe:	f000 fbe7 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000378 	.word	0x20000378
 800080c:	40023000 	.word	0x40023000

08000810 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_DMA2D_Init+0x5c>)
 8000816:	4a16      	ldr	r2, [pc, #88]	; (8000870 <MX_DMA2D_Init+0x60>)
 8000818:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_DMA2D_Init+0x5c>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_DMA2D_Init+0x5c>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_DMA2D_Init+0x5c>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_DMA2D_Init+0x5c>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_DMA2D_Init+0x5c>)
 8000834:	2200      	movs	r2, #0
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_DMA2D_Init+0x5c>)
 800083a:	2200      	movs	r2, #0
 800083c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_DMA2D_Init+0x5c>)
 8000840:	2200      	movs	r2, #0
 8000842:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <MX_DMA2D_Init+0x5c>)
 8000846:	f003 fa8d 	bl	8003d64 <HAL_DMA2D_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000850:	f000 fbbe 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000854:	2101      	movs	r1, #1
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_DMA2D_Init+0x5c>)
 8000858:	f003 fcf2 	bl	8004240 <HAL_DMA2D_ConfigLayer>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000862:	f000 fbb5 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000380 	.word	0x20000380
 8000870:	4002b000 	.word	0x4002b000

08000874 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_I2C3_Init+0x74>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <MX_I2C3_Init+0x78>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_I2C3_Init+0x74>)
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <MX_I2C3_Init+0x7c>)
 8000882:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_I2C3_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_I2C3_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_I2C3_Init+0x74>)
 8000892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000896:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_I2C3_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_I2C3_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_I2C3_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_I2C3_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <MX_I2C3_Init+0x74>)
 80008b2:	f004 f8c5 	bl	8004a40 <HAL_I2C_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80008bc:	f000 fb88 	bl	8000fd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c0:	2100      	movs	r1, #0
 80008c2:	4809      	ldr	r0, [pc, #36]	; (80008e8 <MX_I2C3_Init+0x74>)
 80008c4:	f004 fa00 	bl	8004cc8 <HAL_I2CEx_ConfigAnalogFilter>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80008ce:	f000 fb7f 	bl	8000fd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_I2C3_Init+0x74>)
 80008d6:	f004 fa33 	bl	8004d40 <HAL_I2CEx_ConfigDigitalFilter>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80008e0:	f000 fb76 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200003c0 	.word	0x200003c0
 80008ec:	40005c00 	.word	0x40005c00
 80008f0:	000186a0 	.word	0x000186a0

080008f4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08e      	sub	sp, #56	; 0x38
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2234      	movs	r2, #52	; 0x34
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f008 feff 	bl	8009704 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000906:	4b39      	ldr	r3, [pc, #228]	; (80009ec <MX_LTDC_Init+0xf8>)
 8000908:	4a39      	ldr	r2, [pc, #228]	; (80009f0 <MX_LTDC_Init+0xfc>)
 800090a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800090c:	4b37      	ldr	r3, [pc, #220]	; (80009ec <MX_LTDC_Init+0xf8>)
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000912:	4b36      	ldr	r3, [pc, #216]	; (80009ec <MX_LTDC_Init+0xf8>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000918:	4b34      	ldr	r3, [pc, #208]	; (80009ec <MX_LTDC_Init+0xf8>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800091e:	4b33      	ldr	r3, [pc, #204]	; (80009ec <MX_LTDC_Init+0xf8>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000924:	4b31      	ldr	r3, [pc, #196]	; (80009ec <MX_LTDC_Init+0xf8>)
 8000926:	2209      	movs	r2, #9
 8000928:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800092a:	4b30      	ldr	r3, [pc, #192]	; (80009ec <MX_LTDC_Init+0xf8>)
 800092c:	2201      	movs	r2, #1
 800092e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000930:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <MX_LTDC_Init+0xf8>)
 8000932:	221d      	movs	r2, #29
 8000934:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000936:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <MX_LTDC_Init+0xf8>)
 8000938:	2203      	movs	r2, #3
 800093a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <MX_LTDC_Init+0xf8>)
 800093e:	f240 120d 	movw	r2, #269	; 0x10d
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <MX_LTDC_Init+0xf8>)
 8000946:	f240 1243 	movw	r2, #323	; 0x143
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_LTDC_Init+0xf8>)
 800094e:	f240 1217 	movw	r2, #279	; 0x117
 8000952:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_LTDC_Init+0xf8>)
 8000956:	f240 1247 	movw	r2, #327	; 0x147
 800095a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <MX_LTDC_Init+0xf8>)
 800095e:	2200      	movs	r2, #0
 8000960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_LTDC_Init+0xf8>)
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_LTDC_Init+0xf8>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000974:	481d      	ldr	r0, [pc, #116]	; (80009ec <MX_LTDC_Init+0xf8>)
 8000976:	f004 fa23 	bl	8004dc0 <HAL_LTDC_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000980:	f000 fb26 	bl	8000fd0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000988:	23f0      	movs	r3, #240	; 0xf0
 800098a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000990:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000994:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000996:	2302      	movs	r3, #2
 8000998:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800099a:	23ff      	movs	r3, #255	; 0xff
 800099c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009a6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009a8:	2307      	movs	r3, #7
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80009ac:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80009b2:	23f0      	movs	r3, #240	; 0xf0
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80009b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_LTDC_Init+0xf8>)
 80009d6:	f004 fb85 	bl	80050e4 <HAL_LTDC_ConfigLayer>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80009e0:	f000 faf6 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	3738      	adds	r7, #56	; 0x38
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000414 	.word	0x20000414
 80009f0:	40016800 	.word	0x40016800

080009f4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_SPI5_Init+0x64>)
 80009fa:	4a18      	ldr	r2, [pc, #96]	; (8000a5c <MX_SPI5_Init+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a04:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a24:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a28:	2218      	movs	r2, #24
 8000a2a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a40:	220a      	movs	r2, #10
 8000a42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_SPI5_Init+0x64>)
 8000a46:	f005 fc68 	bl	800631a <HAL_SPI_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a50:	f000 fabe 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200004bc 	.word	0x200004bc
 8000a5c:	40015000 	.word	0x40015000

08000a60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	463b      	mov	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <MX_TIM1_Init+0x98>)
 8000a7e:	4a1f      	ldr	r2, [pc, #124]	; (8000afc <MX_TIM1_Init+0x9c>)
 8000a80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_TIM1_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_TIM1_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_TIM1_Init+0x98>)
 8000a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_TIM1_Init+0x98>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_TIM1_Init+0x98>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_TIM1_Init+0x98>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aa8:	4813      	ldr	r0, [pc, #76]	; (8000af8 <MX_TIM1_Init+0x98>)
 8000aaa:	f006 fa15 	bl	8006ed8 <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ab4:	f000 fa8c 	bl	8000fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <MX_TIM1_Init+0x98>)
 8000ac6:	f006 fbcf 	bl	8007268 <HAL_TIM_ConfigClockSource>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ad0:	f000 fa7e 	bl	8000fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_TIM1_Init+0x98>)
 8000ae2:	f006 fdeb 	bl	80076bc <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000aec:	f000 fa70 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000514 	.word	0x20000514
 8000afc:	40010000 	.word	0x40010000

08000b00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b14:	463b      	mov	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_TIM2_Init+0x94>)
 8000b1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_TIM2_Init+0x94>)
 8000b26:	2206      	movs	r2, #6
 8000b28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_TIM2_Init+0x94>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_TIM2_Init+0x94>)
 8000b32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_TIM2_Init+0x94>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_TIM2_Init+0x94>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b44:	4813      	ldr	r0, [pc, #76]	; (8000b94 <MX_TIM2_Init+0x94>)
 8000b46:	f006 f9c7 	bl	8006ed8 <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b50:	f000 fa3e 	bl	8000fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_TIM2_Init+0x94>)
 8000b62:	f006 fb81 	bl	8007268 <HAL_TIM_ConfigClockSource>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b6c:	f000 fa30 	bl	8000fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_TIM2_Init+0x94>)
 8000b7e:	f006 fd9d 	bl	80076bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b88:	f000 fa22 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2000055c 	.word	0x2000055c

08000b98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_USART1_UART_Init+0x4c>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <MX_USART1_UART_Init+0x50>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <MX_USART1_UART_Init+0x4c>)
 8000ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_USART1_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_USART1_UART_Init+0x4c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_USART1_UART_Init+0x4c>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_USART1_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_USART1_UART_Init+0x4c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_USART1_UART_Init+0x4c>)
 8000bd0:	f006 fe04 	bl	80077dc <HAL_UART_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bda:	f000 f9f9 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200005a4 	.word	0x200005a4
 8000be8:	40011000 	.word	0x40011000

08000bec <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
 8000c00:	615a      	str	r2, [r3, #20]
 8000c02:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_FMC_Init+0x98>)
 8000c06:	4a20      	ldr	r2, [pc, #128]	; (8000c88 <MX_FMC_Init+0x9c>)
 8000c08:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_FMC_Init+0x98>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_FMC_Init+0x98>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_FMC_Init+0x98>)
 8000c18:	2204      	movs	r2, #4
 8000c1a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_FMC_Init+0x98>)
 8000c1e:	2210      	movs	r2, #16
 8000c20:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_FMC_Init+0x98>)
 8000c24:	2240      	movs	r2, #64	; 0x40
 8000c26:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_FMC_Init+0x98>)
 8000c2a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000c2e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_FMC_Init+0x98>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_FMC_Init+0x98>)
 8000c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c3c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_FMC_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_FMC_Init+0x98>)
 8000c46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000c50:	2307      	movs	r3, #7
 8000c52:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000c54:	2304      	movs	r3, #4
 8000c56:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_FMC_Init+0x98>)
 8000c6e:	f005 fac3 	bl	80061f8 <HAL_SDRAM_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000c78:	f000 f9aa 	bl	8000fd0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200005e8 	.word	0x200005e8
 8000c88:	a0000140 	.word	0xa0000140

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	; 0x38
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
 8000ca6:	4b8a      	ldr	r3, [pc, #552]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a89      	ldr	r2, [pc, #548]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b87      	ldr	r3, [pc, #540]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	623b      	str	r3, [r7, #32]
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
 8000cc2:	4b83      	ldr	r3, [pc, #524]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a82      	ldr	r2, [pc, #520]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000cc8:	f043 0320 	orr.w	r3, r3, #32
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b80      	ldr	r3, [pc, #512]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0320 	and.w	r3, r3, #32
 8000cd6:	61fb      	str	r3, [r7, #28]
 8000cd8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
 8000cde:	4b7c      	ldr	r3, [pc, #496]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a7b      	ldr	r2, [pc, #492]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b79      	ldr	r3, [pc, #484]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf2:	61bb      	str	r3, [r7, #24]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	4b75      	ldr	r3, [pc, #468]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a74      	ldr	r2, [pc, #464]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b72      	ldr	r3, [pc, #456]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b6e      	ldr	r3, [pc, #440]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a6d      	ldr	r2, [pc, #436]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b6b      	ldr	r3, [pc, #428]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b67      	ldr	r3, [pc, #412]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a66      	ldr	r2, [pc, #408]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b64      	ldr	r3, [pc, #400]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b60      	ldr	r3, [pc, #384]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a5f      	ldr	r2, [pc, #380]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b5d      	ldr	r3, [pc, #372]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b59      	ldr	r3, [pc, #356]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a58      	ldr	r2, [pc, #352]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b56      	ldr	r3, [pc, #344]	; (8000ed0 <MX_GPIO_Init+0x244>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2116      	movs	r1, #22
 8000d86:	4853      	ldr	r0, [pc, #332]	; (8000ed4 <MX_GPIO_Init+0x248>)
 8000d88:	f003 fe40 	bl	8004a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	4851      	ldr	r0, [pc, #324]	; (8000ed8 <MX_GPIO_Init+0x24c>)
 8000d92:	f003 fe3b 	bl	8004a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d9c:	484f      	ldr	r0, [pc, #316]	; (8000edc <MX_GPIO_Init+0x250>)
 8000d9e:	f003 fe35 	bl	8004a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000da8:	484d      	ldr	r0, [pc, #308]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000daa:	f003 fe2f 	bl	8004a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000dae:	2316      	movs	r3, #22
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4843      	ldr	r0, [pc, #268]	; (8000ed4 <MX_GPIO_Init+0x248>)
 8000dc6:	f003 fb69 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000dca:	f248 0307 	movw	r3, #32775	; 0x8007
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dd0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	483d      	ldr	r0, [pc, #244]	; (8000ed8 <MX_GPIO_Init+0x24c>)
 8000de2:	f003 fb5b 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4836      	ldr	r0, [pc, #216]	; (8000ed8 <MX_GPIO_Init+0x24c>)
 8000dfe:	f003 fb4d 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e02:	2320      	movs	r3, #32
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e06:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	482f      	ldr	r0, [pc, #188]	; (8000ed4 <MX_GPIO_Init+0x248>)
 8000e18:	f003 fb40 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	482d      	ldr	r0, [pc, #180]	; (8000ee4 <MX_GPIO_Init+0x258>)
 8000e30:	f003 fb34 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000e34:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000e46:	230c      	movs	r3, #12
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4824      	ldr	r0, [pc, #144]	; (8000ee4 <MX_GPIO_Init+0x258>)
 8000e52:	f003 fb23 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000e56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481e      	ldr	r0, [pc, #120]	; (8000ee4 <MX_GPIO_Init+0x258>)
 8000e6c:	f003 fb16 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000e70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	4619      	mov	r1, r3
 8000e84:	4815      	ldr	r0, [pc, #84]	; (8000edc <MX_GPIO_Init+0x250>)
 8000e86:	f003 fb09 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000e8a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480e      	ldr	r0, [pc, #56]	; (8000edc <MX_GPIO_Init+0x250>)
 8000ea4:	f003 fafa 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ea8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <MX_GPIO_Init+0x254>)
 8000ec2:	f003 faeb 	bl	800449c <HAL_GPIO_Init>

}
 8000ec6:	bf00      	nop
 8000ec8:	3738      	adds	r7, #56	; 0x38
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40020c00 	.word	0x40020c00
 8000ee0:	40021800 	.word	0x40021800
 8000ee4:	40020400 	.word	0x40020400

08000ee8 <vBoardInit>:

/* USER CODE BEGIN 4 */
static void vBoardInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	//First ADC Value
	HAL_ADC_Start(&hadc1);
 8000eec:	4825      	ldr	r0, [pc, #148]	; (8000f84 <vBoardInit+0x9c>)
 8000eee:	f002 f8e5 	bl	80030bc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef6:	4823      	ldr	r0, [pc, #140]	; (8000f84 <vBoardInit+0x9c>)
 8000ef8:	f002 f9b2 	bl	8003260 <HAL_ADC_PollForConversion>
	u16ADC_Val = HAL_ADC_GetValue(&hadc1);
 8000efc:	4821      	ldr	r0, [pc, #132]	; (8000f84 <vBoardInit+0x9c>)
 8000efe:	f002 fa3a 	bl	8003376 <HAL_ADC_GetValue>
 8000f02:	4603      	mov	r3, r0
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <vBoardInit+0xa0>)
 8000f08:	801a      	strh	r2, [r3, #0]

	//Timer start
	HAL_TIM_Base_Start_IT(&htim2);
 8000f0a:	4820      	ldr	r0, [pc, #128]	; (8000f8c <vBoardInit+0xa4>)
 8000f0c:	f006 f834 	bl	8006f78 <HAL_TIM_Base_Start_IT>
	//Display
	BSP_LCD_Init();
 8000f10:	f001 f8ea 	bl	80020e8 <BSP_LCD_Init>

	//Start Screen
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 8000f14:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f001 f967 	bl	80021ec <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 8000f1e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000f22:	2001      	movs	r0, #1
 8000f24:	f001 f962 	bl	80021ec <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f001 f9c3 	bl	80022b4 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8000f2e:	f001 fc53 	bl	80027d8 <BSP_LCD_DisplayOn>

	BSP_LCD_Clear(LCD_COLOR_ORANGE);
 8000f32:	4817      	ldr	r0, [pc, #92]	; (8000f90 <vBoardInit+0xa8>)
 8000f34:	f001 fa1a 	bl	800236c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f001 f9ca 	bl	80022d4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f001 f9de 	bl	8002304 <BSP_LCD_SetBackColor>
	BSP_LCD_FillRect(10, 10, 220, 80);
 8000f48:	2350      	movs	r3, #80	; 0x50
 8000f4a:	22dc      	movs	r2, #220	; 0xdc
 8000f4c:	210a      	movs	r1, #10
 8000f4e:	200a      	movs	r0, #10
 8000f50:	f001 fbe8 	bl	8002724 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f54:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000f58:	f001 f9bc 	bl	80022d4 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(10, 10, 220, 80);
 8000f5c:	2350      	movs	r3, #80	; 0x50
 8000f5e:	22dc      	movs	r2, #220	; 0xdc
 8000f60:	210a      	movs	r1, #10
 8000f62:	200a      	movs	r0, #10
 8000f64:	f001 fbac 	bl	80026c0 <BSP_LCD_DrawRect>

	BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"Embedded", CENTER_MODE);
 8000f68:	2301      	movs	r3, #1
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <vBoardInit+0xac>)
 8000f6c:	211e      	movs	r1, #30
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f001 fa68 	bl	8002444 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 50, (uint8_t*)"KI", CENTER_MODE);
 8000f74:	2301      	movs	r3, #1
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <vBoardInit+0xb0>)
 8000f78:	2132      	movs	r1, #50	; 0x32
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f001 fa62 	bl	8002444 <BSP_LCD_DisplayStringAt>
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000330 	.word	0x20000330
 8000f88:	20000620 	.word	0x20000620
 8000f8c:	2000055c 	.word	0x2000055c
 8000f90:	ffffa500 	.word	0xffffa500
 8000f94:	0800a040 	.word	0x0800a040
 8000f98:	0800a04c 	.word	0x0800a04c

08000f9c <DisplayTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DisplayTask */
void DisplayTask(void const * argument)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(100);
 8000fa4:	2064      	movs	r0, #100	; 0x64
 8000fa6:	f007 f960 	bl	800826a <osDelay>
 8000faa:	e7fb      	b.n	8000fa4 <DisplayTask+0x8>

08000fac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fbe:	f001 fff5 	bl	8002fac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40001000 	.word	0x40001000

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
}
 8000fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <Error_Handler+0x8>
	...

08000fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_MspInit+0x54>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	4a11      	ldr	r2, [pc, #68]	; (8001030 <HAL_MspInit+0x54>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_MspInit+0x54>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_MspInit+0x54>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_MspInit+0x54>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_MspInit+0x54>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	210f      	movs	r1, #15
 800101e:	f06f 0001 	mvn.w	r0, #1
 8001022:	f002 fc9b 	bl	800395c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800

08001034 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a17      	ldr	r2, [pc, #92]	; (80010b0 <HAL_ADC_MspInit+0x7c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d127      	bne.n	80010a6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_ADC_MspInit+0x80>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <HAL_ADC_MspInit+0x80>)
 8001060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <HAL_ADC_MspInit+0x80>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_ADC_MspInit+0x80>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <HAL_ADC_MspInit+0x80>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_ADC_MspInit+0x80>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800108e:	2320      	movs	r3, #32
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001092:	2303      	movs	r3, #3
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <HAL_ADC_MspInit+0x84>)
 80010a2:	f003 f9fb 	bl	800449c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40012000 	.word	0x40012000
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000

080010bc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <HAL_CRC_MspInit+0x3c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d10d      	bne.n	80010ea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_CRC_MspInit+0x40>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a09      	ldr	r2, [pc, #36]	; (80010fc <HAL_CRC_MspInit+0x40>)
 80010d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <HAL_CRC_MspInit+0x40>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40023000 	.word	0x40023000
 80010fc:	40023800 	.word	0x40023800

08001100 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <HAL_DMA2D_MspInit+0x48>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d115      	bne.n	800113e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <HAL_DMA2D_MspInit+0x4c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a0c      	ldr	r2, [pc, #48]	; (800114c <HAL_DMA2D_MspInit+0x4c>)
 800111c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_DMA2D_MspInit+0x4c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2105      	movs	r1, #5
 8001132:	205a      	movs	r0, #90	; 0x5a
 8001134:	f002 fc12 	bl	800395c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001138:	205a      	movs	r0, #90	; 0x5a
 800113a:	f002 fc2b 	bl	8003994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	4002b000 	.word	0x4002b000
 800114c:	40023800 	.word	0x40023800

08001150 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a29      	ldr	r2, [pc, #164]	; (8001214 <HAL_I2C_MspInit+0xc4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d14b      	bne.n	800120a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b28      	ldr	r3, [pc, #160]	; (8001218 <HAL_I2C_MspInit+0xc8>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a27      	ldr	r2, [pc, #156]	; (8001218 <HAL_I2C_MspInit+0xc8>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b25      	ldr	r3, [pc, #148]	; (8001218 <HAL_I2C_MspInit+0xc8>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <HAL_I2C_MspInit+0xc8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a20      	ldr	r2, [pc, #128]	; (8001218 <HAL_I2C_MspInit+0xc8>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <HAL_I2C_MspInit+0xc8>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80011aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b0:	2312      	movs	r3, #18
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011bc:	2304      	movs	r3, #4
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4815      	ldr	r0, [pc, #84]	; (800121c <HAL_I2C_MspInit+0xcc>)
 80011c8:	f003 f968 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80011cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d2:	2312      	movs	r3, #18
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011de:	2304      	movs	r3, #4
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	480d      	ldr	r0, [pc, #52]	; (8001220 <HAL_I2C_MspInit+0xd0>)
 80011ea:	f003 f957 	bl	800449c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_I2C_MspInit+0xc8>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_I2C_MspInit+0xc8>)
 80011f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_I2C_MspInit+0xc8>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40005c00 	.word	0x40005c00
 8001218:	40023800 	.word	0x40023800
 800121c:	40020800 	.word	0x40020800
 8001220:	40020000 	.word	0x40020000

08001224 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b09a      	sub	sp, #104	; 0x68
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	2230      	movs	r2, #48	; 0x30
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f008 fa5d 	bl	8009704 <memset>
  if(hltdc->Instance==LTDC)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a85      	ldr	r2, [pc, #532]	; (8001464 <HAL_LTDC_MspInit+0x240>)
 8001250:	4293      	cmp	r3, r2
 8001252:	f040 8103 	bne.w	800145c <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001256:	2308      	movs	r3, #8
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800125a:	23c0      	movs	r3, #192	; 0xc0
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800125e:	2304      	movs	r3, #4
 8001260:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001266:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126c:	4618      	mov	r0, r3
 800126e:	f004 fe03 	bl	8005e78 <HAL_RCCEx_PeriphCLKConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001278:	f7ff feaa 	bl	8000fd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
 8001280:	4b79      	ldr	r3, [pc, #484]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 8001282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001284:	4a78      	ldr	r2, [pc, #480]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 8001286:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800128a:	6453      	str	r3, [r2, #68]	; 0x44
 800128c:	4b76      	ldr	r3, [pc, #472]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 800128e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001290:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001294:	623b      	str	r3, [r7, #32]
 8001296:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
 800129c:	4b72      	ldr	r3, [pc, #456]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	4a71      	ldr	r2, [pc, #452]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 80012a2:	f043 0320 	orr.w	r3, r3, #32
 80012a6:	6313      	str	r3, [r2, #48]	; 0x30
 80012a8:	4b6f      	ldr	r3, [pc, #444]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	f003 0320 	and.w	r3, r3, #32
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	4b6b      	ldr	r3, [pc, #428]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	4a6a      	ldr	r2, [pc, #424]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6313      	str	r3, [r2, #48]	; 0x30
 80012c4:	4b68      	ldr	r3, [pc, #416]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	4b64      	ldr	r3, [pc, #400]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	4a63      	ldr	r2, [pc, #396]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	6313      	str	r3, [r2, #48]	; 0x30
 80012e0:	4b61      	ldr	r3, [pc, #388]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	4b5d      	ldr	r3, [pc, #372]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4a5c      	ldr	r2, [pc, #368]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 80012f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012fa:	6313      	str	r3, [r2, #48]	; 0x30
 80012fc:	4b5a      	ldr	r3, [pc, #360]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	4b56      	ldr	r3, [pc, #344]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a55      	ldr	r2, [pc, #340]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b53      	ldr	r3, [pc, #332]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	4b4f      	ldr	r3, [pc, #316]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	4a4e      	ldr	r2, [pc, #312]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	6313      	str	r3, [r2, #48]	; 0x30
 8001334:	4b4c      	ldr	r3, [pc, #304]	; (8001468 <HAL_LTDC_MspInit+0x244>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001344:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001352:	230e      	movs	r3, #14
 8001354:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800135a:	4619      	mov	r1, r3
 800135c:	4843      	ldr	r0, [pc, #268]	; (800146c <HAL_LTDC_MspInit+0x248>)
 800135e:	f003 f89d 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001362:	f641 0358 	movw	r3, #6232	; 0x1858
 8001366:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001374:	230e      	movs	r3, #14
 8001376:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800137c:	4619      	mov	r1, r3
 800137e:	483c      	ldr	r0, [pc, #240]	; (8001470 <HAL_LTDC_MspInit+0x24c>)
 8001380:	f003 f88c 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001384:	2303      	movs	r3, #3
 8001386:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001394:	2309      	movs	r3, #9
 8001396:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800139c:	4619      	mov	r1, r3
 800139e:	4835      	ldr	r0, [pc, #212]	; (8001474 <HAL_LTDC_MspInit+0x250>)
 80013a0:	f003 f87c 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80013a4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80013a8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013b6:	230e      	movs	r3, #14
 80013b8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013be:	4619      	mov	r1, r3
 80013c0:	482c      	ldr	r0, [pc, #176]	; (8001474 <HAL_LTDC_MspInit+0x250>)
 80013c2:	f003 f86b 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80013c6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80013ca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013d8:	230e      	movs	r3, #14
 80013da:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013e0:	4619      	mov	r1, r3
 80013e2:	4825      	ldr	r0, [pc, #148]	; (8001478 <HAL_LTDC_MspInit+0x254>)
 80013e4:	f003 f85a 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80013e8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80013ec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013fa:	230e      	movs	r3, #14
 80013fc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001402:	4619      	mov	r1, r3
 8001404:	481d      	ldr	r0, [pc, #116]	; (800147c <HAL_LTDC_MspInit+0x258>)
 8001406:	f003 f849 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800140a:	2348      	movs	r3, #72	; 0x48
 800140c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800141a:	230e      	movs	r3, #14
 800141c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001422:	4619      	mov	r1, r3
 8001424:	4816      	ldr	r0, [pc, #88]	; (8001480 <HAL_LTDC_MspInit+0x25c>)
 8001426:	f003 f839 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800142a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800142e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800143c:	2309      	movs	r3, #9
 800143e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001440:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001444:	4619      	mov	r1, r3
 8001446:	480c      	ldr	r0, [pc, #48]	; (8001478 <HAL_LTDC_MspInit+0x254>)
 8001448:	f003 f828 	bl	800449c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2105      	movs	r1, #5
 8001450:	2058      	movs	r0, #88	; 0x58
 8001452:	f002 fa83 	bl	800395c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001456:	2058      	movs	r0, #88	; 0x58
 8001458:	f002 fa9c 	bl	8003994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3768      	adds	r7, #104	; 0x68
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40016800 	.word	0x40016800
 8001468:	40023800 	.word	0x40023800
 800146c:	40021400 	.word	0x40021400
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400
 8001478:	40021800 	.word	0x40021800
 800147c:	40020800 	.word	0x40020800
 8001480:	40020c00 	.word	0x40020c00

08001484 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a19      	ldr	r2, [pc, #100]	; (8001508 <HAL_SPI_MspInit+0x84>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d12c      	bne.n	8001500 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_SPI_MspInit+0x88>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_SPI_MspInit+0x88>)
 80014b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014b4:	6453      	str	r3, [r2, #68]	; 0x44
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_SPI_MspInit+0x88>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_SPI_MspInit+0x88>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <HAL_SPI_MspInit+0x88>)
 80014cc:	f043 0320 	orr.w	r3, r3, #32
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <HAL_SPI_MspInit+0x88>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0320 	and.w	r3, r3, #32
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80014de:	f44f 7360 	mov.w	r3, #896	; 0x380
 80014e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014f0:	2305      	movs	r3, #5
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <HAL_SPI_MspInit+0x8c>)
 80014fc:	f002 ffce 	bl	800449c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001500:	bf00      	nop
 8001502:	3728      	adds	r7, #40	; 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40015000 	.word	0x40015000
 800150c:	40023800 	.word	0x40023800
 8001510:	40021400 	.word	0x40021400

08001514 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_SPI_MspDeInit+0x30>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d10a      	bne.n	800153c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_SPI_MspDeInit+0x34>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_SPI_MspDeInit+0x34>)
 800152c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001532:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <HAL_SPI_MspDeInit+0x38>)
 8001538:	f003 f95c 	bl	80047f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40015000 	.word	0x40015000
 8001548:	40023800 	.word	0x40023800
 800154c:	40021400 	.word	0x40021400

08001550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <HAL_TIM_Base_MspInit+0x70>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d10e      	bne.n	8001580 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_TIM_Base_MspInit+0x74>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a16      	ldr	r2, [pc, #88]	; (80015c4 <HAL_TIM_Base_MspInit+0x74>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_TIM_Base_MspInit+0x74>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800157e:	e01a      	b.n	80015b6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001588:	d115      	bne.n	80015b6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_TIM_Base_MspInit+0x74>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <HAL_TIM_Base_MspInit+0x74>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_TIM_Base_MspInit+0x74>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2105      	movs	r1, #5
 80015aa:	201c      	movs	r0, #28
 80015ac:	f002 f9d6 	bl	800395c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015b0:	201c      	movs	r0, #28
 80015b2:	f002 f9ef 	bl	8003994 <HAL_NVIC_EnableIRQ>
}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40010000 	.word	0x40010000
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a19      	ldr	r2, [pc, #100]	; (800164c <HAL_UART_MspInit+0x84>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d12c      	bne.n	8001644 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_UART_MspInit+0x88>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	4a17      	ldr	r2, [pc, #92]	; (8001650 <HAL_UART_MspInit+0x88>)
 80015f4:	f043 0310 	orr.w	r3, r3, #16
 80015f8:	6453      	str	r3, [r2, #68]	; 0x44
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_UART_MspInit+0x88>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_UART_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_UART_MspInit+0x88>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_UART_MspInit+0x88>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001622:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001634:	2307      	movs	r3, #7
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <HAL_UART_MspInit+0x8c>)
 8001640:	f002 ff2c 	bl	800449c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40011000 	.word	0x40011000
 8001650:	40023800 	.word	0x40023800
 8001654:	40020000 	.word	0x40020000

08001658 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800166c:	4b3b      	ldr	r3, [pc, #236]	; (800175c <HAL_FMC_MspInit+0x104>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d16f      	bne.n	8001754 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001674:	4b39      	ldr	r3, [pc, #228]	; (800175c <HAL_FMC_MspInit+0x104>)
 8001676:	2201      	movs	r2, #1
 8001678:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	4b38      	ldr	r3, [pc, #224]	; (8001760 <HAL_FMC_MspInit+0x108>)
 8001680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001682:	4a37      	ldr	r2, [pc, #220]	; (8001760 <HAL_FMC_MspInit+0x108>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6393      	str	r3, [r2, #56]	; 0x38
 800168a:	4b35      	ldr	r3, [pc, #212]	; (8001760 <HAL_FMC_MspInit+0x108>)
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001696:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800169a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016a8:	230c      	movs	r3, #12
 80016aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	4619      	mov	r1, r3
 80016b0:	482c      	ldr	r0, [pc, #176]	; (8001764 <HAL_FMC_MspInit+0x10c>)
 80016b2:	f002 fef3 	bl	800449c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80016b6:	2301      	movs	r3, #1
 80016b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016c6:	230c      	movs	r3, #12
 80016c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	4619      	mov	r1, r3
 80016ce:	4826      	ldr	r0, [pc, #152]	; (8001768 <HAL_FMC_MspInit+0x110>)
 80016d0:	f002 fee4 	bl	800449c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80016d4:	f248 1333 	movw	r3, #33075	; 0x8133
 80016d8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016e6:	230c      	movs	r3, #12
 80016e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	4619      	mov	r1, r3
 80016ee:	481f      	ldr	r0, [pc, #124]	; (800176c <HAL_FMC_MspInit+0x114>)
 80016f0:	f002 fed4 	bl	800449c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80016f4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80016f8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001706:	230c      	movs	r3, #12
 8001708:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4818      	ldr	r0, [pc, #96]	; (8001770 <HAL_FMC_MspInit+0x118>)
 8001710:	f002 fec4 	bl	800449c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001714:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001718:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001726:	230c      	movs	r3, #12
 8001728:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	4619      	mov	r1, r3
 800172e:	4811      	ldr	r0, [pc, #68]	; (8001774 <HAL_FMC_MspInit+0x11c>)
 8001730:	f002 feb4 	bl	800449c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001734:	2360      	movs	r3, #96	; 0x60
 8001736:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001744:	230c      	movs	r3, #12
 8001746:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	4619      	mov	r1, r3
 800174c:	480a      	ldr	r0, [pc, #40]	; (8001778 <HAL_FMC_MspInit+0x120>)
 800174e:	f002 fea5 	bl	800449c <HAL_GPIO_Init>
 8001752:	e000      	b.n	8001756 <HAL_FMC_MspInit+0xfe>
    return;
 8001754:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000624 	.word	0x20000624
 8001760:	40023800 	.word	0x40023800
 8001764:	40021400 	.word	0x40021400
 8001768:	40020800 	.word	0x40020800
 800176c:	40021800 	.word	0x40021800
 8001770:	40021000 	.word	0x40021000
 8001774:	40020c00 	.word	0x40020c00
 8001778:	40020400 	.word	0x40020400

0800177c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001784:	f7ff ff68 	bl	8001658 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08e      	sub	sp, #56	; 0x38
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	4b33      	ldr	r3, [pc, #204]	; (8001874 <HAL_InitTick+0xe4>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	4a32      	ldr	r2, [pc, #200]	; (8001874 <HAL_InitTick+0xe4>)
 80017aa:	f043 0310 	orr.w	r3, r3, #16
 80017ae:	6413      	str	r3, [r2, #64]	; 0x40
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_InitTick+0xe4>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017bc:	f107 0210 	add.w	r2, r7, #16
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f004 fb24 	bl	8005e14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d103      	bne.n	80017de <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017d6:	f004 faf5 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 80017da:	6378      	str	r0, [r7, #52]	; 0x34
 80017dc:	e004      	b.n	80017e8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017de:	f004 faf1 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 80017e2:	4603      	mov	r3, r0
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ea:	4a23      	ldr	r2, [pc, #140]	; (8001878 <HAL_InitTick+0xe8>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	0c9b      	lsrs	r3, r3, #18
 80017f2:	3b01      	subs	r3, #1
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <HAL_InitTick+0xec>)
 80017f8:	4a21      	ldr	r2, [pc, #132]	; (8001880 <HAL_InitTick+0xf0>)
 80017fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <HAL_InitTick+0xec>)
 80017fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001802:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001804:	4a1d      	ldr	r2, [pc, #116]	; (800187c <HAL_InitTick+0xec>)
 8001806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001808:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <HAL_InitTick+0xec>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_InitTick+0xec>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_InitTick+0xec>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800181c:	4817      	ldr	r0, [pc, #92]	; (800187c <HAL_InitTick+0xec>)
 800181e:	f005 fb5b 	bl	8006ed8 <HAL_TIM_Base_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001828:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800182c:	2b00      	cmp	r3, #0
 800182e:	d11b      	bne.n	8001868 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001830:	4812      	ldr	r0, [pc, #72]	; (800187c <HAL_InitTick+0xec>)
 8001832:	f005 fba1 	bl	8006f78 <HAL_TIM_Base_Start_IT>
 8001836:	4603      	mov	r3, r0
 8001838:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800183c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001840:	2b00      	cmp	r3, #0
 8001842:	d111      	bne.n	8001868 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001844:	2036      	movs	r0, #54	; 0x36
 8001846:	f002 f8a5 	bl	8003994 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d808      	bhi.n	8001862 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	2036      	movs	r0, #54	; 0x36
 8001856:	f002 f881 	bl	800395c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_InitTick+0xf4>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	e002      	b.n	8001868 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001868:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800186c:	4618      	mov	r0, r3
 800186e:	3738      	adds	r7, #56	; 0x38
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	431bde83 	.word	0x431bde83
 800187c:	20000628 	.word	0x20000628
 8001880:	40001000 	.word	0x40001000
 8001884:	2000004c 	.word	0x2000004c

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800188c:	e7fe      	b.n	800188c <NMI_Handler+0x4>

0800188e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <HardFault_Handler+0x4>

08001894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <MemManage_Handler+0x4>

0800189a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189e:	e7fe      	b.n	800189e <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  char cBuffer[BUFFERSIZE];
  snprintf(cBuffer, BUFFERSIZE, "%04d, ",u16ADC_Val);
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <TIM2_IRQHandler+0x4c>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	1d38      	adds	r0, r7, #4
 80018c0:	4a10      	ldr	r2, [pc, #64]	; (8001904 <TIM2_IRQHandler+0x50>)
 80018c2:	210a      	movs	r1, #10
 80018c4:	f007 ff26 	bl	8009714 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)cBuffer, 6U, 100U);
 80018c8:	1d39      	adds	r1, r7, #4
 80018ca:	2364      	movs	r3, #100	; 0x64
 80018cc:	2206      	movs	r2, #6
 80018ce:	480e      	ldr	r0, [pc, #56]	; (8001908 <TIM2_IRQHandler+0x54>)
 80018d0:	f005 ffd1 	bl	8007876 <HAL_UART_Transmit>

  HAL_ADC_Start(&hadc1);
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <TIM2_IRQHandler+0x58>)
 80018d6:	f001 fbf1 	bl	80030bc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80018da:	f04f 31ff 	mov.w	r1, #4294967295
 80018de:	480b      	ldr	r0, [pc, #44]	; (800190c <TIM2_IRQHandler+0x58>)
 80018e0:	f001 fcbe 	bl	8003260 <HAL_ADC_PollForConversion>
  u16ADC_Val = HAL_ADC_GetValue(&hadc1);
 80018e4:	4809      	ldr	r0, [pc, #36]	; (800190c <TIM2_IRQHandler+0x58>)
 80018e6:	f001 fd46 	bl	8003376 <HAL_ADC_GetValue>
 80018ea:	4603      	mov	r3, r0
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <TIM2_IRQHandler+0x4c>)
 80018f0:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018f2:	4807      	ldr	r0, [pc, #28]	; (8001910 <TIM2_IRQHandler+0x5c>)
 80018f4:	f005 fbb0 	bl	8007058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000620 	.word	0x20000620
 8001904:	0800a050 	.word	0x0800a050
 8001908:	200005a4 	.word	0x200005a4
 800190c:	20000330 	.word	0x20000330
 8001910:	2000055c 	.word	0x2000055c

08001914 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <TIM6_DAC_IRQHandler+0x10>)
 800191a:	f005 fb9d 	bl	8007058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000628 	.word	0x20000628

08001928 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <LTDC_IRQHandler+0x10>)
 800192e:	f003 fb17 	bl	8004f60 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000414 	.word	0x20000414

0800193c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <DMA2D_IRQHandler+0x10>)
 8001942:	f002 fb6c 	bl	800401e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000380 	.word	0x20000380

08001950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <_sbrk+0x5c>)
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <_sbrk+0x60>)
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <_sbrk+0x64>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <_sbrk+0x68>)
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d207      	bcs.n	8001990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001980:	f007 fe88 	bl	8009694 <__errno>
 8001984:	4603      	mov	r3, r0
 8001986:	220c      	movs	r2, #12
 8001988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	e009      	b.n	80019a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <_sbrk+0x64>)
 80019a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20030000 	.word	0x20030000
 80019b0:	00000400 	.word	0x00000400
 80019b4:	20000670 	.word	0x20000670
 80019b8:	20008a30 	.word	0x20008a30

080019bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <SystemInit+0x20>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <SystemInit+0x20>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80019e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a18 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e4:	480d      	ldr	r0, [pc, #52]	; (8001a1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019e6:	490e      	ldr	r1, [pc, #56]	; (8001a20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ec:	e002      	b.n	80019f4 <LoopCopyDataInit>

080019ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f2:	3304      	adds	r3, #4

080019f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f8:	d3f9      	bcc.n	80019ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019fc:	4c0b      	ldr	r4, [pc, #44]	; (8001a2c <LoopFillZerobss+0x26>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a00:	e001      	b.n	8001a06 <LoopFillZerobss>

08001a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a04:	3204      	adds	r2, #4

08001a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a0a:	f7ff ffd7 	bl	80019bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f007 fe47 	bl	80096a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a12:	f7fe fdf3 	bl	80005fc <main>
  bx  lr    
 8001a16:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a18:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a20:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001a24:	0800bb7c 	.word	0x0800bb7c
  ldr r2, =_sbss
 8001a28:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001a2c:	20008a30 	.word	0x20008a30

08001a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC_IRQHandler>

08001a32 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001a36:	f000 fa5d 	bl	8001ef4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001a3a:	20ca      	movs	r0, #202	; 0xca
 8001a3c:	f000 f95d 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001a40:	20c3      	movs	r0, #195	; 0xc3
 8001a42:	f000 f967 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001a46:	2008      	movs	r0, #8
 8001a48:	f000 f964 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001a4c:	2050      	movs	r0, #80	; 0x50
 8001a4e:	f000 f961 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001a52:	20cf      	movs	r0, #207	; 0xcf
 8001a54:	f000 f951 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f000 f95b 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001a5e:	20c1      	movs	r0, #193	; 0xc1
 8001a60:	f000 f958 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001a64:	2030      	movs	r0, #48	; 0x30
 8001a66:	f000 f955 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001a6a:	20ed      	movs	r0, #237	; 0xed
 8001a6c:	f000 f945 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001a70:	2064      	movs	r0, #100	; 0x64
 8001a72:	f000 f94f 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001a76:	2003      	movs	r0, #3
 8001a78:	f000 f94c 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001a7c:	2012      	movs	r0, #18
 8001a7e:	f000 f949 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001a82:	2081      	movs	r0, #129	; 0x81
 8001a84:	f000 f946 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001a88:	20e8      	movs	r0, #232	; 0xe8
 8001a8a:	f000 f936 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001a8e:	2085      	movs	r0, #133	; 0x85
 8001a90:	f000 f940 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f000 f93d 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001a9a:	2078      	movs	r0, #120	; 0x78
 8001a9c:	f000 f93a 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001aa0:	20cb      	movs	r0, #203	; 0xcb
 8001aa2:	f000 f92a 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001aa6:	2039      	movs	r0, #57	; 0x39
 8001aa8:	f000 f934 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001aac:	202c      	movs	r0, #44	; 0x2c
 8001aae:	f000 f931 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f000 f92e 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001ab8:	2034      	movs	r0, #52	; 0x34
 8001aba:	f000 f92b 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001abe:	2002      	movs	r0, #2
 8001ac0:	f000 f928 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001ac4:	20f7      	movs	r0, #247	; 0xf7
 8001ac6:	f000 f918 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001aca:	2020      	movs	r0, #32
 8001acc:	f000 f922 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001ad0:	20ea      	movs	r0, #234	; 0xea
 8001ad2:	f000 f912 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f000 f91c 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001adc:	2000      	movs	r0, #0
 8001ade:	f000 f919 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001ae2:	20b1      	movs	r0, #177	; 0xb1
 8001ae4:	f000 f909 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f000 f913 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001aee:	201b      	movs	r0, #27
 8001af0:	f000 f910 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001af4:	20b6      	movs	r0, #182	; 0xb6
 8001af6:	f000 f900 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001afa:	200a      	movs	r0, #10
 8001afc:	f000 f90a 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001b00:	20a2      	movs	r0, #162	; 0xa2
 8001b02:	f000 f907 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001b06:	20c0      	movs	r0, #192	; 0xc0
 8001b08:	f000 f8f7 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001b0c:	2010      	movs	r0, #16
 8001b0e:	f000 f901 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001b12:	20c1      	movs	r0, #193	; 0xc1
 8001b14:	f000 f8f1 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001b18:	2010      	movs	r0, #16
 8001b1a:	f000 f8fb 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001b1e:	20c5      	movs	r0, #197	; 0xc5
 8001b20:	f000 f8eb 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001b24:	2045      	movs	r0, #69	; 0x45
 8001b26:	f000 f8f5 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001b2a:	2015      	movs	r0, #21
 8001b2c:	f000 f8f2 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001b30:	20c7      	movs	r0, #199	; 0xc7
 8001b32:	f000 f8e2 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001b36:	2090      	movs	r0, #144	; 0x90
 8001b38:	f000 f8ec 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001b3c:	2036      	movs	r0, #54	; 0x36
 8001b3e:	f000 f8dc 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001b42:	20c8      	movs	r0, #200	; 0xc8
 8001b44:	f000 f8e6 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001b48:	20f2      	movs	r0, #242	; 0xf2
 8001b4a:	f000 f8d6 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f000 f8e0 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001b54:	20b0      	movs	r0, #176	; 0xb0
 8001b56:	f000 f8d0 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001b5a:	20c2      	movs	r0, #194	; 0xc2
 8001b5c:	f000 f8da 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001b60:	20b6      	movs	r0, #182	; 0xb6
 8001b62:	f000 f8ca 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001b66:	200a      	movs	r0, #10
 8001b68:	f000 f8d4 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001b6c:	20a7      	movs	r0, #167	; 0xa7
 8001b6e:	f000 f8d1 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001b72:	2027      	movs	r0, #39	; 0x27
 8001b74:	f000 f8ce 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001b78:	2004      	movs	r0, #4
 8001b7a:	f000 f8cb 	bl	8001d14 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001b7e:	202a      	movs	r0, #42	; 0x2a
 8001b80:	f000 f8bb 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b84:	2000      	movs	r0, #0
 8001b86:	f000 f8c5 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f000 f8c2 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b90:	2000      	movs	r0, #0
 8001b92:	f000 f8bf 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001b96:	20ef      	movs	r0, #239	; 0xef
 8001b98:	f000 f8bc 	bl	8001d14 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001b9c:	202b      	movs	r0, #43	; 0x2b
 8001b9e:	f000 f8ac 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f000 f8b6 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f000 f8b3 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f000 f8b0 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001bb4:	203f      	movs	r0, #63	; 0x3f
 8001bb6:	f000 f8ad 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001bba:	20f6      	movs	r0, #246	; 0xf6
 8001bbc:	f000 f89d 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f000 f8a7 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f000 f8a4 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001bcc:	2006      	movs	r0, #6
 8001bce:	f000 f8a1 	bl	8001d14 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001bd2:	202c      	movs	r0, #44	; 0x2c
 8001bd4:	f000 f891 	bl	8001cfa <ili9341_WriteReg>
  LCD_Delay(200);
 8001bd8:	20c8      	movs	r0, #200	; 0xc8
 8001bda:	f000 fa79 	bl	80020d0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001bde:	2026      	movs	r0, #38	; 0x26
 8001be0:	f000 f88b 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001be4:	2001      	movs	r0, #1
 8001be6:	f000 f895 	bl	8001d14 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001bea:	20e0      	movs	r0, #224	; 0xe0
 8001bec:	f000 f885 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001bf0:	200f      	movs	r0, #15
 8001bf2:	f000 f88f 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001bf6:	2029      	movs	r0, #41	; 0x29
 8001bf8:	f000 f88c 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001bfc:	2024      	movs	r0, #36	; 0x24
 8001bfe:	f000 f889 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001c02:	200c      	movs	r0, #12
 8001c04:	f000 f886 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001c08:	200e      	movs	r0, #14
 8001c0a:	f000 f883 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001c0e:	2009      	movs	r0, #9
 8001c10:	f000 f880 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001c14:	204e      	movs	r0, #78	; 0x4e
 8001c16:	f000 f87d 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001c1a:	2078      	movs	r0, #120	; 0x78
 8001c1c:	f000 f87a 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001c20:	203c      	movs	r0, #60	; 0x3c
 8001c22:	f000 f877 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001c26:	2009      	movs	r0, #9
 8001c28:	f000 f874 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001c2c:	2013      	movs	r0, #19
 8001c2e:	f000 f871 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001c32:	2005      	movs	r0, #5
 8001c34:	f000 f86e 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001c38:	2017      	movs	r0, #23
 8001c3a:	f000 f86b 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001c3e:	2011      	movs	r0, #17
 8001c40:	f000 f868 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c44:	2000      	movs	r0, #0
 8001c46:	f000 f865 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001c4a:	20e1      	movs	r0, #225	; 0xe1
 8001c4c:	f000 f855 	bl	8001cfa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001c50:	2000      	movs	r0, #0
 8001c52:	f000 f85f 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001c56:	2016      	movs	r0, #22
 8001c58:	f000 f85c 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001c5c:	201b      	movs	r0, #27
 8001c5e:	f000 f859 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001c62:	2004      	movs	r0, #4
 8001c64:	f000 f856 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001c68:	2011      	movs	r0, #17
 8001c6a:	f000 f853 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001c6e:	2007      	movs	r0, #7
 8001c70:	f000 f850 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001c74:	2031      	movs	r0, #49	; 0x31
 8001c76:	f000 f84d 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001c7a:	2033      	movs	r0, #51	; 0x33
 8001c7c:	f000 f84a 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001c80:	2042      	movs	r0, #66	; 0x42
 8001c82:	f000 f847 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001c86:	2005      	movs	r0, #5
 8001c88:	f000 f844 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001c8c:	200c      	movs	r0, #12
 8001c8e:	f000 f841 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001c92:	200a      	movs	r0, #10
 8001c94:	f000 f83e 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001c98:	2028      	movs	r0, #40	; 0x28
 8001c9a:	f000 f83b 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001c9e:	202f      	movs	r0, #47	; 0x2f
 8001ca0:	f000 f838 	bl	8001d14 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001ca4:	200f      	movs	r0, #15
 8001ca6:	f000 f835 	bl	8001d14 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001caa:	2011      	movs	r0, #17
 8001cac:	f000 f825 	bl	8001cfa <ili9341_WriteReg>
  LCD_Delay(200);
 8001cb0:	20c8      	movs	r0, #200	; 0xc8
 8001cb2:	f000 fa0d 	bl	80020d0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001cb6:	2029      	movs	r0, #41	; 0x29
 8001cb8:	f000 f81f 	bl	8001cfa <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001cbc:	202c      	movs	r0, #44	; 0x2c
 8001cbe:	f000 f81c 	bl	8001cfa <ili9341_WriteReg>
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001cca:	f000 f913 	bl	8001ef4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001cce:	2103      	movs	r1, #3
 8001cd0:	20d3      	movs	r0, #211	; 0xd3
 8001cd2:	f000 f82c 	bl	8001d2e <ili9341_ReadData>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	b29b      	uxth	r3, r3
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001ce2:	2029      	movs	r0, #41	; 0x29
 8001ce4:	f000 f809 	bl	8001cfa <ili9341_WriteReg>
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}

08001cec <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001cf0:	2028      	movs	r0, #40	; 0x28
 8001cf2:	f000 f802 	bl	8001cfa <ili9341_WriteReg>
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f98e 	bl	8002028 <LCD_IO_WriteReg>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 f95f 	bl	8001fe4 <LCD_IO_WriteData>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	460a      	mov	r2, r1
 8001d38:	80fb      	strh	r3, [r7, #6]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001d3e:	797a      	ldrb	r2, [r7, #5]
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 f991 	bl	800206c <LCD_IO_ReadData>
 8001d4a:	4603      	mov	r3, r0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001d58:	23f0      	movs	r3, #240	; 0xf0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001d68:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001d7c:	4819      	ldr	r0, [pc, #100]	; (8001de4 <SPIx_Init+0x6c>)
 8001d7e:	f004 ff6c 	bl	8006c5a <HAL_SPI_GetState>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d12b      	bne.n	8001de0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <SPIx_Init+0x6c>)
 8001d8a:	4a17      	ldr	r2, [pc, #92]	; (8001de8 <SPIx_Init+0x70>)
 8001d8c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <SPIx_Init+0x6c>)
 8001d90:	2218      	movs	r2, #24
 8001d92:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <SPIx_Init+0x6c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <SPIx_Init+0x6c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001da0:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <SPIx_Init+0x6c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001da6:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <SPIx_Init+0x6c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <SPIx_Init+0x6c>)
 8001dae:	2207      	movs	r2, #7
 8001db0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <SPIx_Init+0x6c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <SPIx_Init+0x6c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <SPIx_Init+0x6c>)
 8001dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <SPIx_Init+0x6c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <SPIx_Init+0x6c>)
 8001dce:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dd2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001dd4:	4803      	ldr	r0, [pc, #12]	; (8001de4 <SPIx_Init+0x6c>)
 8001dd6:	f000 f853 	bl	8001e80 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001dda:	4802      	ldr	r0, [pc, #8]	; (8001de4 <SPIx_Init+0x6c>)
 8001ddc:	f004 fa9d 	bl	800631a <HAL_SPI_Init>
  } 
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000674 	.word	0x20000674
 8001de8:	40015000 	.word	0x40015000

08001dec <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <SPIx_Read+0x38>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f107 0108 	add.w	r1, r7, #8
 8001e06:	4808      	ldr	r0, [pc, #32]	; (8001e28 <SPIx_Read+0x3c>)
 8001e08:	f004 fc74 	bl	80066f4 <HAL_SPI_Receive>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001e16:	f000 f827 	bl	8001e68 <SPIx_Error>
  }
  
  return readvalue;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	2000003c 	.word	0x2000003c
 8001e28:	20000674 	.word	0x20000674

08001e2c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <SPIx_Write+0x34>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	1db9      	adds	r1, r7, #6
 8001e40:	2201      	movs	r2, #1
 8001e42:	4808      	ldr	r0, [pc, #32]	; (8001e64 <SPIx_Write+0x38>)
 8001e44:	f004 fb1a 	bl	800647c <HAL_SPI_Transmit>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001e52:	f000 f809 	bl	8001e68 <SPIx_Error>
  }
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000003c 	.word	0x2000003c
 8001e64:	20000674 	.word	0x20000674

08001e68 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001e6c:	4803      	ldr	r0, [pc, #12]	; (8001e7c <SPIx_Error+0x14>)
 8001e6e:	f004 fadd 	bl	800642c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001e72:	f7ff ff81 	bl	8001d78 <SPIx_Init>
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000674 	.word	0x20000674

08001e80 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	4b17      	ldr	r3, [pc, #92]	; (8001eec <SPIx_MspInit+0x6c>)
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	4a16      	ldr	r2, [pc, #88]	; (8001eec <SPIx_MspInit+0x6c>)
 8001e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e96:	6453      	str	r3, [r2, #68]	; 0x44
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <SPIx_MspInit+0x6c>)
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	4b10      	ldr	r3, [pc, #64]	; (8001eec <SPIx_MspInit+0x6c>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <SPIx_MspInit+0x6c>)
 8001eae:	f043 0320 	orr.w	r3, r3, #32
 8001eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <SPIx_MspInit+0x6c>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001ec0:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001ed2:	2305      	movs	r3, #5
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	4619      	mov	r1, r3
 8001edc:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <SPIx_MspInit+0x70>)
 8001ede:	f002 fadd 	bl	800449c <HAL_GPIO_Init>
}
 8001ee2:	bf00      	nop
 8001ee4:	3728      	adds	r7, #40	; 0x28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40021400 	.word	0x40021400

08001ef4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001efa:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <LCD_IO_Init+0xe0>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d164      	bne.n	8001fcc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001f02:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <LCD_IO_Init+0xe0>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	4b32      	ldr	r3, [pc, #200]	; (8001fd8 <LCD_IO_Init+0xe4>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	4a31      	ldr	r2, [pc, #196]	; (8001fd8 <LCD_IO_Init+0xe4>)
 8001f12:	f043 0308 	orr.w	r3, r3, #8
 8001f16:	6313      	str	r3, [r2, #48]	; 0x30
 8001f18:	4b2f      	ldr	r3, [pc, #188]	; (8001fd8 <LCD_IO_Init+0xe4>)
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001f32:	2302      	movs	r3, #2
 8001f34:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001f36:	f107 030c 	add.w	r3, r7, #12
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4827      	ldr	r0, [pc, #156]	; (8001fdc <LCD_IO_Init+0xe8>)
 8001f3e:	f002 faad 	bl	800449c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <LCD_IO_Init+0xe4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a23      	ldr	r2, [pc, #140]	; (8001fd8 <LCD_IO_Init+0xe4>)
 8001f4c:	f043 0308 	orr.w	r3, r3, #8
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <LCD_IO_Init+0xe4>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f64:	2301      	movs	r3, #1
 8001f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001f70:	f107 030c 	add.w	r3, r7, #12
 8001f74:	4619      	mov	r1, r3
 8001f76:	4819      	ldr	r0, [pc, #100]	; (8001fdc <LCD_IO_Init+0xe8>)
 8001f78:	f002 fa90 	bl	800449c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <LCD_IO_Init+0xe4>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <LCD_IO_Init+0xe4>)
 8001f86:	f043 0304 	orr.w	r3, r3, #4
 8001f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <LCD_IO_Init+0xe4>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001f98:	2304      	movs	r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	4619      	mov	r1, r3
 8001fae:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <LCD_IO_Init+0xec>)
 8001fb0:	f002 fa74 	bl	800449c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2104      	movs	r1, #4
 8001fb8:	4809      	ldr	r0, [pc, #36]	; (8001fe0 <LCD_IO_Init+0xec>)
 8001fba:	f002 fd27 	bl	8004a0c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	4807      	ldr	r0, [pc, #28]	; (8001fe0 <LCD_IO_Init+0xec>)
 8001fc4:	f002 fd22 	bl	8004a0c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001fc8:	f7ff fed6 	bl	8001d78 <SPIx_Init>
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200006cc 	.word	0x200006cc
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020c00 	.word	0x40020c00
 8001fe0:	40020800 	.word	0x40020800

08001fe4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ff4:	480a      	ldr	r0, [pc, #40]	; (8002020 <LCD_IO_WriteData+0x3c>)
 8001ff6:	f002 fd09 	bl	8004a0c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2104      	movs	r1, #4
 8001ffe:	4809      	ldr	r0, [pc, #36]	; (8002024 <LCD_IO_WriteData+0x40>)
 8002000:	f002 fd04 	bl	8004a0c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff ff10 	bl	8001e2c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800200c:	2201      	movs	r2, #1
 800200e:	2104      	movs	r1, #4
 8002010:	4804      	ldr	r0, [pc, #16]	; (8002024 <LCD_IO_WriteData+0x40>)
 8002012:	f002 fcfb 	bl	8004a0c <HAL_GPIO_WritePin>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40020c00 	.word	0x40020c00
 8002024:	40020800 	.word	0x40020800

08002028 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002032:	2200      	movs	r2, #0
 8002034:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002038:	480a      	ldr	r0, [pc, #40]	; (8002064 <LCD_IO_WriteReg+0x3c>)
 800203a:	f002 fce7 	bl	8004a0c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800203e:	2200      	movs	r2, #0
 8002040:	2104      	movs	r1, #4
 8002042:	4809      	ldr	r0, [pc, #36]	; (8002068 <LCD_IO_WriteReg+0x40>)
 8002044:	f002 fce2 	bl	8004a0c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	b29b      	uxth	r3, r3
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff feed 	bl	8001e2c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002052:	2201      	movs	r2, #1
 8002054:	2104      	movs	r1, #4
 8002056:	4804      	ldr	r0, [pc, #16]	; (8002068 <LCD_IO_WriteReg+0x40>)
 8002058:	f002 fcd8 	bl	8004a0c <HAL_GPIO_WritePin>
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40020c00 	.word	0x40020c00
 8002068:	40020800 	.word	0x40020800

0800206c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	460a      	mov	r2, r1
 8002076:	80fb      	strh	r3, [r7, #6]
 8002078:	4613      	mov	r3, r2
 800207a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002080:	2200      	movs	r2, #0
 8002082:	2104      	movs	r1, #4
 8002084:	4810      	ldr	r0, [pc, #64]	; (80020c8 <LCD_IO_ReadData+0x5c>)
 8002086:	f002 fcc1 	bl	8004a0c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800208a:	2200      	movs	r2, #0
 800208c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002090:	480e      	ldr	r0, [pc, #56]	; (80020cc <LCD_IO_ReadData+0x60>)
 8002092:	f002 fcbb 	bl	8004a0c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fec7 	bl	8001e2c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800209e:	797b      	ldrb	r3, [r7, #5]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fea3 	bl	8001dec <SPIx_Read>
 80020a6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80020a8:	2201      	movs	r2, #1
 80020aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ae:	4807      	ldr	r0, [pc, #28]	; (80020cc <LCD_IO_ReadData+0x60>)
 80020b0:	f002 fcac 	bl	8004a0c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80020b4:	2201      	movs	r2, #1
 80020b6:	2104      	movs	r1, #4
 80020b8:	4803      	ldr	r0, [pc, #12]	; (80020c8 <LCD_IO_ReadData+0x5c>)
 80020ba:	f002 fca7 	bl	8004a0c <HAL_GPIO_WritePin>
  
  return readvalue;
 80020be:	68fb      	ldr	r3, [r7, #12]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40020800 	.word	0x40020800
 80020cc:	40020c00 	.word	0x40020c00

080020d0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 ff87 	bl	8002fec <HAL_Delay>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80020ec:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <BSP_LCD_Init+0xbc>)
 80020ee:	4a2e      	ldr	r2, [pc, #184]	; (80021a8 <BSP_LCD_Init+0xc0>)
 80020f0:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80020f2:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <BSP_LCD_Init+0xbc>)
 80020f4:	2209      	movs	r2, #9
 80020f6:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80020f8:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <BSP_LCD_Init+0xbc>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80020fe:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <BSP_LCD_Init+0xbc>)
 8002100:	221d      	movs	r2, #29
 8002102:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002104:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <BSP_LCD_Init+0xbc>)
 8002106:	2203      	movs	r2, #3
 8002108:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800210a:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <BSP_LCD_Init+0xbc>)
 800210c:	f240 120d 	movw	r2, #269	; 0x10d
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <BSP_LCD_Init+0xbc>)
 8002114:	f240 1243 	movw	r2, #323	; 0x143
 8002118:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <BSP_LCD_Init+0xbc>)
 800211c:	f240 1217 	movw	r2, #279	; 0x117
 8002120:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <BSP_LCD_Init+0xbc>)
 8002124:	f240 1247 	movw	r2, #327	; 0x147
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800212a:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <BSP_LCD_Init+0xbc>)
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002132:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <BSP_LCD_Init+0xbc>)
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <BSP_LCD_Init+0xbc>)
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002142:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <BSP_LCD_Init+0xc4>)
 8002144:	2208      	movs	r2, #8
 8002146:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <BSP_LCD_Init+0xc4>)
 800214a:	22c0      	movs	r2, #192	; 0xc0
 800214c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <BSP_LCD_Init+0xc4>)
 8002150:	2204      	movs	r2, #4
 8002152:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <BSP_LCD_Init+0xc4>)
 8002156:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800215a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800215c:	4813      	ldr	r0, [pc, #76]	; (80021ac <BSP_LCD_Init+0xc4>)
 800215e:	f003 fe8b 	bl	8005e78 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <BSP_LCD_Init+0xbc>)
 8002164:	2200      	movs	r2, #0
 8002166:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <BSP_LCD_Init+0xbc>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <BSP_LCD_Init+0xbc>)
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <BSP_LCD_Init+0xbc>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800217a:	f000 fb3d 	bl	80027f8 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800217e:	4809      	ldr	r0, [pc, #36]	; (80021a4 <BSP_LCD_Init+0xbc>)
 8002180:	f002 fe1e 	bl	8004dc0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <BSP_LCD_Init+0xc8>)
 8002186:	4a0b      	ldr	r2, [pc, #44]	; (80021b4 <BSP_LCD_Init+0xcc>)
 8002188:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <BSP_LCD_Init+0xc8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002192:	f000 fd1f 	bl	8002bd4 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002196:	4808      	ldr	r0, [pc, #32]	; (80021b8 <BSP_LCD_Init+0xd0>)
 8002198:	f000 f8ce 	bl	8002338 <BSP_LCD_SetFont>

  return LCD_OK;
 800219c:	2300      	movs	r3, #0
}  
 800219e:	4618      	mov	r0, r3
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200006d0 	.word	0x200006d0
 80021a8:	40016800 	.word	0x40016800
 80021ac:	200007b8 	.word	0x200007b8
 80021b0:	20000804 	.word	0x20000804
 80021b4:	20000004 	.word	0x20000004
 80021b8:	20000040 	.word	0x20000040

080021bc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <BSP_LCD_GetXSize+0x14>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	4798      	blx	r3
 80021c8:	4603      	mov	r3, r0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000804 	.word	0x20000804

080021d4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <BSP_LCD_GetYSize+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	4798      	blx	r3
 80021e0:	4603      	mov	r3, r0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000804 	.word	0x20000804

080021ec <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b090      	sub	sp, #64	; 0x40
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80021fc:	f7ff ffde 	bl	80021bc <BSP_LCD_GetXSize>
 8002200:	4603      	mov	r3, r0
 8002202:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002208:	f7ff ffe4 	bl	80021d4 <BSP_LCD_GetYSize>
 800220c:	4603      	mov	r3, r0
 800220e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002218:	23ff      	movs	r3, #255	; 0xff
 800221a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002232:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002238:	2307      	movs	r3, #7
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800223c:	f7ff ffbe 	bl	80021bc <BSP_LCD_GetXSize>
 8002240:	4603      	mov	r3, r0
 8002242:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002244:	f7ff ffc6 	bl	80021d4 <BSP_LCD_GetYSize>
 8002248:	4603      	mov	r3, r0
 800224a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800224c:	88fa      	ldrh	r2, [r7, #6]
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	4619      	mov	r1, r3
 8002254:	4814      	ldr	r0, [pc, #80]	; (80022a8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002256:	f002 ff45 	bl	80050e4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800225a:	88fa      	ldrh	r2, [r7, #6]
 800225c:	4913      	ldr	r1, [pc, #76]	; (80022ac <BSP_LCD_LayerDefaultInit+0xc0>)
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	3304      	adds	r3, #4
 800226a:	f04f 32ff 	mov.w	r2, #4294967295
 800226e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002270:	88fa      	ldrh	r2, [r7, #6]
 8002272:	490e      	ldr	r1, [pc, #56]	; (80022ac <BSP_LCD_LayerDefaultInit+0xc0>)
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	3308      	adds	r3, #8
 8002280:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002282:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002284:	88fa      	ldrh	r2, [r7, #6]
 8002286:	4909      	ldr	r1, [pc, #36]	; (80022ac <BSP_LCD_LayerDefaultInit+0xc0>)
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002296:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <BSP_LCD_LayerDefaultInit+0xbc>)
 800229a:	f002 ff61 	bl	8005160 <HAL_LTDC_EnableDither>
}
 800229e:	bf00      	nop
 80022a0:	3740      	adds	r7, #64	; 0x40
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200006d0 	.word	0x200006d0
 80022ac:	200007ec 	.word	0x200007ec
 80022b0:	20000040 	.word	0x20000040

080022b4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <BSP_LCD_SelectLayer+0x1c>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	200007e8 	.word	0x200007e8

080022d4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <BSP_LCD_SetTextColor+0x28>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4907      	ldr	r1, [pc, #28]	; (8002300 <BSP_LCD_SetTextColor+0x2c>)
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	601a      	str	r2, [r3, #0]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	200007e8 	.word	0x200007e8
 8002300:	200007ec 	.word	0x200007ec

08002304 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <BSP_LCD_SetBackColor+0x2c>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4908      	ldr	r1, [pc, #32]	; (8002334 <BSP_LCD_SetBackColor+0x30>)
 8002312:	4613      	mov	r3, r2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	3304      	adds	r3, #4
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	601a      	str	r2, [r3, #0]
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	200007e8 	.word	0x200007e8
 8002334:	200007ec 	.word	0x200007ec

08002338 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <BSP_LCD_SetFont+0x2c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4908      	ldr	r1, [pc, #32]	; (8002368 <BSP_LCD_SetFont+0x30>)
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	3308      	adds	r3, #8
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	601a      	str	r2, [r3, #0]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	200007e8 	.word	0x200007e8
 8002368:	200007ec 	.word	0x200007ec

0800236c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	b085      	sub	sp, #20
 8002370:	af02      	add	r7, sp, #8
 8002372:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <BSP_LCD_Clear+0x48>)
 8002376:	681c      	ldr	r4, [r3, #0]
 8002378:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <BSP_LCD_Clear+0x48>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <BSP_LCD_Clear+0x4c>)
 800237e:	2134      	movs	r1, #52	; 0x34
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	335c      	adds	r3, #92	; 0x5c
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461e      	mov	r6, r3
 800238c:	f7ff ff16 	bl	80021bc <BSP_LCD_GetXSize>
 8002390:	4605      	mov	r5, r0
 8002392:	f7ff ff1f 	bl	80021d4 <BSP_LCD_GetYSize>
 8002396:	4602      	mov	r2, r0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	9301      	str	r3, [sp, #4]
 800239c:	2300      	movs	r3, #0
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	4613      	mov	r3, r2
 80023a2:	462a      	mov	r2, r5
 80023a4:	4631      	mov	r1, r6
 80023a6:	4620      	mov	r0, r4
 80023a8:	f000 fbdc 	bl	8002b64 <FillBuffer>
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b4:	200007e8 	.word	0x200007e8
 80023b8:	200006d0 	.word	0x200006d0

080023bc <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	80fb      	strh	r3, [r7, #6]
 80023c6:	460b      	mov	r3, r1
 80023c8:	80bb      	strh	r3, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80023ce:	4b1b      	ldr	r3, [pc, #108]	; (800243c <BSP_LCD_DisplayChar+0x80>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	491b      	ldr	r1, [pc, #108]	; (8002440 <BSP_LCD_DisplayChar+0x84>)
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	3308      	adds	r3, #8
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80023ea:	4b14      	ldr	r3, [pc, #80]	; (800243c <BSP_LCD_DisplayChar+0x80>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4c14      	ldr	r4, [pc, #80]	; (8002440 <BSP_LCD_DisplayChar+0x84>)
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4423      	add	r3, r4
 80023fa:	3308      	adds	r3, #8
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002400:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002404:	4b0d      	ldr	r3, [pc, #52]	; (800243c <BSP_LCD_DisplayChar+0x80>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4c0d      	ldr	r4, [pc, #52]	; (8002440 <BSP_LCD_DisplayChar+0x84>)
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4423      	add	r3, r4
 8002414:	3308      	adds	r3, #8
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	889b      	ldrh	r3, [r3, #4]
 800241a:	3307      	adds	r3, #7
 800241c:	2b00      	cmp	r3, #0
 800241e:	da00      	bge.n	8002422 <BSP_LCD_DisplayChar+0x66>
 8002420:	3307      	adds	r3, #7
 8002422:	10db      	asrs	r3, r3, #3
 8002424:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002428:	18ca      	adds	r2, r1, r3
 800242a:	88b9      	ldrh	r1, [r7, #4]
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fade 	bl	80029f0 <DrawChar>
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bd90      	pop	{r4, r7, pc}
 800243c:	200007e8 	.word	0x200007e8
 8002440:	200007ec 	.word	0x200007ec

08002444 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002444:	b5b0      	push	{r4, r5, r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	60ba      	str	r2, [r7, #8]
 800244c:	461a      	mov	r2, r3
 800244e:	4603      	mov	r3, r0
 8002450:	81fb      	strh	r3, [r7, #14]
 8002452:	460b      	mov	r3, r1
 8002454:	81bb      	strh	r3, [r7, #12]
 8002456:	4613      	mov	r3, r2
 8002458:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800245a:	2301      	movs	r3, #1
 800245c:	83fb      	strh	r3, [r7, #30]
 800245e:	2300      	movs	r3, #0
 8002460:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800246e:	e002      	b.n	8002476 <BSP_LCD_DisplayStringAt+0x32>
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	3301      	adds	r3, #1
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	617a      	str	r2, [r7, #20]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f6      	bne.n	8002470 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002482:	f7ff fe9b 	bl	80021bc <BSP_LCD_GetXSize>
 8002486:	4601      	mov	r1, r0
 8002488:	4b4b      	ldr	r3, [pc, #300]	; (80025b8 <BSP_LCD_DisplayStringAt+0x174>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	484b      	ldr	r0, [pc, #300]	; (80025bc <BSP_LCD_DisplayStringAt+0x178>)
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4403      	add	r3, r0
 8002498:	3308      	adds	r3, #8
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	889b      	ldrh	r3, [r3, #4]
 800249e:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a2:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d01c      	beq.n	80024e4 <BSP_LCD_DisplayStringAt+0xa0>
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	dc33      	bgt.n	8002516 <BSP_LCD_DisplayStringAt+0xd2>
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d002      	beq.n	80024b8 <BSP_LCD_DisplayStringAt+0x74>
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d019      	beq.n	80024ea <BSP_LCD_DisplayStringAt+0xa6>
 80024b6:	e02e      	b.n	8002516 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	1ad1      	subs	r1, r2, r3
 80024be:	4b3e      	ldr	r3, [pc, #248]	; (80025b8 <BSP_LCD_DisplayStringAt+0x174>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	483e      	ldr	r0, [pc, #248]	; (80025bc <BSP_LCD_DisplayStringAt+0x178>)
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4403      	add	r3, r0
 80024ce:	3308      	adds	r3, #8
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	889b      	ldrh	r3, [r3, #4]
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	085b      	lsrs	r3, r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	89fb      	ldrh	r3, [r7, #14]
 80024de:	4413      	add	r3, r2
 80024e0:	83fb      	strh	r3, [r7, #30]
      break;
 80024e2:	e01b      	b.n	800251c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80024e4:	89fb      	ldrh	r3, [r7, #14]
 80024e6:	83fb      	strh	r3, [r7, #30]
      break;
 80024e8:	e018      	b.n	800251c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	b299      	uxth	r1, r3
 80024f2:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <BSP_LCD_DisplayStringAt+0x174>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4831      	ldr	r0, [pc, #196]	; (80025bc <BSP_LCD_DisplayStringAt+0x178>)
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4403      	add	r3, r0
 8002502:	3308      	adds	r3, #8
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	889b      	ldrh	r3, [r3, #4]
 8002508:	fb11 f303 	smulbb	r3, r1, r3
 800250c:	b29a      	uxth	r2, r3
 800250e:	89fb      	ldrh	r3, [r7, #14]
 8002510:	4413      	add	r3, r2
 8002512:	83fb      	strh	r3, [r7, #30]
      break;
 8002514:	e002      	b.n	800251c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002516:	89fb      	ldrh	r3, [r7, #14]
 8002518:	83fb      	strh	r3, [r7, #30]
      break;
 800251a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800251c:	e01a      	b.n	8002554 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	89b9      	ldrh	r1, [r7, #12]
 8002524:	8bfb      	ldrh	r3, [r7, #30]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff48 	bl	80023bc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800252c:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <BSP_LCD_DisplayStringAt+0x174>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4922      	ldr	r1, [pc, #136]	; (80025bc <BSP_LCD_DisplayStringAt+0x178>)
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3308      	adds	r3, #8
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	889a      	ldrh	r2, [r3, #4]
 8002542:	8bfb      	ldrh	r3, [r7, #30]
 8002544:	4413      	add	r3, r2
 8002546:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	3301      	adds	r3, #1
 800254c:	60bb      	str	r3, [r7, #8]
    i++;
 800254e:	8bbb      	ldrh	r3, [r7, #28]
 8002550:	3301      	adds	r3, #1
 8002552:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2dc      	uxtb	r4, r3
 8002562:	f7ff fe2b 	bl	80021bc <BSP_LCD_GetXSize>
 8002566:	8bb9      	ldrh	r1, [r7, #28]
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <BSP_LCD_DisplayStringAt+0x174>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4d13      	ldr	r5, [pc, #76]	; (80025bc <BSP_LCD_DisplayStringAt+0x178>)
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	442b      	add	r3, r5
 8002578:	3308      	adds	r3, #8
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	889b      	ldrh	r3, [r3, #4]
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	1ac3      	subs	r3, r0, r3
 8002584:	b299      	uxth	r1, r3
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <BSP_LCD_DisplayStringAt+0x174>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	480c      	ldr	r0, [pc, #48]	; (80025bc <BSP_LCD_DisplayStringAt+0x178>)
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4403      	add	r3, r0
 8002596:	3308      	adds	r3, #8
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	889b      	ldrh	r3, [r3, #4]
 800259c:	4299      	cmp	r1, r3
 800259e:	bf2c      	ite	cs
 80025a0:	2301      	movcs	r3, #1
 80025a2:	2300      	movcc	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	4023      	ands	r3, r4
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1b7      	bne.n	800251e <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80025ae:	bf00      	nop
 80025b0:	bf00      	nop
 80025b2:	3720      	adds	r7, #32
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bdb0      	pop	{r4, r5, r7, pc}
 80025b8:	200007e8 	.word	0x200007e8
 80025bc:	200007ec 	.word	0x200007ec

080025c0 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80025c0:	b5b0      	push	{r4, r5, r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	4603      	mov	r3, r0
 80025c8:	80fb      	strh	r3, [r7, #6]
 80025ca:	460b      	mov	r3, r1
 80025cc:	80bb      	strh	r3, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80025d6:	4b16      	ldr	r3, [pc, #88]	; (8002630 <BSP_LCD_DrawHLine+0x70>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a16      	ldr	r2, [pc, #88]	; (8002634 <BSP_LCD_DrawHLine+0x74>)
 80025dc:	2134      	movs	r1, #52	; 0x34
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	4413      	add	r3, r2
 80025e4:	335c      	adds	r3, #92	; 0x5c
 80025e6:	681c      	ldr	r4, [r3, #0]
 80025e8:	f7ff fde8 	bl	80021bc <BSP_LCD_GetXSize>
 80025ec:	4602      	mov	r2, r0
 80025ee:	88bb      	ldrh	r3, [r7, #4]
 80025f0:	fb03 f202 	mul.w	r2, r3, r2
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4423      	add	r3, r4
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80025fe:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <BSP_LCD_DrawHLine+0x70>)
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	68f9      	ldr	r1, [r7, #12]
 8002604:	887c      	ldrh	r4, [r7, #2]
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <BSP_LCD_DrawHLine+0x70>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4d0b      	ldr	r5, [pc, #44]	; (8002638 <BSP_LCD_DrawHLine+0x78>)
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	442b      	add	r3, r5
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	2300      	movs	r3, #0
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2301      	movs	r3, #1
 8002620:	4622      	mov	r2, r4
 8002622:	f000 fa9f 	bl	8002b64 <FillBuffer>
}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bdb0      	pop	{r4, r5, r7, pc}
 800262e:	bf00      	nop
 8002630:	200007e8 	.word	0x200007e8
 8002634:	200006d0 	.word	0x200006d0
 8002638:	200007ec 	.word	0x200007ec

0800263c <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	b087      	sub	sp, #28
 8002640:	af02      	add	r7, sp, #8
 8002642:	4603      	mov	r3, r0
 8002644:	80fb      	strh	r3, [r7, #6]
 8002646:	460b      	mov	r3, r1
 8002648:	80bb      	strh	r3, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002652:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <BSP_LCD_DrawVLine+0x78>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <BSP_LCD_DrawVLine+0x7c>)
 8002658:	2134      	movs	r1, #52	; 0x34
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	335c      	adds	r3, #92	; 0x5c
 8002662:	681c      	ldr	r4, [r3, #0]
 8002664:	f7ff fdaa 	bl	80021bc <BSP_LCD_GetXSize>
 8002668:	4602      	mov	r2, r0
 800266a:	88bb      	ldrh	r3, [r7, #4]
 800266c:	fb03 f202 	mul.w	r2, r3, r2
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4423      	add	r3, r4
 8002678:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <BSP_LCD_DrawVLine+0x78>)
 800267c:	681c      	ldr	r4, [r3, #0]
 800267e:	68fd      	ldr	r5, [r7, #12]
 8002680:	887e      	ldrh	r6, [r7, #2]
 8002682:	f7ff fd9b 	bl	80021bc <BSP_LCD_GetXSize>
 8002686:	4603      	mov	r3, r0
 8002688:	1e59      	subs	r1, r3, #1
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <BSP_LCD_DrawVLine+0x78>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	480b      	ldr	r0, [pc, #44]	; (80026bc <BSP_LCD_DrawVLine+0x80>)
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4403      	add	r3, r0
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	9100      	str	r1, [sp, #0]
 80026a0:	4633      	mov	r3, r6
 80026a2:	2201      	movs	r2, #1
 80026a4:	4629      	mov	r1, r5
 80026a6:	4620      	mov	r0, r4
 80026a8:	f000 fa5c 	bl	8002b64 <FillBuffer>
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026b4:	200007e8 	.word	0x200007e8
 80026b8:	200006d0 	.word	0x200006d0
 80026bc:	200007ec 	.word	0x200007ec

080026c0 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4604      	mov	r4, r0
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	4623      	mov	r3, r4
 80026d0:	80fb      	strh	r3, [r7, #6]
 80026d2:	4603      	mov	r3, r0
 80026d4:	80bb      	strh	r3, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	807b      	strh	r3, [r7, #2]
 80026da:	4613      	mov	r3, r2
 80026dc:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	88b9      	ldrh	r1, [r7, #4]
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff6b 	bl	80025c0 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80026ea:	88ba      	ldrh	r2, [r7, #4]
 80026ec:	883b      	ldrh	r3, [r7, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	b299      	uxth	r1, r3
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff62 	bl	80025c0 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80026fc:	883a      	ldrh	r2, [r7, #0]
 80026fe:	88b9      	ldrh	r1, [r7, #4]
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ff9a 	bl	800263c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8002708:	88fa      	ldrh	r2, [r7, #6]
 800270a:	887b      	ldrh	r3, [r7, #2]
 800270c:	4413      	add	r3, r2
 800270e:	b29b      	uxth	r3, r3
 8002710:	883a      	ldrh	r2, [r7, #0]
 8002712:	88b9      	ldrh	r1, [r7, #4]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff91 	bl	800263c <BSP_LCD_DrawVLine>
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bd90      	pop	{r4, r7, pc}
	...

08002724 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af02      	add	r7, sp, #8
 800272c:	4604      	mov	r4, r0
 800272e:	4608      	mov	r0, r1
 8002730:	4611      	mov	r1, r2
 8002732:	461a      	mov	r2, r3
 8002734:	4623      	mov	r3, r4
 8002736:	80fb      	strh	r3, [r7, #6]
 8002738:	4603      	mov	r3, r0
 800273a:	80bb      	strh	r3, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	807b      	strh	r3, [r7, #2]
 8002740:	4613      	mov	r3, r2
 8002742:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002748:	4b20      	ldr	r3, [pc, #128]	; (80027cc <BSP_LCD_FillRect+0xa8>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4920      	ldr	r1, [pc, #128]	; (80027d0 <BSP_LCD_FillRect+0xac>)
 800274e:	4613      	mov	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fdba 	bl	80022d4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <BSP_LCD_FillRect+0xa8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1b      	ldr	r2, [pc, #108]	; (80027d4 <BSP_LCD_FillRect+0xb0>)
 8002766:	2134      	movs	r1, #52	; 0x34
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	335c      	adds	r3, #92	; 0x5c
 8002770:	681c      	ldr	r4, [r3, #0]
 8002772:	f7ff fd23 	bl	80021bc <BSP_LCD_GetXSize>
 8002776:	4602      	mov	r2, r0
 8002778:	88bb      	ldrh	r3, [r7, #4]
 800277a:	fb03 f202 	mul.w	r2, r3, r2
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4423      	add	r3, r4
 8002786:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <BSP_LCD_FillRect+0xa8>)
 800278a:	681c      	ldr	r4, [r3, #0]
 800278c:	68fd      	ldr	r5, [r7, #12]
 800278e:	887e      	ldrh	r6, [r7, #2]
 8002790:	f8b7 8000 	ldrh.w	r8, [r7]
 8002794:	f7ff fd12 	bl	80021bc <BSP_LCD_GetXSize>
 8002798:	4602      	mov	r2, r0
 800279a:	887b      	ldrh	r3, [r7, #2]
 800279c:	1ad1      	subs	r1, r2, r3
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <BSP_LCD_FillRect+0xa8>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	480b      	ldr	r0, [pc, #44]	; (80027d0 <BSP_LCD_FillRect+0xac>)
 80027a4:	4613      	mov	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4403      	add	r3, r0
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	9301      	str	r3, [sp, #4]
 80027b2:	9100      	str	r1, [sp, #0]
 80027b4:	4643      	mov	r3, r8
 80027b6:	4632      	mov	r2, r6
 80027b8:	4629      	mov	r1, r5
 80027ba:	4620      	mov	r0, r4
 80027bc:	f000 f9d2 	bl	8002b64 <FillBuffer>
}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027ca:	bf00      	nop
 80027cc:	200007e8 	.word	0x200007e8
 80027d0:	200007ec 	.word	0x200007ec
 80027d4:	200006d0 	.word	0x200006d0

080027d8 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <BSP_LCD_DisplayOn+0x1c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80027e6:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <BSP_LCD_DisplayOn+0x1c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4798      	blx	r3
  }
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000804 	.word	0x20000804

080027f8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08e      	sub	sp, #56	; 0x38
 80027fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
 8002802:	4b61      	ldr	r3, [pc, #388]	; (8002988 <BSP_LCD_MspInit+0x190>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	4a60      	ldr	r2, [pc, #384]	; (8002988 <BSP_LCD_MspInit+0x190>)
 8002808:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800280c:	6453      	str	r3, [r2, #68]	; 0x44
 800280e:	4b5e      	ldr	r3, [pc, #376]	; (8002988 <BSP_LCD_MspInit+0x190>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002816:	623b      	str	r3, [r7, #32]
 8002818:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	4b5a      	ldr	r3, [pc, #360]	; (8002988 <BSP_LCD_MspInit+0x190>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a59      	ldr	r2, [pc, #356]	; (8002988 <BSP_LCD_MspInit+0x190>)
 8002824:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b57      	ldr	r3, [pc, #348]	; (8002988 <BSP_LCD_MspInit+0x190>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	4b53      	ldr	r3, [pc, #332]	; (8002988 <BSP_LCD_MspInit+0x190>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a52      	ldr	r2, [pc, #328]	; (8002988 <BSP_LCD_MspInit+0x190>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b50      	ldr	r3, [pc, #320]	; (8002988 <BSP_LCD_MspInit+0x190>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	61bb      	str	r3, [r7, #24]
 8002850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	4b4c      	ldr	r3, [pc, #304]	; (8002988 <BSP_LCD_MspInit+0x190>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	4a4b      	ldr	r2, [pc, #300]	; (8002988 <BSP_LCD_MspInit+0x190>)
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	6313      	str	r3, [r2, #48]	; 0x30
 8002862:	4b49      	ldr	r3, [pc, #292]	; (8002988 <BSP_LCD_MspInit+0x190>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	4b45      	ldr	r3, [pc, #276]	; (8002988 <BSP_LCD_MspInit+0x190>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a44      	ldr	r2, [pc, #272]	; (8002988 <BSP_LCD_MspInit+0x190>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b42      	ldr	r3, [pc, #264]	; (8002988 <BSP_LCD_MspInit+0x190>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <BSP_LCD_MspInit+0x190>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a3d      	ldr	r2, [pc, #244]	; (8002988 <BSP_LCD_MspInit+0x190>)
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <BSP_LCD_MspInit+0x190>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	4b37      	ldr	r3, [pc, #220]	; (8002988 <BSP_LCD_MspInit+0x190>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a36      	ldr	r2, [pc, #216]	; (8002988 <BSP_LCD_MspInit+0x190>)
 80028b0:	f043 0320 	orr.w	r3, r3, #32
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b34      	ldr	r3, [pc, #208]	; (8002988 <BSP_LCD_MspInit+0x190>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	4b30      	ldr	r3, [pc, #192]	; (8002988 <BSP_LCD_MspInit+0x190>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a2f      	ldr	r2, [pc, #188]	; (8002988 <BSP_LCD_MspInit+0x190>)
 80028cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b2d      	ldr	r3, [pc, #180]	; (8002988 <BSP_LCD_MspInit+0x190>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80028de:	f641 0358 	movw	r3, #6232	; 0x1858
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80028e4:	2302      	movs	r3, #2
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80028ec:	2302      	movs	r3, #2
 80028ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80028f0:	230e      	movs	r3, #14
 80028f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80028f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f8:	4619      	mov	r1, r3
 80028fa:	4824      	ldr	r0, [pc, #144]	; (800298c <BSP_LCD_MspInit+0x194>)
 80028fc:	f001 fdce 	bl	800449c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002900:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800290a:	4619      	mov	r1, r3
 800290c:	4820      	ldr	r0, [pc, #128]	; (8002990 <BSP_LCD_MspInit+0x198>)
 800290e:	f001 fdc5 	bl	800449c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002912:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800291c:	4619      	mov	r1, r3
 800291e:	481d      	ldr	r0, [pc, #116]	; (8002994 <BSP_LCD_MspInit+0x19c>)
 8002920:	f001 fdbc 	bl	800449c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002924:	2348      	movs	r3, #72	; 0x48
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292c:	4619      	mov	r1, r3
 800292e:	481a      	ldr	r0, [pc, #104]	; (8002998 <BSP_LCD_MspInit+0x1a0>)
 8002930:	f001 fdb4 	bl	800449c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800293a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800293e:	4619      	mov	r1, r3
 8002940:	4816      	ldr	r0, [pc, #88]	; (800299c <BSP_LCD_MspInit+0x1a4>)
 8002942:	f001 fdab 	bl	800449c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002946:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	4619      	mov	r1, r3
 8002952:	4813      	ldr	r0, [pc, #76]	; (80029a0 <BSP_LCD_MspInit+0x1a8>)
 8002954:	f001 fda2 	bl	800449c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002958:	2303      	movs	r3, #3
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800295c:	2309      	movs	r3, #9
 800295e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002964:	4619      	mov	r1, r3
 8002966:	480a      	ldr	r0, [pc, #40]	; (8002990 <BSP_LCD_MspInit+0x198>)
 8002968:	f001 fd98 	bl	800449c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800296c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002976:	4619      	mov	r1, r3
 8002978:	4809      	ldr	r0, [pc, #36]	; (80029a0 <BSP_LCD_MspInit+0x1a8>)
 800297a:	f001 fd8f 	bl	800449c <HAL_GPIO_Init>
}
 800297e:	bf00      	nop
 8002980:	3738      	adds	r7, #56	; 0x38
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800
 800298c:	40020000 	.word	0x40020000
 8002990:	40020400 	.word	0x40020400
 8002994:	40020800 	.word	0x40020800
 8002998:	40020c00 	.word	0x40020c00
 800299c:	40021400 	.word	0x40021400
 80029a0:	40021800 	.word	0x40021800

080029a4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80029a4:	b5b0      	push	{r4, r5, r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	603a      	str	r2, [r7, #0]
 80029ae:	80fb      	strh	r3, [r7, #6]
 80029b0:	460b      	mov	r3, r1
 80029b2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <BSP_LCD_DrawPixel+0x44>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0c      	ldr	r2, [pc, #48]	; (80029ec <BSP_LCD_DrawPixel+0x48>)
 80029ba:	2134      	movs	r1, #52	; 0x34
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	335c      	adds	r3, #92	; 0x5c
 80029c4:	681c      	ldr	r4, [r3, #0]
 80029c6:	88bd      	ldrh	r5, [r7, #4]
 80029c8:	f7ff fbf8 	bl	80021bc <BSP_LCD_GetXSize>
 80029cc:	4603      	mov	r3, r0
 80029ce:	fb03 f205 	mul.w	r2, r3, r5
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4423      	add	r3, r4
 80029da:	461a      	mov	r2, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6013      	str	r3, [r2, #0]
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bdb0      	pop	{r4, r5, r7, pc}
 80029e8:	200007e8 	.word	0x200007e8
 80029ec:	200006d0 	.word	0x200006d0

080029f0 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	603a      	str	r2, [r7, #0]
 80029fa:	80fb      	strh	r3, [r7, #6]
 80029fc:	460b      	mov	r3, r1
 80029fe:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	2300      	movs	r3, #0
 8002a06:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002a0c:	4b53      	ldr	r3, [pc, #332]	; (8002b5c <DrawChar+0x16c>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4953      	ldr	r1, [pc, #332]	; (8002b60 <DrawChar+0x170>)
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	88db      	ldrh	r3, [r3, #6]
 8002a22:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002a24:	4b4d      	ldr	r3, [pc, #308]	; (8002b5c <DrawChar+0x16c>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	494d      	ldr	r1, [pc, #308]	; (8002b60 <DrawChar+0x170>)
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	3308      	adds	r3, #8
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	889b      	ldrh	r3, [r3, #4]
 8002a3a:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002a3c:	8a3b      	ldrh	r3, [r7, #16]
 8002a3e:	3307      	adds	r3, #7
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	da00      	bge.n	8002a46 <DrawChar+0x56>
 8002a44:	3307      	adds	r3, #7
 8002a46:	10db      	asrs	r3, r3, #3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	8a3b      	ldrh	r3, [r7, #16]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	e076      	b.n	8002b4a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002a5c:	8a3b      	ldrh	r3, [r7, #16]
 8002a5e:	3307      	adds	r3, #7
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	da00      	bge.n	8002a66 <DrawChar+0x76>
 8002a64:	3307      	adds	r3, #7
 8002a66:	10db      	asrs	r3, r3, #3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	fb02 f303 	mul.w	r3, r2, r3
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002a76:	8a3b      	ldrh	r3, [r7, #16]
 8002a78:	3307      	adds	r3, #7
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da00      	bge.n	8002a80 <DrawChar+0x90>
 8002a7e:	3307      	adds	r3, #7
 8002a80:	10db      	asrs	r3, r3, #3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d002      	beq.n	8002a8c <DrawChar+0x9c>
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d004      	beq.n	8002a94 <DrawChar+0xa4>
 8002a8a:	e00c      	b.n	8002aa6 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	617b      	str	r3, [r7, #20]
      break;
 8002a92:	e016      	b.n	8002ac2 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	3201      	adds	r2, #1
 8002a9e:	7812      	ldrb	r2, [r2, #0]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
      break;
 8002aa4:	e00d      	b.n	8002ac2 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	041a      	lsls	r2, r3, #16
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	3202      	adds	r2, #2
 8002aba:	7812      	ldrb	r2, [r2, #0]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
      break;
 8002ac0:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	e036      	b.n	8002b36 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002ac8:	8a3a      	ldrh	r2, [r7, #16]
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	1ad2      	subs	r2, r2, r3
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d012      	beq.n	8002b0a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	4413      	add	r3, r2
 8002aec:	b298      	uxth	r0, r3
 8002aee:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <DrawChar+0x16c>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	491b      	ldr	r1, [pc, #108]	; (8002b60 <DrawChar+0x170>)
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	88bb      	ldrh	r3, [r7, #4]
 8002b02:	4619      	mov	r1, r3
 8002b04:	f7ff ff4e 	bl	80029a4 <BSP_LCD_DrawPixel>
 8002b08:	e012      	b.n	8002b30 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	4413      	add	r3, r2
 8002b12:	b298      	uxth	r0, r3
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <DrawChar+0x16c>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4911      	ldr	r1, [pc, #68]	; (8002b60 <DrawChar+0x170>)
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	3304      	adds	r3, #4
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	88bb      	ldrh	r3, [r7, #4]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f7ff ff3a 	bl	80029a4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	3301      	adds	r3, #1
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	8a3b      	ldrh	r3, [r7, #16]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d3c4      	bcc.n	8002ac8 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002b3e:	88bb      	ldrh	r3, [r7, #4]
 8002b40:	3301      	adds	r3, #1
 8002b42:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	3301      	adds	r3, #1
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	8a7b      	ldrh	r3, [r7, #18]
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d384      	bcc.n	8002a5c <DrawChar+0x6c>
  }
}
 8002b52:	bf00      	nop
 8002b54:	bf00      	nop
 8002b56:	3720      	adds	r7, #32
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	200007e8 	.word	0x200007e8
 8002b60:	200007ec 	.word	0x200007ec

08002b64 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002b72:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <FillBuffer+0x68>)
 8002b74:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b78:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002b7a:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <FillBuffer+0x68>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002b80:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <FillBuffer+0x68>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002b86:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <FillBuffer+0x68>)
 8002b88:	4a11      	ldr	r2, [pc, #68]	; (8002bd0 <FillBuffer+0x6c>)
 8002b8a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002b8c:	480f      	ldr	r0, [pc, #60]	; (8002bcc <FillBuffer+0x68>)
 8002b8e:	f001 f8e9 	bl	8003d64 <HAL_DMA2D_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d115      	bne.n	8002bc4 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002b98:	68f9      	ldr	r1, [r7, #12]
 8002b9a:	480c      	ldr	r0, [pc, #48]	; (8002bcc <FillBuffer+0x68>)
 8002b9c:	f001 fb50 	bl	8004240 <HAL_DMA2D_ConfigLayer>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10e      	bne.n	8002bc4 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69f9      	ldr	r1, [r7, #28]
 8002bb0:	4806      	ldr	r0, [pc, #24]	; (8002bcc <FillBuffer+0x68>)
 8002bb2:	f001 f920 	bl	8003df6 <HAL_DMA2D_Start>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d103      	bne.n	8002bc4 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002bbc:	210a      	movs	r1, #10
 8002bbe:	4803      	ldr	r0, [pc, #12]	; (8002bcc <FillBuffer+0x68>)
 8002bc0:	f001 f944 	bl	8003e4c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000778 	.word	0x20000778
 8002bd0:	4002b000 	.word	0x4002b000

08002bd4 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002bd8:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <BSP_SDRAM_Init+0xac>)
 8002bda:	4a2a      	ldr	r2, [pc, #168]	; (8002c84 <BSP_SDRAM_Init+0xb0>)
 8002bdc:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002bde:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <BSP_SDRAM_Init+0xb4>)
 8002be0:	2202      	movs	r2, #2
 8002be2:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002be4:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <BSP_SDRAM_Init+0xb4>)
 8002be6:	2207      	movs	r2, #7
 8002be8:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002bea:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <BSP_SDRAM_Init+0xb4>)
 8002bec:	2204      	movs	r2, #4
 8002bee:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <BSP_SDRAM_Init+0xb4>)
 8002bf2:	2207      	movs	r2, #7
 8002bf4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002bf6:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <BSP_SDRAM_Init+0xb4>)
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002bfc:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <BSP_SDRAM_Init+0xb4>)
 8002bfe:	2202      	movs	r2, #2
 8002c00:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002c02:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <BSP_SDRAM_Init+0xb4>)
 8002c04:	2202      	movs	r2, #2
 8002c06:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002c08:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <BSP_SDRAM_Init+0xac>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <BSP_SDRAM_Init+0xac>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002c14:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <BSP_SDRAM_Init+0xac>)
 8002c16:	2204      	movs	r2, #4
 8002c18:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002c1a:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <BSP_SDRAM_Init+0xac>)
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002c20:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <BSP_SDRAM_Init+0xac>)
 8002c22:	2240      	movs	r2, #64	; 0x40
 8002c24:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002c26:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <BSP_SDRAM_Init+0xac>)
 8002c28:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002c2c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002c2e:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <BSP_SDRAM_Init+0xac>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002c34:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <BSP_SDRAM_Init+0xac>)
 8002c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c3a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002c3c:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <BSP_SDRAM_Init+0xac>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002c42:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <BSP_SDRAM_Init+0xac>)
 8002c44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	480c      	ldr	r0, [pc, #48]	; (8002c80 <BSP_SDRAM_Init+0xac>)
 8002c4e:	f000 f87f 	bl	8002d50 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002c52:	490d      	ldr	r1, [pc, #52]	; (8002c88 <BSP_SDRAM_Init+0xb4>)
 8002c54:	480a      	ldr	r0, [pc, #40]	; (8002c80 <BSP_SDRAM_Init+0xac>)
 8002c56:	f003 facf 	bl	80061f8 <HAL_SDRAM_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002c60:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <BSP_SDRAM_Init+0xb8>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	701a      	strb	r2, [r3, #0]
 8002c66:	e002      	b.n	8002c6e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <BSP_SDRAM_Init+0xb8>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002c6e:	f240 506a 	movw	r0, #1386	; 0x56a
 8002c72:	f000 f80d 	bl	8002c90 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <BSP_SDRAM_Init+0xb8>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000808 	.word	0x20000808
 8002c84:	a0000140 	.word	0xa0000140
 8002c88:	2000083c 	.word	0x2000083c
 8002c8c:	20000048 	.word	0x20000048

08002c90 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002c9c:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ca4:	2208      	movs	r2, #8
 8002ca6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002ca8:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cb8:	4923      	ldr	r1, [pc, #140]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cba:	4824      	ldr	r0, [pc, #144]	; (8002d4c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002cbc:	f003 fad0 	bl	8006260 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	f000 f993 	bl	8002fec <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002cc6:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cc8:	2202      	movs	r2, #2
 8002cca:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002ccc:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cce:	2208      	movs	r2, #8
 8002cd0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002cd2:	4b1d      	ldr	r3, [pc, #116]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ce2:	4919      	ldr	r1, [pc, #100]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ce4:	4819      	ldr	r0, [pc, #100]	; (8002d4c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ce6:	f003 fabb 	bl	8006260 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002cea:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cec:	2203      	movs	r2, #3
 8002cee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002cf0:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002cf6:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d06:	4910      	ldr	r1, [pc, #64]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d08:	4810      	ldr	r0, [pc, #64]	; (8002d4c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d0a:	f003 faa9 	bl	8006260 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002d0e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002d12:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d16:	2204      	movs	r2, #4
 8002d18:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4a07      	ldr	r2, [pc, #28]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d2a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d30:	4905      	ldr	r1, [pc, #20]	; (8002d48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d32:	4806      	ldr	r0, [pc, #24]	; (8002d4c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d34:	f003 fa94 	bl	8006260 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4804      	ldr	r0, [pc, #16]	; (8002d4c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d3c:	f003 fac5 	bl	80062ca <HAL_SDRAM_ProgramRefreshRate>
}
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20000858 	.word	0x20000858
 8002d4c:	20000808 	.word	0x20000808

08002d50 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b090      	sub	sp, #64	; 0x40
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80ec 	beq.w	8002f3a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d66:	4b77      	ldr	r3, [pc, #476]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	4a76      	ldr	r2, [pc, #472]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6393      	str	r3, [r2, #56]	; 0x38
 8002d72:	4b74      	ldr	r3, [pc, #464]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
 8002d82:	4b70      	ldr	r3, [pc, #448]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a6f      	ldr	r2, [pc, #444]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002d88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b6d      	ldr	r3, [pc, #436]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	623b      	str	r3, [r7, #32]
 8002d9e:	4b69      	ldr	r3, [pc, #420]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a68      	ldr	r2, [pc, #416]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b66      	ldr	r3, [pc, #408]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	623b      	str	r3, [r7, #32]
 8002db4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	4b62      	ldr	r3, [pc, #392]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a61      	ldr	r2, [pc, #388]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002dc0:	f043 0304 	orr.w	r3, r3, #4
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b5f      	ldr	r3, [pc, #380]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	4b5b      	ldr	r3, [pc, #364]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4a5a      	ldr	r2, [pc, #360]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002ddc:	f043 0308 	orr.w	r3, r3, #8
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
 8002de2:	4b58      	ldr	r3, [pc, #352]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	4b54      	ldr	r3, [pc, #336]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a53      	ldr	r2, [pc, #332]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002df8:	f043 0310 	orr.w	r3, r3, #16
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b51      	ldr	r3, [pc, #324]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	4b4d      	ldr	r3, [pc, #308]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a4c      	ldr	r2, [pc, #304]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002e14:	f043 0320 	orr.w	r3, r3, #32
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b4a      	ldr	r3, [pc, #296]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	4b46      	ldr	r3, [pc, #280]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a45      	ldr	r2, [pc, #276]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b43      	ldr	r3, [pc, #268]	; (8002f44 <BSP_SDRAM_MspInit+0x1f4>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002e46:	2302      	movs	r3, #2
 8002e48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002e4e:	230c      	movs	r3, #12
 8002e50:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002e52:	2360      	movs	r3, #96	; 0x60
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	483a      	ldr	r0, [pc, #232]	; (8002f48 <BSP_SDRAM_MspInit+0x1f8>)
 8002e5e:	f001 fb1d 	bl	800449c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002e62:	2301      	movs	r3, #1
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4837      	ldr	r0, [pc, #220]	; (8002f4c <BSP_SDRAM_MspInit+0x1fc>)
 8002e6e:	f001 fb15 	bl	800449c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002e72:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4834      	ldr	r0, [pc, #208]	; (8002f50 <BSP_SDRAM_MspInit+0x200>)
 8002e80:	f001 fb0c 	bl	800449c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002e84:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4830      	ldr	r0, [pc, #192]	; (8002f54 <BSP_SDRAM_MspInit+0x204>)
 8002e92:	f001 fb03 	bl	800449c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002e96:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	482d      	ldr	r0, [pc, #180]	; (8002f58 <BSP_SDRAM_MspInit+0x208>)
 8002ea4:	f001 fafa 	bl	800449c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002ea8:	f248 1333 	movw	r3, #33075	; 0x8133
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4829      	ldr	r0, [pc, #164]	; (8002f5c <BSP_SDRAM_MspInit+0x20c>)
 8002eb6:	f001 faf1 	bl	800449c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002eba:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002ec6:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ecc:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002ed0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed4:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ed6:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002ed8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002edc:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002ee0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ee4:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002ee6:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002eec:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002eee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ef2:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002ef4:	4b1a      	ldr	r3, [pc, #104]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002efa:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002efc:	2203      	movs	r2, #3
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002f00:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002f06:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002f0c:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002f0e:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <BSP_SDRAM_MspInit+0x214>)
 8002f10:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
 8002f18:	4a11      	ldr	r2, [pc, #68]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002f1e:	4810      	ldr	r0, [pc, #64]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002f20:	f000 fe10 	bl	8003b44 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002f24:	480e      	ldr	r0, [pc, #56]	; (8002f60 <BSP_SDRAM_MspInit+0x210>)
 8002f26:	f000 fd5f 	bl	80039e8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	210f      	movs	r1, #15
 8002f2e:	2038      	movs	r0, #56	; 0x38
 8002f30:	f000 fd14 	bl	800395c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002f34:	2038      	movs	r0, #56	; 0x38
 8002f36:	f000 fd2d 	bl	8003994 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002f3a:	bf00      	nop
 8002f3c:	3740      	adds	r7, #64	; 0x40
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40020400 	.word	0x40020400
 8002f4c:	40020800 	.word	0x40020800
 8002f50:	40020c00 	.word	0x40020c00
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40021400 	.word	0x40021400
 8002f5c:	40021800 	.word	0x40021800
 8002f60:	20000868 	.word	0x20000868
 8002f64:	40026410 	.word	0x40026410

08002f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_Init+0x40>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0d      	ldr	r2, [pc, #52]	; (8002fa8 <HAL_Init+0x40>)
 8002f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_Init+0x40>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <HAL_Init+0x40>)
 8002f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_Init+0x40>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <HAL_Init+0x40>)
 8002f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f90:	2003      	movs	r0, #3
 8002f92:	f000 fcd8 	bl	8003946 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fe fbfa 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f9c:	f7fe f81e 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40023c00 	.word	0x40023c00

08002fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_IncTick+0x20>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_IncTick+0x24>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <HAL_IncTick+0x24>)
 8002fbe:	6013      	str	r3, [r2, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000050 	.word	0x20000050
 8002fd0:	200008c8 	.word	0x200008c8

08002fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_GetTick+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	200008c8 	.word	0x200008c8

08002fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff4:	f7ff ffee 	bl	8002fd4 <HAL_GetTick>
 8002ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d005      	beq.n	8003012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003006:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <HAL_Delay+0x44>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003012:	bf00      	nop
 8003014:	f7ff ffde 	bl	8002fd4 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	429a      	cmp	r2, r3
 8003022:	d8f7      	bhi.n	8003014 <HAL_Delay+0x28>
  {
  }
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000050 	.word	0x20000050

08003034 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e033      	b.n	80030b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fd ffee 	bl	8001034 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	2b00      	cmp	r3, #0
 8003070:	d118      	bne.n	80030a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800307a:	f023 0302 	bic.w	r3, r3, #2
 800307e:	f043 0202 	orr.w	r2, r3, #2
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fab4 	bl	80035f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f023 0303 	bic.w	r3, r3, #3
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
 80030a2:	e001      	b.n	80030a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_ADC_Start+0x1a>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e0b2      	b.n	800323c <HAL_ADC_Start+0x180>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d018      	beq.n	800311e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030fc:	4b52      	ldr	r3, [pc, #328]	; (8003248 <HAL_ADC_Start+0x18c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a52      	ldr	r2, [pc, #328]	; (800324c <HAL_ADC_Start+0x190>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	0c9a      	lsrs	r2, r3, #18
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003110:	e002      	b.n	8003118 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	3b01      	subs	r3, #1
 8003116:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f9      	bne.n	8003112 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d17a      	bne.n	8003222 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003156:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316a:	d106      	bne.n	800317a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003170:	f023 0206 	bic.w	r2, r3, #6
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	645a      	str	r2, [r3, #68]	; 0x44
 8003178:	e002      	b.n	8003180 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003188:	4b31      	ldr	r3, [pc, #196]	; (8003250 <HAL_ADC_Start+0x194>)
 800318a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003194:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d12a      	bne.n	80031f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a2b      	ldr	r2, [pc, #172]	; (8003254 <HAL_ADC_Start+0x198>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d015      	beq.n	80031d8 <HAL_ADC_Start+0x11c>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a29      	ldr	r2, [pc, #164]	; (8003258 <HAL_ADC_Start+0x19c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d105      	bne.n	80031c2 <HAL_ADC_Start+0x106>
 80031b6:	4b26      	ldr	r3, [pc, #152]	; (8003250 <HAL_ADC_Start+0x194>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a25      	ldr	r2, [pc, #148]	; (800325c <HAL_ADC_Start+0x1a0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d136      	bne.n	800323a <HAL_ADC_Start+0x17e>
 80031cc:	4b20      	ldr	r3, [pc, #128]	; (8003250 <HAL_ADC_Start+0x194>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d130      	bne.n	800323a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d129      	bne.n	800323a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	e020      	b.n	800323a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a15      	ldr	r2, [pc, #84]	; (8003254 <HAL_ADC_Start+0x198>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d11b      	bne.n	800323a <HAL_ADC_Start+0x17e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d114      	bne.n	800323a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	e00b      	b.n	800323a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f043 0210 	orr.w	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	20000000 	.word	0x20000000
 800324c:	431bde83 	.word	0x431bde83
 8003250:	40012300 	.word	0x40012300
 8003254:	40012000 	.word	0x40012000
 8003258:	40012100 	.word	0x40012100
 800325c:	40012200 	.word	0x40012200

08003260 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327c:	d113      	bne.n	80032a6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800328c:	d10b      	bne.n	80032a6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f043 0220 	orr.w	r2, r3, #32
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e063      	b.n	800336e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80032a6:	f7ff fe95 	bl	8002fd4 <HAL_GetTick>
 80032aa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032ac:	e021      	b.n	80032f2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d01d      	beq.n	80032f2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <HAL_ADC_PollForConversion+0x6c>
 80032bc:	f7ff fe8a 	bl	8002fd4 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d212      	bcs.n	80032f2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d00b      	beq.n	80032f2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f043 0204 	orr.w	r2, r3, #4
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e03d      	b.n	800336e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d1d6      	bne.n	80032ae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0212 	mvn.w	r2, #18
 8003308:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d123      	bne.n	800336c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003328:	2b00      	cmp	r3, #0
 800332a:	d11f      	bne.n	800336c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003336:	2b00      	cmp	r3, #0
 8003338:	d006      	beq.n	8003348 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003344:	2b00      	cmp	r3, #0
 8003346:	d111      	bne.n	800336c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d105      	bne.n	800336c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	f043 0201 	orr.w	r2, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x1c>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e113      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x244>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b09      	cmp	r3, #9
 80033ba:	d925      	bls.n	8003408 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68d9      	ldr	r1, [r3, #12]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	4613      	mov	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	4413      	add	r3, r2
 80033d0:	3b1e      	subs	r3, #30
 80033d2:	2207      	movs	r2, #7
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43da      	mvns	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	400a      	ands	r2, r1
 80033e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68d9      	ldr	r1, [r3, #12]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	4618      	mov	r0, r3
 80033f4:	4603      	mov	r3, r0
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4403      	add	r3, r0
 80033fa:	3b1e      	subs	r3, #30
 80033fc:	409a      	lsls	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	e022      	b.n	800344e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6919      	ldr	r1, [r3, #16]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	b29b      	uxth	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	2207      	movs	r2, #7
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43da      	mvns	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	400a      	ands	r2, r1
 800342a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6919      	ldr	r1, [r3, #16]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	4618      	mov	r0, r3
 800343e:	4603      	mov	r3, r0
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4403      	add	r3, r0
 8003444:	409a      	lsls	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b06      	cmp	r3, #6
 8003454:	d824      	bhi.n	80034a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	3b05      	subs	r3, #5
 8003468:	221f      	movs	r2, #31
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43da      	mvns	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	400a      	ands	r2, r1
 8003476:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	b29b      	uxth	r3, r3
 8003484:	4618      	mov	r0, r3
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	3b05      	subs	r3, #5
 8003492:	fa00 f203 	lsl.w	r2, r0, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	635a      	str	r2, [r3, #52]	; 0x34
 800349e:	e04c      	b.n	800353a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	d824      	bhi.n	80034f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	3b23      	subs	r3, #35	; 0x23
 80034ba:	221f      	movs	r2, #31
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43da      	mvns	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	400a      	ands	r2, r1
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	4618      	mov	r0, r3
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	3b23      	subs	r3, #35	; 0x23
 80034e4:	fa00 f203 	lsl.w	r2, r0, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
 80034f0:	e023      	b.n	800353a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	3b41      	subs	r3, #65	; 0x41
 8003504:	221f      	movs	r2, #31
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43da      	mvns	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	400a      	ands	r2, r1
 8003512:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	4618      	mov	r0, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	3b41      	subs	r3, #65	; 0x41
 800352e:	fa00 f203 	lsl.w	r2, r0, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800353a:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <HAL_ADC_ConfigChannel+0x250>)
 800353c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a28      	ldr	r2, [pc, #160]	; (80035e4 <HAL_ADC_ConfigChannel+0x254>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d10f      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x1d8>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b12      	cmp	r3, #18
 800354e:	d10b      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <HAL_ADC_ConfigChannel+0x254>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d12b      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x23a>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <HAL_ADC_ConfigChannel+0x258>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d003      	beq.n	8003584 <HAL_ADC_ConfigChannel+0x1f4>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b11      	cmp	r3, #17
 8003582:	d122      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a11      	ldr	r2, [pc, #68]	; (80035e8 <HAL_ADC_ConfigChannel+0x258>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d111      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035a6:	4b11      	ldr	r3, [pc, #68]	; (80035ec <HAL_ADC_ConfigChannel+0x25c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a11      	ldr	r2, [pc, #68]	; (80035f0 <HAL_ADC_ConfigChannel+0x260>)
 80035ac:	fba2 2303 	umull	r2, r3, r2, r3
 80035b0:	0c9a      	lsrs	r2, r3, #18
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035bc:	e002      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f9      	bne.n	80035be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40012300 	.word	0x40012300
 80035e4:	40012000 	.word	0x40012000
 80035e8:	10000012 	.word	0x10000012
 80035ec:	20000000 	.word	0x20000000
 80035f0:	431bde83 	.word	0x431bde83

080035f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035fc:	4b79      	ldr	r3, [pc, #484]	; (80037e4 <ADC_Init+0x1f0>)
 80035fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	431a      	orrs	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	021a      	lsls	r2, r3, #8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800364c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800366e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6899      	ldr	r1, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	4a58      	ldr	r2, [pc, #352]	; (80037e8 <ADC_Init+0x1f4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d022      	beq.n	80036d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800369a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6899      	ldr	r1, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6899      	ldr	r1, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	e00f      	b.n	80036f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0202 	bic.w	r2, r2, #2
 8003700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6899      	ldr	r1, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	7e1b      	ldrb	r3, [r3, #24]
 800370c:	005a      	lsls	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01b      	beq.n	8003758 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800372e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800373e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6859      	ldr	r1, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	3b01      	subs	r3, #1
 800374c:	035a      	lsls	r2, r3, #13
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	e007      	b.n	8003768 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003766:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	3b01      	subs	r3, #1
 8003784:	051a      	lsls	r2, r3, #20
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800379c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6899      	ldr	r1, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037aa:	025a      	lsls	r2, r3, #9
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6899      	ldr	r1, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	029a      	lsls	r2, r3, #10
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	609a      	str	r2, [r3, #8]
}
 80037d8:	bf00      	nop
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	40012300 	.word	0x40012300
 80037e8:	0f000001 	.word	0x0f000001

080037ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <__NVIC_SetPriorityGrouping+0x44>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003808:	4013      	ands	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800381e:	4a04      	ldr	r2, [pc, #16]	; (8003830 <__NVIC_SetPriorityGrouping+0x44>)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	60d3      	str	r3, [r2, #12]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <__NVIC_GetPriorityGrouping+0x18>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	f003 0307 	and.w	r3, r3, #7
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	2b00      	cmp	r3, #0
 8003860:	db0b      	blt.n	800387a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	f003 021f 	and.w	r2, r3, #31
 8003868:	4907      	ldr	r1, [pc, #28]	; (8003888 <__NVIC_EnableIRQ+0x38>)
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	2001      	movs	r0, #1
 8003872:	fa00 f202 	lsl.w	r2, r0, r2
 8003876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	e000e100 	.word	0xe000e100

0800388c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	6039      	str	r1, [r7, #0]
 8003896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389c:	2b00      	cmp	r3, #0
 800389e:	db0a      	blt.n	80038b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	490c      	ldr	r1, [pc, #48]	; (80038d8 <__NVIC_SetPriority+0x4c>)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	0112      	lsls	r2, r2, #4
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	440b      	add	r3, r1
 80038b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b4:	e00a      	b.n	80038cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	4908      	ldr	r1, [pc, #32]	; (80038dc <__NVIC_SetPriority+0x50>)
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	3b04      	subs	r3, #4
 80038c4:	0112      	lsls	r2, r2, #4
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	440b      	add	r3, r1
 80038ca:	761a      	strb	r2, [r3, #24]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000e100 	.word	0xe000e100
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b089      	sub	sp, #36	; 0x24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f1c3 0307 	rsb	r3, r3, #7
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	bf28      	it	cs
 80038fe:	2304      	movcs	r3, #4
 8003900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3304      	adds	r3, #4
 8003906:	2b06      	cmp	r3, #6
 8003908:	d902      	bls.n	8003910 <NVIC_EncodePriority+0x30>
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3b03      	subs	r3, #3
 800390e:	e000      	b.n	8003912 <NVIC_EncodePriority+0x32>
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003914:	f04f 32ff 	mov.w	r2, #4294967295
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43da      	mvns	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	401a      	ands	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003928:	f04f 31ff 	mov.w	r1, #4294967295
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	fa01 f303 	lsl.w	r3, r1, r3
 8003932:	43d9      	mvns	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003938:	4313      	orrs	r3, r2
         );
}
 800393a:	4618      	mov	r0, r3
 800393c:	3724      	adds	r7, #36	; 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff4c 	bl	80037ec <__NVIC_SetPriorityGrouping>
}
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800396e:	f7ff ff61 	bl	8003834 <__NVIC_GetPriorityGrouping>
 8003972:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	6978      	ldr	r0, [r7, #20]
 800397a:	f7ff ffb1 	bl	80038e0 <NVIC_EncodePriority>
 800397e:	4602      	mov	r2, r0
 8003980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ff80 	bl	800388c <__NVIC_SetPriority>
}
 800398c:	bf00      	nop
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff ff54 	bl	8003850 <__NVIC_EnableIRQ>
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e00e      	b.n	80039e0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	795b      	ldrb	r3, [r3, #5]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d105      	bne.n	80039d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd fb72 	bl	80010bc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039f4:	f7ff faee 	bl	8002fd4 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e099      	b.n	8003b38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0201 	bic.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a24:	e00f      	b.n	8003a46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a26:	f7ff fad5 	bl	8002fd4 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b05      	cmp	r3, #5
 8003a32:	d908      	bls.n	8003a46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e078      	b.n	8003b38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e8      	bne.n	8003a26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4b38      	ldr	r3, [pc, #224]	; (8003b40 <HAL_DMA_Init+0x158>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d107      	bne.n	8003ab0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f023 0307 	bic.w	r3, r3, #7
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d117      	bne.n	8003b0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00e      	beq.n	8003b0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f8bd 	bl	8003c6c <DMA_CheckFifoParam>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2240      	movs	r2, #64	; 0x40
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b06:	2301      	movs	r3, #1
 8003b08:	e016      	b.n	8003b38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f874 	bl	8003c00 <DMA_CalcBaseAndBitshift>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	223f      	movs	r2, #63	; 0x3f
 8003b22:	409a      	lsls	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	f010803f 	.word	0xf010803f

08003b44 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e050      	b.n	8003bf8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d101      	bne.n	8003b66 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003b62:	2302      	movs	r3, #2
 8003b64:	e048      	b.n	8003bf8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2200      	movs	r2, #0
 8003b84:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2200      	movs	r2, #0
 8003b94:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2221      	movs	r2, #33	; 0x21
 8003ba4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f82a 	bl	8003c00 <DMA_CalcBaseAndBitshift>
 8003bac:	4603      	mov	r3, r0
 8003bae:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd8:	223f      	movs	r2, #63	; 0x3f
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	3b10      	subs	r3, #16
 8003c10:	4a14      	ldr	r2, [pc, #80]	; (8003c64 <DMA_CalcBaseAndBitshift+0x64>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	091b      	lsrs	r3, r3, #4
 8003c18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c1a:	4a13      	ldr	r2, [pc, #76]	; (8003c68 <DMA_CalcBaseAndBitshift+0x68>)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d909      	bls.n	8003c42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c36:	f023 0303 	bic.w	r3, r3, #3
 8003c3a:	1d1a      	adds	r2, r3, #4
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	659a      	str	r2, [r3, #88]	; 0x58
 8003c40:	e007      	b.n	8003c52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c4a:	f023 0303 	bic.w	r3, r3, #3
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	aaaaaaab 	.word	0xaaaaaaab
 8003c68:	0800bb30 	.word	0x0800bb30

08003c6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d11f      	bne.n	8003cc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d856      	bhi.n	8003d3a <DMA_CheckFifoParam+0xce>
 8003c8c:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <DMA_CheckFifoParam+0x28>)
 8003c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c92:	bf00      	nop
 8003c94:	08003ca5 	.word	0x08003ca5
 8003c98:	08003cb7 	.word	0x08003cb7
 8003c9c:	08003ca5 	.word	0x08003ca5
 8003ca0:	08003d3b 	.word	0x08003d3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d046      	beq.n	8003d3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb4:	e043      	b.n	8003d3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cbe:	d140      	bne.n	8003d42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc4:	e03d      	b.n	8003d42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cce:	d121      	bne.n	8003d14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d837      	bhi.n	8003d46 <DMA_CheckFifoParam+0xda>
 8003cd6:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <DMA_CheckFifoParam+0x70>)
 8003cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003cf3 	.word	0x08003cf3
 8003ce4:	08003ced 	.word	0x08003ced
 8003ce8:	08003d05 	.word	0x08003d05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf0:	e030      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d025      	beq.n	8003d4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d02:	e022      	b.n	8003d4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d0c:	d11f      	bne.n	8003d4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d12:	e01c      	b.n	8003d4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d903      	bls.n	8003d22 <DMA_CheckFifoParam+0xb6>
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d003      	beq.n	8003d28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d20:	e018      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	73fb      	strb	r3, [r7, #15]
      break;
 8003d26:	e015      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00e      	beq.n	8003d52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
      break;
 8003d38:	e00b      	b.n	8003d52 <DMA_CheckFifoParam+0xe6>
      break;
 8003d3a:	bf00      	nop
 8003d3c:	e00a      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
      break;
 8003d3e:	bf00      	nop
 8003d40:	e008      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
      break;
 8003d42:	bf00      	nop
 8003d44:	e006      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
      break;
 8003d46:	bf00      	nop
 8003d48:	e004      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
      break;
 8003d4a:	bf00      	nop
 8003d4c:	e002      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d4e:	bf00      	nop
 8003d50:	e000      	b.n	8003d54 <DMA_CheckFifoParam+0xe8>
      break;
 8003d52:	bf00      	nop
    }
  } 
  
  return status; 
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop

08003d64 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e03b      	b.n	8003dee <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd f9b8 	bl	8001100 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db4:	f023 0107 	bic.w	r1, r3, #7
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003dce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	68d1      	ldr	r1, [r2, #12]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b086      	sub	sp, #24
 8003dfa:	af02      	add	r7, sp, #8
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
 8003e02:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_DMA2D_Start+0x1c>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e018      	b.n	8003e44 <HAL_DMA2D_Start+0x4e>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 fa99 	bl	8004364 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0201 	orr.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d056      	beq.n	8003f16 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e68:	f7ff f8b4 	bl	8002fd4 <HAL_GetTick>
 8003e6c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003e6e:	e04b      	b.n	8003f08 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d023      	beq.n	8003eca <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	f043 0202 	orr.w	r2, r3, #2
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea6:	f043 0201 	orr.w	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2221      	movs	r2, #33	; 0x21
 8003eb4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2204      	movs	r2, #4
 8003eba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e0a5      	b.n	8004016 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d01a      	beq.n	8003f08 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ed2:	f7ff f87f 	bl	8002fd4 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d302      	bcc.n	8003ee8 <HAL_DMA2D_PollForTransfer+0x9c>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10f      	bne.n	8003f08 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e086      	b.n	8004016 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0ac      	beq.n	8003e70 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d061      	beq.n	8003ffc <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f38:	f7ff f84c 	bl	8002fd4 <HAL_GetTick>
 8003f3c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003f3e:	e056      	b.n	8003fee <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d02e      	beq.n	8003fb0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	f043 0204 	orr.w	r2, r3, #4
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	f043 0202 	orr.w	r2, r3, #2
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	f043 0201 	orr.w	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2229      	movs	r2, #41	; 0x29
 8003f9a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e032      	b.n	8004016 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb6:	d01a      	beq.n	8003fee <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fb8:	f7ff f80c 	bl	8002fd4 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d302      	bcc.n	8003fce <HAL_DMA2D_PollForTransfer+0x182>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10f      	bne.n	8003fee <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd2:	f043 0220 	orr.w	r2, r3, #32
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2203      	movs	r2, #3
 8003fde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e013      	b.n	8004016 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0a1      	beq.n	8003f40 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2212      	movs	r2, #18
 8004002:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d026      	beq.n	800408e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d021      	beq.n	800408e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004058:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405e:	f043 0201 	orr.w	r2, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2201      	movs	r2, #1
 800406c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2204      	movs	r2, #4
 8004072:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b00      	cmp	r3, #0
 8004096:	d026      	beq.n	80040e6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d021      	beq.n	80040e6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040b0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2220      	movs	r2, #32
 80040b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	f043 0202 	orr.w	r2, r3, #2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2204      	movs	r2, #4
 80040ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d026      	beq.n	800413e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d021      	beq.n	800413e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004108:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2208      	movs	r2, #8
 8004110:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	f043 0204 	orr.w	r2, r3, #4
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2204      	movs	r2, #4
 8004122:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d013      	beq.n	8004170 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00e      	beq.n	8004170 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004160:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2204      	movs	r2, #4
 8004168:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f853 	bl	8004216 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d024      	beq.n	80041c4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01f      	beq.n	80041c4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004192:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2202      	movs	r2, #2
 800419a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01f      	beq.n	800420e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01a      	beq.n	800420e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041e6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2210      	movs	r2, #16
 80041ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f80e 	bl	800422a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
	...

08004240 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_DMA2D_ConfigLayer+0x20>
 800425c:	2302      	movs	r3, #2
 800425e:	e079      	b.n	8004354 <HAL_DMA2D_ConfigLayer+0x114>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	3318      	adds	r3, #24
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	041b      	lsls	r3, r3, #16
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800428a:	4b35      	ldr	r3, [pc, #212]	; (8004360 <HAL_DMA2D_ConfigLayer+0x120>)
 800428c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b0a      	cmp	r3, #10
 8004294:	d003      	beq.n	800429e <HAL_DMA2D_ConfigLayer+0x5e>
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b09      	cmp	r3, #9
 800429c:	d107      	bne.n	80042ae <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e005      	b.n	80042ba <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	061b      	lsls	r3, r3, #24
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d120      	bne.n	8004302 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	ea02 0103 	and.w	r1, r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b0a      	cmp	r3, #10
 80042e8:	d003      	beq.n	80042f2 <HAL_DMA2D_ConfigLayer+0xb2>
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b09      	cmp	r3, #9
 80042f0:	d127      	bne.n	8004342 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004300:	e01f      	b.n	8004342 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	43db      	mvns	r3, r3
 800430c:	ea02 0103 	and.w	r1, r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	430a      	orrs	r2, r1
 8004318:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b0a      	cmp	r3, #10
 800432a:	d003      	beq.n	8004334 <HAL_DMA2D_ConfigLayer+0xf4>
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b09      	cmp	r3, #9
 8004332:	d106      	bne.n	8004342 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004340:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	ff03000f 	.word	0xff03000f

08004364 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004364:	b480      	push	{r7}
 8004366:	b08b      	sub	sp, #44	; 0x2c
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004378:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	041a      	lsls	r2, r3, #16
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	431a      	orrs	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800439c:	d174      	bne.n	8004488 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80043a4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043ac:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80043b4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d108      	bne.n	80043d6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	431a      	orrs	r2, r3
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
 80043d4:	e053      	b.n	800447e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d106      	bne.n	80043ec <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ea:	e048      	b.n	800447e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d111      	bne.n	8004418 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	0cdb      	lsrs	r3, r3, #19
 80043f8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	0a9b      	lsrs	r3, r3, #10
 80043fe:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	08db      	lsrs	r3, r3, #3
 8004404:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	02db      	lsls	r3, r3, #11
 800440e:	4313      	orrs	r3, r2
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
 8004416:	e032      	b.n	800447e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b03      	cmp	r3, #3
 800441e:	d117      	bne.n	8004450 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	0fdb      	lsrs	r3, r3, #31
 8004424:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	0cdb      	lsrs	r3, r3, #19
 800442a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	0adb      	lsrs	r3, r3, #11
 8004430:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	08db      	lsrs	r3, r3, #3
 8004436:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	029b      	lsls	r3, r3, #10
 8004440:	431a      	orrs	r2, r3
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	03db      	lsls	r3, r3, #15
 8004446:	4313      	orrs	r3, r2
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
 800444e:	e016      	b.n	800447e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	0f1b      	lsrs	r3, r3, #28
 8004454:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	0d1b      	lsrs	r3, r3, #20
 800445a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	0b1b      	lsrs	r3, r3, #12
 8004460:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	011a      	lsls	r2, r3, #4
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	431a      	orrs	r2, r3
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	031b      	lsls	r3, r3, #12
 8004476:	4313      	orrs	r3, r2
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004484:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004486:	e003      	b.n	8004490 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	60da      	str	r2, [r3, #12]
}
 8004490:	bf00      	nop
 8004492:	372c      	adds	r7, #44	; 0x2c
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	; 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
 80044b6:	e177      	b.n	80047a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044b8:	2201      	movs	r2, #1
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4013      	ands	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	f040 8166 	bne.w	80047a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d005      	beq.n	80044ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d130      	bne.n	8004550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	2203      	movs	r2, #3
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4013      	ands	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4313      	orrs	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004524:	2201      	movs	r2, #1
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	43db      	mvns	r3, r3
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	4013      	ands	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	091b      	lsrs	r3, r3, #4
 800453a:	f003 0201 	and.w	r2, r3, #1
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4313      	orrs	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	2b03      	cmp	r3, #3
 800455a:	d017      	beq.n	800458c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	2203      	movs	r2, #3
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	4313      	orrs	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d123      	bne.n	80045e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	08da      	lsrs	r2, r3, #3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3208      	adds	r2, #8
 80045a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	220f      	movs	r2, #15
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	43db      	mvns	r3, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	4013      	ands	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	08da      	lsrs	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3208      	adds	r2, #8
 80045da:	69b9      	ldr	r1, [r7, #24]
 80045dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	2203      	movs	r2, #3
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 0203 	and.w	r2, r3, #3
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4313      	orrs	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80c0 	beq.w	80047a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	4b66      	ldr	r3, [pc, #408]	; (80047c0 <HAL_GPIO_Init+0x324>)
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	4a65      	ldr	r2, [pc, #404]	; (80047c0 <HAL_GPIO_Init+0x324>)
 800462c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004630:	6453      	str	r3, [r2, #68]	; 0x44
 8004632:	4b63      	ldr	r3, [pc, #396]	; (80047c0 <HAL_GPIO_Init+0x324>)
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800463e:	4a61      	ldr	r2, [pc, #388]	; (80047c4 <HAL_GPIO_Init+0x328>)
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	089b      	lsrs	r3, r3, #2
 8004644:	3302      	adds	r3, #2
 8004646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	220f      	movs	r2, #15
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4013      	ands	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a58      	ldr	r2, [pc, #352]	; (80047c8 <HAL_GPIO_Init+0x32c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d037      	beq.n	80046da <HAL_GPIO_Init+0x23e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a57      	ldr	r2, [pc, #348]	; (80047cc <HAL_GPIO_Init+0x330>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d031      	beq.n	80046d6 <HAL_GPIO_Init+0x23a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a56      	ldr	r2, [pc, #344]	; (80047d0 <HAL_GPIO_Init+0x334>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d02b      	beq.n	80046d2 <HAL_GPIO_Init+0x236>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a55      	ldr	r2, [pc, #340]	; (80047d4 <HAL_GPIO_Init+0x338>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d025      	beq.n	80046ce <HAL_GPIO_Init+0x232>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a54      	ldr	r2, [pc, #336]	; (80047d8 <HAL_GPIO_Init+0x33c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01f      	beq.n	80046ca <HAL_GPIO_Init+0x22e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a53      	ldr	r2, [pc, #332]	; (80047dc <HAL_GPIO_Init+0x340>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d019      	beq.n	80046c6 <HAL_GPIO_Init+0x22a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a52      	ldr	r2, [pc, #328]	; (80047e0 <HAL_GPIO_Init+0x344>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <HAL_GPIO_Init+0x226>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a51      	ldr	r2, [pc, #324]	; (80047e4 <HAL_GPIO_Init+0x348>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00d      	beq.n	80046be <HAL_GPIO_Init+0x222>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a50      	ldr	r2, [pc, #320]	; (80047e8 <HAL_GPIO_Init+0x34c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d007      	beq.n	80046ba <HAL_GPIO_Init+0x21e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a4f      	ldr	r2, [pc, #316]	; (80047ec <HAL_GPIO_Init+0x350>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d101      	bne.n	80046b6 <HAL_GPIO_Init+0x21a>
 80046b2:	2309      	movs	r3, #9
 80046b4:	e012      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046b6:	230a      	movs	r3, #10
 80046b8:	e010      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046ba:	2308      	movs	r3, #8
 80046bc:	e00e      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046be:	2307      	movs	r3, #7
 80046c0:	e00c      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046c2:	2306      	movs	r3, #6
 80046c4:	e00a      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046c6:	2305      	movs	r3, #5
 80046c8:	e008      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046ca:	2304      	movs	r3, #4
 80046cc:	e006      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046ce:	2303      	movs	r3, #3
 80046d0:	e004      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046d2:	2302      	movs	r3, #2
 80046d4:	e002      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046da:	2300      	movs	r3, #0
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	f002 0203 	and.w	r2, r2, #3
 80046e2:	0092      	lsls	r2, r2, #2
 80046e4:	4093      	lsls	r3, r2
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046ec:	4935      	ldr	r1, [pc, #212]	; (80047c4 <HAL_GPIO_Init+0x328>)
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	089b      	lsrs	r3, r3, #2
 80046f2:	3302      	adds	r3, #2
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046fa:	4b3d      	ldr	r3, [pc, #244]	; (80047f0 <HAL_GPIO_Init+0x354>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	43db      	mvns	r3, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4013      	ands	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800471e:	4a34      	ldr	r2, [pc, #208]	; (80047f0 <HAL_GPIO_Init+0x354>)
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004724:	4b32      	ldr	r3, [pc, #200]	; (80047f0 <HAL_GPIO_Init+0x354>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	43db      	mvns	r3, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4013      	ands	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004748:	4a29      	ldr	r2, [pc, #164]	; (80047f0 <HAL_GPIO_Init+0x354>)
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800474e:	4b28      	ldr	r3, [pc, #160]	; (80047f0 <HAL_GPIO_Init+0x354>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	43db      	mvns	r3, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4013      	ands	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004772:	4a1f      	ldr	r2, [pc, #124]	; (80047f0 <HAL_GPIO_Init+0x354>)
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004778:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <HAL_GPIO_Init+0x354>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	43db      	mvns	r3, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4013      	ands	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800479c:	4a14      	ldr	r2, [pc, #80]	; (80047f0 <HAL_GPIO_Init+0x354>)
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	3301      	adds	r3, #1
 80047a6:	61fb      	str	r3, [r7, #28]
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	2b0f      	cmp	r3, #15
 80047ac:	f67f ae84 	bls.w	80044b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	3724      	adds	r7, #36	; 0x24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40013800 	.word	0x40013800
 80047c8:	40020000 	.word	0x40020000
 80047cc:	40020400 	.word	0x40020400
 80047d0:	40020800 	.word	0x40020800
 80047d4:	40020c00 	.word	0x40020c00
 80047d8:	40021000 	.word	0x40021000
 80047dc:	40021400 	.word	0x40021400
 80047e0:	40021800 	.word	0x40021800
 80047e4:	40021c00 	.word	0x40021c00
 80047e8:	40022000 	.word	0x40022000
 80047ec:	40022400 	.word	0x40022400
 80047f0:	40013c00 	.word	0x40013c00

080047f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047fe:	2300      	movs	r3, #0
 8004800:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004806:	2300      	movs	r3, #0
 8004808:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	e0d9      	b.n	80049c4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004810:	2201      	movs	r2, #1
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4013      	ands	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	429a      	cmp	r2, r3
 8004828:	f040 80c9 	bne.w	80049be <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800482c:	4a6b      	ldr	r2, [pc, #428]	; (80049dc <HAL_GPIO_DeInit+0x1e8>)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	089b      	lsrs	r3, r3, #2
 8004832:	3302      	adds	r3, #2
 8004834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004838:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	220f      	movs	r2, #15
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	4013      	ands	r3, r2
 800484c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a63      	ldr	r2, [pc, #396]	; (80049e0 <HAL_GPIO_DeInit+0x1ec>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d037      	beq.n	80048c6 <HAL_GPIO_DeInit+0xd2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a62      	ldr	r2, [pc, #392]	; (80049e4 <HAL_GPIO_DeInit+0x1f0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d031      	beq.n	80048c2 <HAL_GPIO_DeInit+0xce>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a61      	ldr	r2, [pc, #388]	; (80049e8 <HAL_GPIO_DeInit+0x1f4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d02b      	beq.n	80048be <HAL_GPIO_DeInit+0xca>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a60      	ldr	r2, [pc, #384]	; (80049ec <HAL_GPIO_DeInit+0x1f8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d025      	beq.n	80048ba <HAL_GPIO_DeInit+0xc6>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a5f      	ldr	r2, [pc, #380]	; (80049f0 <HAL_GPIO_DeInit+0x1fc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d01f      	beq.n	80048b6 <HAL_GPIO_DeInit+0xc2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a5e      	ldr	r2, [pc, #376]	; (80049f4 <HAL_GPIO_DeInit+0x200>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d019      	beq.n	80048b2 <HAL_GPIO_DeInit+0xbe>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a5d      	ldr	r2, [pc, #372]	; (80049f8 <HAL_GPIO_DeInit+0x204>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d013      	beq.n	80048ae <HAL_GPIO_DeInit+0xba>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a5c      	ldr	r2, [pc, #368]	; (80049fc <HAL_GPIO_DeInit+0x208>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d00d      	beq.n	80048aa <HAL_GPIO_DeInit+0xb6>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a5b      	ldr	r2, [pc, #364]	; (8004a00 <HAL_GPIO_DeInit+0x20c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d007      	beq.n	80048a6 <HAL_GPIO_DeInit+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a5a      	ldr	r2, [pc, #360]	; (8004a04 <HAL_GPIO_DeInit+0x210>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d101      	bne.n	80048a2 <HAL_GPIO_DeInit+0xae>
 800489e:	2309      	movs	r3, #9
 80048a0:	e012      	b.n	80048c8 <HAL_GPIO_DeInit+0xd4>
 80048a2:	230a      	movs	r3, #10
 80048a4:	e010      	b.n	80048c8 <HAL_GPIO_DeInit+0xd4>
 80048a6:	2308      	movs	r3, #8
 80048a8:	e00e      	b.n	80048c8 <HAL_GPIO_DeInit+0xd4>
 80048aa:	2307      	movs	r3, #7
 80048ac:	e00c      	b.n	80048c8 <HAL_GPIO_DeInit+0xd4>
 80048ae:	2306      	movs	r3, #6
 80048b0:	e00a      	b.n	80048c8 <HAL_GPIO_DeInit+0xd4>
 80048b2:	2305      	movs	r3, #5
 80048b4:	e008      	b.n	80048c8 <HAL_GPIO_DeInit+0xd4>
 80048b6:	2304      	movs	r3, #4
 80048b8:	e006      	b.n	80048c8 <HAL_GPIO_DeInit+0xd4>
 80048ba:	2303      	movs	r3, #3
 80048bc:	e004      	b.n	80048c8 <HAL_GPIO_DeInit+0xd4>
 80048be:	2302      	movs	r3, #2
 80048c0:	e002      	b.n	80048c8 <HAL_GPIO_DeInit+0xd4>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <HAL_GPIO_DeInit+0xd4>
 80048c6:	2300      	movs	r3, #0
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	f002 0203 	and.w	r2, r2, #3
 80048ce:	0092      	lsls	r2, r2, #2
 80048d0:	4093      	lsls	r3, r2
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d132      	bne.n	800493e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80048d8:	4b4b      	ldr	r3, [pc, #300]	; (8004a08 <HAL_GPIO_DeInit+0x214>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	43db      	mvns	r3, r3
 80048e0:	4949      	ldr	r1, [pc, #292]	; (8004a08 <HAL_GPIO_DeInit+0x214>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80048e6:	4b48      	ldr	r3, [pc, #288]	; (8004a08 <HAL_GPIO_DeInit+0x214>)
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	4946      	ldr	r1, [pc, #280]	; (8004a08 <HAL_GPIO_DeInit+0x214>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80048f4:	4b44      	ldr	r3, [pc, #272]	; (8004a08 <HAL_GPIO_DeInit+0x214>)
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	4942      	ldr	r1, [pc, #264]	; (8004a08 <HAL_GPIO_DeInit+0x214>)
 80048fe:	4013      	ands	r3, r2
 8004900:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004902:	4b41      	ldr	r3, [pc, #260]	; (8004a08 <HAL_GPIO_DeInit+0x214>)
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	43db      	mvns	r3, r3
 800490a:	493f      	ldr	r1, [pc, #252]	; (8004a08 <HAL_GPIO_DeInit+0x214>)
 800490c:	4013      	ands	r3, r2
 800490e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	220f      	movs	r2, #15
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004920:	4a2e      	ldr	r2, [pc, #184]	; (80049dc <HAL_GPIO_DeInit+0x1e8>)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	3302      	adds	r3, #2
 8004928:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	43da      	mvns	r2, r3
 8004930:	482a      	ldr	r0, [pc, #168]	; (80049dc <HAL_GPIO_DeInit+0x1e8>)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	089b      	lsrs	r3, r3, #2
 8004936:	400a      	ands	r2, r1
 8004938:	3302      	adds	r3, #2
 800493a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	2103      	movs	r1, #3
 8004948:	fa01 f303 	lsl.w	r3, r1, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	401a      	ands	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	08da      	lsrs	r2, r3, #3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3208      	adds	r2, #8
 800495c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	220f      	movs	r2, #15
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	08d2      	lsrs	r2, r2, #3
 8004974:	4019      	ands	r1, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3208      	adds	r2, #8
 800497a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	2103      	movs	r1, #3
 8004988:	fa01 f303 	lsl.w	r3, r1, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	401a      	ands	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	2101      	movs	r1, #1
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	fa01 f303 	lsl.w	r3, r1, r3
 80049a0:	43db      	mvns	r3, r3
 80049a2:	401a      	ands	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	2103      	movs	r1, #3
 80049b2:	fa01 f303 	lsl.w	r3, r1, r3
 80049b6:	43db      	mvns	r3, r3
 80049b8:	401a      	ands	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	3301      	adds	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2b0f      	cmp	r3, #15
 80049c8:	f67f af22 	bls.w	8004810 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40013800 	.word	0x40013800
 80049e0:	40020000 	.word	0x40020000
 80049e4:	40020400 	.word	0x40020400
 80049e8:	40020800 	.word	0x40020800
 80049ec:	40020c00 	.word	0x40020c00
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40021400 	.word	0x40021400
 80049f8:	40021800 	.word	0x40021800
 80049fc:	40021c00 	.word	0x40021c00
 8004a00:	40022000 	.word	0x40022000
 8004a04:	40022400 	.word	0x40022400
 8004a08:	40013c00 	.word	0x40013c00

08004a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	807b      	strh	r3, [r7, #2]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a1c:	787b      	ldrb	r3, [r7, #1]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a22:	887a      	ldrh	r2, [r7, #2]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a28:	e003      	b.n	8004a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a2a:	887b      	ldrh	r3, [r7, #2]
 8004a2c:	041a      	lsls	r2, r3, #16
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	619a      	str	r2, [r3, #24]
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e12b      	b.n	8004caa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fc fb72 	bl	8001150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2224      	movs	r2, #36	; 0x24
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0201 	bic.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004aa4:	f001 f98e 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 8004aa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	4a81      	ldr	r2, [pc, #516]	; (8004cb4 <HAL_I2C_Init+0x274>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d807      	bhi.n	8004ac4 <HAL_I2C_Init+0x84>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4a80      	ldr	r2, [pc, #512]	; (8004cb8 <HAL_I2C_Init+0x278>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	bf94      	ite	ls
 8004abc:	2301      	movls	r3, #1
 8004abe:	2300      	movhi	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	e006      	b.n	8004ad2 <HAL_I2C_Init+0x92>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4a7d      	ldr	r2, [pc, #500]	; (8004cbc <HAL_I2C_Init+0x27c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	bf94      	ite	ls
 8004acc:	2301      	movls	r3, #1
 8004ace:	2300      	movhi	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e0e7      	b.n	8004caa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4a78      	ldr	r2, [pc, #480]	; (8004cc0 <HAL_I2C_Init+0x280>)
 8004ade:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae2:	0c9b      	lsrs	r3, r3, #18
 8004ae4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	4a6a      	ldr	r2, [pc, #424]	; (8004cb4 <HAL_I2C_Init+0x274>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d802      	bhi.n	8004b14 <HAL_I2C_Init+0xd4>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	3301      	adds	r3, #1
 8004b12:	e009      	b.n	8004b28 <HAL_I2C_Init+0xe8>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
 8004b1e:	4a69      	ldr	r2, [pc, #420]	; (8004cc4 <HAL_I2C_Init+0x284>)
 8004b20:	fba2 2303 	umull	r2, r3, r2, r3
 8004b24:	099b      	lsrs	r3, r3, #6
 8004b26:	3301      	adds	r3, #1
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	495c      	ldr	r1, [pc, #368]	; (8004cb4 <HAL_I2C_Init+0x274>)
 8004b44:	428b      	cmp	r3, r1
 8004b46:	d819      	bhi.n	8004b7c <HAL_I2C_Init+0x13c>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	1e59      	subs	r1, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b56:	1c59      	adds	r1, r3, #1
 8004b58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b5c:	400b      	ands	r3, r1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <HAL_I2C_Init+0x138>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1e59      	subs	r1, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b70:	3301      	adds	r3, #1
 8004b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b76:	e051      	b.n	8004c1c <HAL_I2C_Init+0x1dc>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	e04f      	b.n	8004c1c <HAL_I2C_Init+0x1dc>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d111      	bne.n	8004ba8 <HAL_I2C_Init+0x168>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1e58      	subs	r0, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6859      	ldr	r1, [r3, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	440b      	add	r3, r1
 8004b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b96:	3301      	adds	r3, #1
 8004b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	e012      	b.n	8004bce <HAL_I2C_Init+0x18e>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	1e58      	subs	r0, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6859      	ldr	r1, [r3, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	0099      	lsls	r1, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf0c      	ite	eq
 8004bc8:	2301      	moveq	r3, #1
 8004bca:	2300      	movne	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_I2C_Init+0x196>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e022      	b.n	8004c1c <HAL_I2C_Init+0x1dc>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10e      	bne.n	8004bfc <HAL_I2C_Init+0x1bc>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1e58      	subs	r0, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6859      	ldr	r1, [r3, #4]
 8004be6:	460b      	mov	r3, r1
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	440b      	add	r3, r1
 8004bec:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfa:	e00f      	b.n	8004c1c <HAL_I2C_Init+0x1dc>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	1e58      	subs	r0, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6859      	ldr	r1, [r3, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	0099      	lsls	r1, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c12:	3301      	adds	r3, #1
 8004c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	6809      	ldr	r1, [r1, #0]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69da      	ldr	r2, [r3, #28]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6911      	ldr	r1, [r2, #16]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	68d2      	ldr	r2, [r2, #12]
 8004c56:	4311      	orrs	r1, r2
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695a      	ldr	r2, [r3, #20]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	000186a0 	.word	0x000186a0
 8004cb8:	001e847f 	.word	0x001e847f
 8004cbc:	003d08ff 	.word	0x003d08ff
 8004cc0:	431bde83 	.word	0x431bde83
 8004cc4:	10624dd3 	.word	0x10624dd3

08004cc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b20      	cmp	r3, #32
 8004cdc:	d129      	bne.n	8004d32 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2224      	movs	r2, #36	; 0x24
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0201 	bic.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0210 	bic.w	r2, r2, #16
 8004d04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0201 	orr.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e000      	b.n	8004d34 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004d32:	2302      	movs	r3, #2
  }
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d12a      	bne.n	8004db0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2224      	movs	r2, #36	; 0x24
 8004d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0201 	bic.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004d7a:	89fb      	ldrh	r3, [r7, #14]
 8004d7c:	f023 030f 	bic.w	r3, r3, #15
 8004d80:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	89fb      	ldrh	r3, [r7, #14]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	89fa      	ldrh	r2, [r7, #14]
 8004d92:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	e000      	b.n	8004db2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004db0:	2302      	movs	r3, #2
  }
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e0bf      	b.n	8004f52 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fc fa1c 	bl	8001224 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699a      	ldr	r2, [r3, #24]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004e02:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6999      	ldr	r1, [r3, #24]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e18:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6899      	ldr	r1, [r3, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4b4a      	ldr	r3, [pc, #296]	; (8004f5c <HAL_LTDC_Init+0x19c>)
 8004e34:	400b      	ands	r3, r1
 8004e36:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	041b      	lsls	r3, r3, #16
 8004e3e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6899      	ldr	r1, [r3, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68d9      	ldr	r1, [r3, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	4b3e      	ldr	r3, [pc, #248]	; (8004f5c <HAL_LTDC_Init+0x19c>)
 8004e62:	400b      	ands	r3, r1
 8004e64:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	041b      	lsls	r3, r3, #16
 8004e6c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68d9      	ldr	r1, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1a      	ldr	r2, [r3, #32]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6919      	ldr	r1, [r3, #16]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4b33      	ldr	r3, [pc, #204]	; (8004f5c <HAL_LTDC_Init+0x19c>)
 8004e90:	400b      	ands	r3, r1
 8004e92:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	041b      	lsls	r3, r3, #16
 8004e9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6919      	ldr	r1, [r3, #16]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6959      	ldr	r1, [r3, #20]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	4b27      	ldr	r3, [pc, #156]	; (8004f5c <HAL_LTDC_Init+0x19c>)
 8004ebe:	400b      	ands	r3, r1
 8004ec0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	041b      	lsls	r3, r3, #16
 8004ec8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6959      	ldr	r1, [r3, #20]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0206 	orr.w	r2, r2, #6
 8004f2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	f000f800 	.word	0xf000f800

08004f60 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f76:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d023      	beq.n	8004fca <HAL_LTDC_IRQHandler+0x6a>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01e      	beq.n	8004fca <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0204 	bic.w	r2, r2, #4
 8004f9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004faa:	f043 0201 	orr.w	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2204      	movs	r2, #4
 8004fb8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f86f 	bl	80050a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d023      	beq.n	800501c <HAL_LTDC_IRQHandler+0xbc>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01e      	beq.n	800501c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0202 	bic.w	r2, r2, #2
 8004fec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ffc:	f043 0202 	orr.w	r2, r3, #2
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2204      	movs	r2, #4
 800500a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f846 	bl	80050a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01b      	beq.n	800505e <HAL_LTDC_IRQHandler+0xfe>
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d016      	beq.n	800505e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0201 	bic.w	r2, r2, #1
 800503e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2201      	movs	r2, #1
 8005046:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f82f 	bl	80050bc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01b      	beq.n	80050a0 <HAL_LTDC_IRQHandler+0x140>
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0208 	bic.w	r2, r2, #8
 8005080:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2208      	movs	r2, #8
 8005088:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f818 	bl	80050d0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80050a0:	bf00      	nop
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80050e4:	b5b0      	push	{r4, r5, r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_LTDC_ConfigLayer+0x1a>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e02c      	b.n	8005158 <HAL_LTDC_ConfigLayer+0x74>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2202      	movs	r2, #2
 800510a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2134      	movs	r1, #52	; 0x34
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	4413      	add	r3, r2
 800511a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4614      	mov	r4, r2
 8005122:	461d      	mov	r5, r3
 8005124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800512a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800512c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800512e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005130:	682b      	ldr	r3, [r5, #0]
 8005132:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f83b 	bl	80051b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2201      	movs	r2, #1
 8005144:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bdb0      	pop	{r4, r5, r7, pc}

08005160 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_LTDC_EnableDither+0x16>
 8005172:	2302      	movs	r3, #2
 8005174:	e016      	b.n	80051a4 <HAL_LTDC_EnableDither+0x44>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005186:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <HAL_LTDC_EnableDither+0x50>)
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	4a09      	ldr	r2, [pc, #36]	; (80051b0 <HAL_LTDC_EnableDither+0x50>)
 800518c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005190:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40016800 	.word	0x40016800

080051b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b089      	sub	sp, #36	; 0x24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	0c1b      	lsrs	r3, r3, #16
 80051cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d0:	4413      	add	r3, r2
 80051d2:	041b      	lsls	r3, r3, #16
 80051d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	01db      	lsls	r3, r3, #7
 80051e0:	4413      	add	r3, r2
 80051e2:	3384      	adds	r3, #132	; 0x84
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	4611      	mov	r1, r2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	01d2      	lsls	r2, r2, #7
 80051f0:	440a      	add	r2, r1
 80051f2:	3284      	adds	r2, #132	; 0x84
 80051f4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80051f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	0c1b      	lsrs	r3, r3, #16
 8005206:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800520a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800520c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4619      	mov	r1, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	01db      	lsls	r3, r3, #7
 8005218:	440b      	add	r3, r1
 800521a:	3384      	adds	r3, #132	; 0x84
 800521c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005222:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005232:	4413      	add	r3, r2
 8005234:	041b      	lsls	r3, r3, #16
 8005236:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	01db      	lsls	r3, r3, #7
 8005242:	4413      	add	r3, r2
 8005244:	3384      	adds	r3, #132	; 0x84
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	6812      	ldr	r2, [r2, #0]
 800524c:	4611      	mov	r1, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	01d2      	lsls	r2, r2, #7
 8005252:	440a      	add	r2, r1
 8005254:	3284      	adds	r2, #132	; 0x84
 8005256:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800525a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800526a:	4413      	add	r3, r2
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4619      	mov	r1, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	01db      	lsls	r3, r3, #7
 8005278:	440b      	add	r3, r1
 800527a:	3384      	adds	r3, #132	; 0x84
 800527c:	4619      	mov	r1, r3
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4313      	orrs	r3, r2
 8005282:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	01db      	lsls	r3, r3, #7
 800528e:	4413      	add	r3, r2
 8005290:	3384      	adds	r3, #132	; 0x84
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	6812      	ldr	r2, [r2, #0]
 8005298:	4611      	mov	r1, r2
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	01d2      	lsls	r2, r2, #7
 800529e:	440a      	add	r2, r1
 80052a0:	3284      	adds	r2, #132	; 0x84
 80052a2:	f023 0307 	bic.w	r3, r3, #7
 80052a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	01db      	lsls	r3, r3, #7
 80052b2:	4413      	add	r3, r2
 80052b4:	3384      	adds	r3, #132	; 0x84
 80052b6:	461a      	mov	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80052c4:	021b      	lsls	r3, r3, #8
 80052c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80052ce:	041b      	lsls	r3, r3, #16
 80052d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	061b      	lsls	r3, r3, #24
 80052d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	01db      	lsls	r3, r3, #7
 80052e4:	4413      	add	r3, r2
 80052e6:	3384      	adds	r3, #132	; 0x84
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	01db      	lsls	r3, r3, #7
 80052f4:	4413      	add	r3, r2
 80052f6:	3384      	adds	r3, #132	; 0x84
 80052f8:	461a      	mov	r2, r3
 80052fa:	2300      	movs	r3, #0
 80052fc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005304:	461a      	mov	r2, r3
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	431a      	orrs	r2, r3
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	431a      	orrs	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4619      	mov	r1, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	01db      	lsls	r3, r3, #7
 8005318:	440b      	add	r3, r1
 800531a:	3384      	adds	r3, #132	; 0x84
 800531c:	4619      	mov	r1, r3
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	01db      	lsls	r3, r3, #7
 800532e:	4413      	add	r3, r2
 8005330:	3384      	adds	r3, #132	; 0x84
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	4611      	mov	r1, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	01d2      	lsls	r2, r2, #7
 800533e:	440a      	add	r2, r1
 8005340:	3284      	adds	r2, #132	; 0x84
 8005342:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005346:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	01db      	lsls	r3, r3, #7
 8005352:	4413      	add	r3, r2
 8005354:	3384      	adds	r3, #132	; 0x84
 8005356:	461a      	mov	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	01db      	lsls	r3, r3, #7
 8005368:	4413      	add	r3, r2
 800536a:	3384      	adds	r3, #132	; 0x84
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	6812      	ldr	r2, [r2, #0]
 8005372:	4611      	mov	r1, r2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	01d2      	lsls	r2, r2, #7
 8005378:	440a      	add	r2, r1
 800537a:	3284      	adds	r2, #132	; 0x84
 800537c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005380:	f023 0307 	bic.w	r3, r3, #7
 8005384:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	69da      	ldr	r2, [r3, #28]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	68f9      	ldr	r1, [r7, #12]
 8005390:	6809      	ldr	r1, [r1, #0]
 8005392:	4608      	mov	r0, r1
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	01c9      	lsls	r1, r1, #7
 8005398:	4401      	add	r1, r0
 800539a:	3184      	adds	r1, #132	; 0x84
 800539c:	4313      	orrs	r3, r2
 800539e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	01db      	lsls	r3, r3, #7
 80053aa:	4413      	add	r3, r2
 80053ac:	3384      	adds	r3, #132	; 0x84
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	01db      	lsls	r3, r3, #7
 80053ba:	4413      	add	r3, r2
 80053bc:	3384      	adds	r3, #132	; 0x84
 80053be:	461a      	mov	r2, r3
 80053c0:	2300      	movs	r3, #0
 80053c2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	01db      	lsls	r3, r3, #7
 80053ce:	4413      	add	r3, r2
 80053d0:	3384      	adds	r3, #132	; 0x84
 80053d2:	461a      	mov	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d102      	bne.n	80053e8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80053e2:	2304      	movs	r3, #4
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	e01b      	b.n	8005420 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d102      	bne.n	80053f6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80053f0:	2303      	movs	r3, #3
 80053f2:	61fb      	str	r3, [r7, #28]
 80053f4:	e014      	b.n	8005420 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d00b      	beq.n	8005416 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005402:	2b02      	cmp	r3, #2
 8005404:	d007      	beq.n	8005416 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800540a:	2b03      	cmp	r3, #3
 800540c:	d003      	beq.n	8005416 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005412:	2b07      	cmp	r3, #7
 8005414:	d102      	bne.n	800541c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005416:	2302      	movs	r3, #2
 8005418:	61fb      	str	r3, [r7, #28]
 800541a:	e001      	b.n	8005420 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800541c:	2301      	movs	r3, #1
 800541e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	01db      	lsls	r3, r3, #7
 800542a:	4413      	add	r3, r2
 800542c:	3384      	adds	r3, #132	; 0x84
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	6812      	ldr	r2, [r2, #0]
 8005434:	4611      	mov	r1, r2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	01d2      	lsls	r2, r2, #7
 800543a:	440a      	add	r2, r1
 800543c:	3284      	adds	r2, #132	; 0x84
 800543e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005442:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	fb02 f303 	mul.w	r3, r2, r3
 800544e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	6859      	ldr	r1, [r3, #4]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	1acb      	subs	r3, r1, r3
 800545a:	69f9      	ldr	r1, [r7, #28]
 800545c:	fb01 f303 	mul.w	r3, r1, r3
 8005460:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005462:	68f9      	ldr	r1, [r7, #12]
 8005464:	6809      	ldr	r1, [r1, #0]
 8005466:	4608      	mov	r0, r1
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	01c9      	lsls	r1, r1, #7
 800546c:	4401      	add	r1, r0
 800546e:	3184      	adds	r1, #132	; 0x84
 8005470:	4313      	orrs	r3, r2
 8005472:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	01db      	lsls	r3, r3, #7
 800547e:	4413      	add	r3, r2
 8005480:	3384      	adds	r3, #132	; 0x84
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	4611      	mov	r1, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	01d2      	lsls	r2, r2, #7
 800548e:	440a      	add	r2, r1
 8005490:	3284      	adds	r2, #132	; 0x84
 8005492:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005496:	f023 0307 	bic.w	r3, r3, #7
 800549a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	01db      	lsls	r3, r3, #7
 80054a6:	4413      	add	r3, r2
 80054a8:	3384      	adds	r3, #132	; 0x84
 80054aa:	461a      	mov	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	01db      	lsls	r3, r3, #7
 80054bc:	4413      	add	r3, r2
 80054be:	3384      	adds	r3, #132	; 0x84
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	4611      	mov	r1, r2
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	01d2      	lsls	r2, r2, #7
 80054cc:	440a      	add	r2, r1
 80054ce:	3284      	adds	r2, #132	; 0x84
 80054d0:	f043 0301 	orr.w	r3, r3, #1
 80054d4:	6013      	str	r3, [r2, #0]
}
 80054d6:	bf00      	nop
 80054d8:	3724      	adds	r7, #36	; 0x24
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
	...

080054e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e267      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d075      	beq.n	80055ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005502:	4b88      	ldr	r3, [pc, #544]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	2b04      	cmp	r3, #4
 800550c:	d00c      	beq.n	8005528 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800550e:	4b85      	ldr	r3, [pc, #532]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005516:	2b08      	cmp	r3, #8
 8005518:	d112      	bne.n	8005540 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800551a:	4b82      	ldr	r3, [pc, #520]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005526:	d10b      	bne.n	8005540 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005528:	4b7e      	ldr	r3, [pc, #504]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d05b      	beq.n	80055ec <HAL_RCC_OscConfig+0x108>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d157      	bne.n	80055ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e242      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005548:	d106      	bne.n	8005558 <HAL_RCC_OscConfig+0x74>
 800554a:	4b76      	ldr	r3, [pc, #472]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a75      	ldr	r2, [pc, #468]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	e01d      	b.n	8005594 <HAL_RCC_OscConfig+0xb0>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005560:	d10c      	bne.n	800557c <HAL_RCC_OscConfig+0x98>
 8005562:	4b70      	ldr	r3, [pc, #448]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a6f      	ldr	r2, [pc, #444]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	4b6d      	ldr	r3, [pc, #436]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a6c      	ldr	r2, [pc, #432]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	e00b      	b.n	8005594 <HAL_RCC_OscConfig+0xb0>
 800557c:	4b69      	ldr	r3, [pc, #420]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a68      	ldr	r2, [pc, #416]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	4b66      	ldr	r3, [pc, #408]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a65      	ldr	r2, [pc, #404]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 800558e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d013      	beq.n	80055c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800559c:	f7fd fd1a 	bl	8002fd4 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055a4:	f7fd fd16 	bl	8002fd4 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b64      	cmp	r3, #100	; 0x64
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e207      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b6:	4b5b      	ldr	r3, [pc, #364]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f0      	beq.n	80055a4 <HAL_RCC_OscConfig+0xc0>
 80055c2:	e014      	b.n	80055ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c4:	f7fd fd06 	bl	8002fd4 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055cc:	f7fd fd02 	bl	8002fd4 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b64      	cmp	r3, #100	; 0x64
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e1f3      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055de:	4b51      	ldr	r3, [pc, #324]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1f0      	bne.n	80055cc <HAL_RCC_OscConfig+0xe8>
 80055ea:	e000      	b.n	80055ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d063      	beq.n	80056c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055fa:	4b4a      	ldr	r3, [pc, #296]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00b      	beq.n	800561e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005606:	4b47      	ldr	r3, [pc, #284]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800560e:	2b08      	cmp	r3, #8
 8005610:	d11c      	bne.n	800564c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005612:	4b44      	ldr	r3, [pc, #272]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d116      	bne.n	800564c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800561e:	4b41      	ldr	r3, [pc, #260]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <HAL_RCC_OscConfig+0x152>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d001      	beq.n	8005636 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e1c7      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005636:	4b3b      	ldr	r3, [pc, #236]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	4937      	ldr	r1, [pc, #220]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005646:	4313      	orrs	r3, r2
 8005648:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800564a:	e03a      	b.n	80056c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d020      	beq.n	8005696 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005654:	4b34      	ldr	r3, [pc, #208]	; (8005728 <HAL_RCC_OscConfig+0x244>)
 8005656:	2201      	movs	r2, #1
 8005658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565a:	f7fd fcbb 	bl	8002fd4 <HAL_GetTick>
 800565e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005660:	e008      	b.n	8005674 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005662:	f7fd fcb7 	bl	8002fd4 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e1a8      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005674:	4b2b      	ldr	r3, [pc, #172]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0f0      	beq.n	8005662 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005680:	4b28      	ldr	r3, [pc, #160]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	4925      	ldr	r1, [pc, #148]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 8005690:	4313      	orrs	r3, r2
 8005692:	600b      	str	r3, [r1, #0]
 8005694:	e015      	b.n	80056c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005696:	4b24      	ldr	r3, [pc, #144]	; (8005728 <HAL_RCC_OscConfig+0x244>)
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569c:	f7fd fc9a 	bl	8002fd4 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056a4:	f7fd fc96 	bl	8002fd4 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e187      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056b6:	4b1b      	ldr	r3, [pc, #108]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f0      	bne.n	80056a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0308 	and.w	r3, r3, #8
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d036      	beq.n	800573c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d016      	beq.n	8005704 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056d6:	4b15      	ldr	r3, [pc, #84]	; (800572c <HAL_RCC_OscConfig+0x248>)
 80056d8:	2201      	movs	r2, #1
 80056da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056dc:	f7fd fc7a 	bl	8002fd4 <HAL_GetTick>
 80056e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056e4:	f7fd fc76 	bl	8002fd4 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e167      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056f6:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HAL_RCC_OscConfig+0x240>)
 80056f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0f0      	beq.n	80056e4 <HAL_RCC_OscConfig+0x200>
 8005702:	e01b      	b.n	800573c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005704:	4b09      	ldr	r3, [pc, #36]	; (800572c <HAL_RCC_OscConfig+0x248>)
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800570a:	f7fd fc63 	bl	8002fd4 <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005710:	e00e      	b.n	8005730 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005712:	f7fd fc5f 	bl	8002fd4 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d907      	bls.n	8005730 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e150      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
 8005724:	40023800 	.word	0x40023800
 8005728:	42470000 	.word	0x42470000
 800572c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005730:	4b88      	ldr	r3, [pc, #544]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 8005732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1ea      	bne.n	8005712 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8097 	beq.w	8005878 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800574a:	2300      	movs	r3, #0
 800574c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800574e:	4b81      	ldr	r3, [pc, #516]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10f      	bne.n	800577a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800575a:	2300      	movs	r3, #0
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	4b7d      	ldr	r3, [pc, #500]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	4a7c      	ldr	r2, [pc, #496]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 8005764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005768:	6413      	str	r3, [r2, #64]	; 0x40
 800576a:	4b7a      	ldr	r3, [pc, #488]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005772:	60bb      	str	r3, [r7, #8]
 8005774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005776:	2301      	movs	r3, #1
 8005778:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800577a:	4b77      	ldr	r3, [pc, #476]	; (8005958 <HAL_RCC_OscConfig+0x474>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005782:	2b00      	cmp	r3, #0
 8005784:	d118      	bne.n	80057b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005786:	4b74      	ldr	r3, [pc, #464]	; (8005958 <HAL_RCC_OscConfig+0x474>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a73      	ldr	r2, [pc, #460]	; (8005958 <HAL_RCC_OscConfig+0x474>)
 800578c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005792:	f7fd fc1f 	bl	8002fd4 <HAL_GetTick>
 8005796:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005798:	e008      	b.n	80057ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800579a:	f7fd fc1b 	bl	8002fd4 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e10c      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ac:	4b6a      	ldr	r3, [pc, #424]	; (8005958 <HAL_RCC_OscConfig+0x474>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0f0      	beq.n	800579a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d106      	bne.n	80057ce <HAL_RCC_OscConfig+0x2ea>
 80057c0:	4b64      	ldr	r3, [pc, #400]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c4:	4a63      	ldr	r2, [pc, #396]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057c6:	f043 0301 	orr.w	r3, r3, #1
 80057ca:	6713      	str	r3, [r2, #112]	; 0x70
 80057cc:	e01c      	b.n	8005808 <HAL_RCC_OscConfig+0x324>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2b05      	cmp	r3, #5
 80057d4:	d10c      	bne.n	80057f0 <HAL_RCC_OscConfig+0x30c>
 80057d6:	4b5f      	ldr	r3, [pc, #380]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	4a5e      	ldr	r2, [pc, #376]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057dc:	f043 0304 	orr.w	r3, r3, #4
 80057e0:	6713      	str	r3, [r2, #112]	; 0x70
 80057e2:	4b5c      	ldr	r3, [pc, #368]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e6:	4a5b      	ldr	r2, [pc, #364]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057e8:	f043 0301 	orr.w	r3, r3, #1
 80057ec:	6713      	str	r3, [r2, #112]	; 0x70
 80057ee:	e00b      	b.n	8005808 <HAL_RCC_OscConfig+0x324>
 80057f0:	4b58      	ldr	r3, [pc, #352]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f4:	4a57      	ldr	r2, [pc, #348]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	6713      	str	r3, [r2, #112]	; 0x70
 80057fc:	4b55      	ldr	r3, [pc, #340]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80057fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005800:	4a54      	ldr	r2, [pc, #336]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 8005802:	f023 0304 	bic.w	r3, r3, #4
 8005806:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d015      	beq.n	800583c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005810:	f7fd fbe0 	bl	8002fd4 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005816:	e00a      	b.n	800582e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005818:	f7fd fbdc 	bl	8002fd4 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	f241 3288 	movw	r2, #5000	; 0x1388
 8005826:	4293      	cmp	r3, r2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e0cb      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800582e:	4b49      	ldr	r3, [pc, #292]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0ee      	beq.n	8005818 <HAL_RCC_OscConfig+0x334>
 800583a:	e014      	b.n	8005866 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800583c:	f7fd fbca 	bl	8002fd4 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005842:	e00a      	b.n	800585a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005844:	f7fd fbc6 	bl	8002fd4 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e0b5      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800585a:	4b3e      	ldr	r3, [pc, #248]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 800585c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1ee      	bne.n	8005844 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d105      	bne.n	8005878 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800586c:	4b39      	ldr	r3, [pc, #228]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 800586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005870:	4a38      	ldr	r2, [pc, #224]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 8005872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005876:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 80a1 	beq.w	80059c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005882:	4b34      	ldr	r3, [pc, #208]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 030c 	and.w	r3, r3, #12
 800588a:	2b08      	cmp	r3, #8
 800588c:	d05c      	beq.n	8005948 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d141      	bne.n	800591a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005896:	4b31      	ldr	r3, [pc, #196]	; (800595c <HAL_RCC_OscConfig+0x478>)
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589c:	f7fd fb9a 	bl	8002fd4 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a4:	f7fd fb96 	bl	8002fd4 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e087      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b6:	4b27      	ldr	r3, [pc, #156]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69da      	ldr	r2, [r3, #28]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	019b      	lsls	r3, r3, #6
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	085b      	lsrs	r3, r3, #1
 80058da:	3b01      	subs	r3, #1
 80058dc:	041b      	lsls	r3, r3, #16
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	061b      	lsls	r3, r3, #24
 80058e6:	491b      	ldr	r1, [pc, #108]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058ec:	4b1b      	ldr	r3, [pc, #108]	; (800595c <HAL_RCC_OscConfig+0x478>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f2:	f7fd fb6f 	bl	8002fd4 <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f8:	e008      	b.n	800590c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058fa:	f7fd fb6b 	bl	8002fd4 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e05c      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800590c:	4b11      	ldr	r3, [pc, #68]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0f0      	beq.n	80058fa <HAL_RCC_OscConfig+0x416>
 8005918:	e054      	b.n	80059c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800591a:	4b10      	ldr	r3, [pc, #64]	; (800595c <HAL_RCC_OscConfig+0x478>)
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005920:	f7fd fb58 	bl	8002fd4 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005928:	f7fd fb54 	bl	8002fd4 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e045      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593a:	4b06      	ldr	r3, [pc, #24]	; (8005954 <HAL_RCC_OscConfig+0x470>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f0      	bne.n	8005928 <HAL_RCC_OscConfig+0x444>
 8005946:	e03d      	b.n	80059c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d107      	bne.n	8005960 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e038      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
 8005954:	40023800 	.word	0x40023800
 8005958:	40007000 	.word	0x40007000
 800595c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005960:	4b1b      	ldr	r3, [pc, #108]	; (80059d0 <HAL_RCC_OscConfig+0x4ec>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d028      	beq.n	80059c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005978:	429a      	cmp	r2, r3
 800597a:	d121      	bne.n	80059c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005986:	429a      	cmp	r2, r3
 8005988:	d11a      	bne.n	80059c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005990:	4013      	ands	r3, r2
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005996:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005998:	4293      	cmp	r3, r2
 800599a:	d111      	bne.n	80059c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a6:	085b      	lsrs	r3, r3, #1
 80059a8:	3b01      	subs	r3, #1
 80059aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d107      	bne.n	80059c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d001      	beq.n	80059c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	40023800 	.word	0x40023800

080059d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0cc      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059e8:	4b68      	ldr	r3, [pc, #416]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d90c      	bls.n	8005a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059f6:	4b65      	ldr	r3, [pc, #404]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059fe:	4b63      	ldr	r3, [pc, #396]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d001      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0b8      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d020      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a28:	4b59      	ldr	r3, [pc, #356]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	4a58      	ldr	r2, [pc, #352]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a40:	4b53      	ldr	r3, [pc, #332]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	4a52      	ldr	r2, [pc, #328]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a4c:	4b50      	ldr	r3, [pc, #320]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	494d      	ldr	r1, [pc, #308]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d044      	beq.n	8005af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d107      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a72:	4b47      	ldr	r3, [pc, #284]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d119      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e07f      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d003      	beq.n	8005a92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d107      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a92:	4b3f      	ldr	r3, [pc, #252]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d109      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e06f      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa2:	4b3b      	ldr	r3, [pc, #236]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e067      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ab2:	4b37      	ldr	r3, [pc, #220]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f023 0203 	bic.w	r2, r3, #3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	4934      	ldr	r1, [pc, #208]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ac4:	f7fd fa86 	bl	8002fd4 <HAL_GetTick>
 8005ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aca:	e00a      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005acc:	f7fd fa82 	bl	8002fd4 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e04f      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae2:	4b2b      	ldr	r3, [pc, #172]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 020c 	and.w	r2, r3, #12
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d1eb      	bne.n	8005acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005af4:	4b25      	ldr	r3, [pc, #148]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d20c      	bcs.n	8005b1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b02:	4b22      	ldr	r3, [pc, #136]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0a:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e032      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d008      	beq.n	8005b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b28:	4b19      	ldr	r3, [pc, #100]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	4916      	ldr	r1, [pc, #88]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b46:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	490e      	ldr	r1, [pc, #56]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b5a:	f000 f821 	bl	8005ba0 <HAL_RCC_GetSysClockFreq>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	091b      	lsrs	r3, r3, #4
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	490a      	ldr	r1, [pc, #40]	; (8005b94 <HAL_RCC_ClockConfig+0x1c0>)
 8005b6c:	5ccb      	ldrb	r3, [r1, r3]
 8005b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b72:	4a09      	ldr	r2, [pc, #36]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b76:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fb fe08 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40023c00 	.word	0x40023c00
 8005b90:	40023800 	.word	0x40023800
 8005b94:	0800a060 	.word	0x0800a060
 8005b98:	20000000 	.word	0x20000000
 8005b9c:	2000004c 	.word	0x2000004c

08005ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ba4:	b094      	sub	sp, #80	; 0x50
 8005ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	647b      	str	r3, [r7, #68]	; 0x44
 8005bac:	2300      	movs	r3, #0
 8005bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bb8:	4b79      	ldr	r3, [pc, #484]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f003 030c 	and.w	r3, r3, #12
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d00d      	beq.n	8005be0 <HAL_RCC_GetSysClockFreq+0x40>
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	f200 80e1 	bhi.w	8005d8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d003      	beq.n	8005bda <HAL_RCC_GetSysClockFreq+0x3a>
 8005bd2:	e0db      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bd4:	4b73      	ldr	r3, [pc, #460]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bd6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005bd8:	e0db      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bda:	4b73      	ldr	r3, [pc, #460]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005bdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bde:	e0d8      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005be0:	4b6f      	ldr	r3, [pc, #444]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005be8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bea:	4b6d      	ldr	r3, [pc, #436]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d063      	beq.n	8005cbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bf6:	4b6a      	ldr	r3, [pc, #424]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	099b      	lsrs	r3, r3, #6
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c08:	633b      	str	r3, [r7, #48]	; 0x30
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c12:	4622      	mov	r2, r4
 8005c14:	462b      	mov	r3, r5
 8005c16:	f04f 0000 	mov.w	r0, #0
 8005c1a:	f04f 0100 	mov.w	r1, #0
 8005c1e:	0159      	lsls	r1, r3, #5
 8005c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c24:	0150      	lsls	r0, r2, #5
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	1a51      	subs	r1, r2, r1
 8005c2e:	6139      	str	r1, [r7, #16]
 8005c30:	4629      	mov	r1, r5
 8005c32:	eb63 0301 	sbc.w	r3, r3, r1
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c44:	4659      	mov	r1, fp
 8005c46:	018b      	lsls	r3, r1, #6
 8005c48:	4651      	mov	r1, sl
 8005c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c4e:	4651      	mov	r1, sl
 8005c50:	018a      	lsls	r2, r1, #6
 8005c52:	4651      	mov	r1, sl
 8005c54:	ebb2 0801 	subs.w	r8, r2, r1
 8005c58:	4659      	mov	r1, fp
 8005c5a:	eb63 0901 	sbc.w	r9, r3, r1
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	f04f 0300 	mov.w	r3, #0
 8005c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c72:	4690      	mov	r8, r2
 8005c74:	4699      	mov	r9, r3
 8005c76:	4623      	mov	r3, r4
 8005c78:	eb18 0303 	adds.w	r3, r8, r3
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	462b      	mov	r3, r5
 8005c80:	eb49 0303 	adc.w	r3, r9, r3
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	f04f 0200 	mov.w	r2, #0
 8005c8a:	f04f 0300 	mov.w	r3, #0
 8005c8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c92:	4629      	mov	r1, r5
 8005c94:	024b      	lsls	r3, r1, #9
 8005c96:	4621      	mov	r1, r4
 8005c98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	024a      	lsls	r2, r1, #9
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cb0:	f7fa faee 	bl	8000290 <__aeabi_uldivmod>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4613      	mov	r3, r2
 8005cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cbc:	e058      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cbe:	4b38      	ldr	r3, [pc, #224]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	099b      	lsrs	r3, r3, #6
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	4611      	mov	r1, r2
 8005cca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cce:	623b      	str	r3, [r7, #32]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005cd8:	4642      	mov	r2, r8
 8005cda:	464b      	mov	r3, r9
 8005cdc:	f04f 0000 	mov.w	r0, #0
 8005ce0:	f04f 0100 	mov.w	r1, #0
 8005ce4:	0159      	lsls	r1, r3, #5
 8005ce6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cea:	0150      	lsls	r0, r2, #5
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4641      	mov	r1, r8
 8005cf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005cf6:	4649      	mov	r1, r9
 8005cf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d10:	ebb2 040a 	subs.w	r4, r2, sl
 8005d14:	eb63 050b 	sbc.w	r5, r3, fp
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	00eb      	lsls	r3, r5, #3
 8005d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d26:	00e2      	lsls	r2, r4, #3
 8005d28:	4614      	mov	r4, r2
 8005d2a:	461d      	mov	r5, r3
 8005d2c:	4643      	mov	r3, r8
 8005d2e:	18e3      	adds	r3, r4, r3
 8005d30:	603b      	str	r3, [r7, #0]
 8005d32:	464b      	mov	r3, r9
 8005d34:	eb45 0303 	adc.w	r3, r5, r3
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d46:	4629      	mov	r1, r5
 8005d48:	028b      	lsls	r3, r1, #10
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d50:	4621      	mov	r1, r4
 8005d52:	028a      	lsls	r2, r1, #10
 8005d54:	4610      	mov	r0, r2
 8005d56:	4619      	mov	r1, r3
 8005d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	61fa      	str	r2, [r7, #28]
 8005d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d64:	f7fa fa94 	bl	8000290 <__aeabi_uldivmod>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	0c1b      	lsrs	r3, r3, #16
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d8a:	e002      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d8c:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3750      	adds	r7, #80	; 0x50
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d9e:	bf00      	nop
 8005da0:	40023800 	.word	0x40023800
 8005da4:	00f42400 	.word	0x00f42400
 8005da8:	007a1200 	.word	0x007a1200

08005dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005db0:	4b03      	ldr	r3, [pc, #12]	; (8005dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005db2:	681b      	ldr	r3, [r3, #0]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	20000000 	.word	0x20000000

08005dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005dc8:	f7ff fff0 	bl	8005dac <HAL_RCC_GetHCLKFreq>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	0a9b      	lsrs	r3, r3, #10
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	4903      	ldr	r1, [pc, #12]	; (8005de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dda:	5ccb      	ldrb	r3, [r1, r3]
 8005ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	40023800 	.word	0x40023800
 8005de8:	0800a070 	.word	0x0800a070

08005dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005df0:	f7ff ffdc 	bl	8005dac <HAL_RCC_GetHCLKFreq>
 8005df4:	4602      	mov	r2, r0
 8005df6:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	0b5b      	lsrs	r3, r3, #13
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	4903      	ldr	r1, [pc, #12]	; (8005e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e02:	5ccb      	ldrb	r3, [r1, r3]
 8005e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40023800 	.word	0x40023800
 8005e10:	0800a070 	.word	0x0800a070

08005e14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	220f      	movs	r2, #15
 8005e22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e24:	4b12      	ldr	r3, [pc, #72]	; (8005e70 <HAL_RCC_GetClockConfig+0x5c>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f003 0203 	and.w	r2, r3, #3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e30:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <HAL_RCC_GetClockConfig+0x5c>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e3c:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <HAL_RCC_GetClockConfig+0x5c>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e48:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <HAL_RCC_GetClockConfig+0x5c>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	08db      	lsrs	r3, r3, #3
 8005e4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e56:	4b07      	ldr	r3, [pc, #28]	; (8005e74 <HAL_RCC_GetClockConfig+0x60>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 020f 	and.w	r2, r3, #15
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	601a      	str	r2, [r3, #0]
}
 8005e62:	bf00      	nop
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40023800 	.word	0x40023800
 8005e74:	40023c00 	.word	0x40023c00

08005e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10b      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d105      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d075      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005eac:	4b91      	ldr	r3, [pc, #580]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005eb2:	f7fd f88f 	bl	8002fd4 <HAL_GetTick>
 8005eb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005eba:	f7fd f88b 	bl	8002fd4 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e189      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ecc:	4b8a      	ldr	r3, [pc, #552]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1f0      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d009      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	019a      	lsls	r2, r3, #6
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	071b      	lsls	r3, r3, #28
 8005ef0:	4981      	ldr	r1, [pc, #516]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01f      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f04:	4b7c      	ldr	r3, [pc, #496]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f0a:	0f1b      	lsrs	r3, r3, #28
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	019a      	lsls	r2, r3, #6
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	061b      	lsls	r3, r3, #24
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	071b      	lsls	r3, r3, #28
 8005f24:	4974      	ldr	r1, [pc, #464]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f2c:	4b72      	ldr	r3, [pc, #456]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f32:	f023 021f 	bic.w	r2, r3, #31
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	496e      	ldr	r1, [pc, #440]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00d      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	019a      	lsls	r2, r3, #6
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	061b      	lsls	r3, r3, #24
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	071b      	lsls	r3, r3, #28
 8005f64:	4964      	ldr	r1, [pc, #400]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f6c:	4b61      	ldr	r3, [pc, #388]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f6e:	2201      	movs	r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f72:	f7fd f82f 	bl	8002fd4 <HAL_GetTick>
 8005f76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f78:	e008      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f7a:	f7fd f82b 	bl	8002fd4 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d901      	bls.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e129      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f8c:	4b5a      	ldr	r3, [pc, #360]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d0f0      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d105      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d079      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005fb0:	4b52      	ldr	r3, [pc, #328]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fb6:	f7fd f80d 	bl	8002fd4 <HAL_GetTick>
 8005fba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005fbe:	f7fd f809 	bl	8002fd4 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e107      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fd0:	4b49      	ldr	r3, [pc, #292]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fdc:	d0ef      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d020      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005fea:	4b43      	ldr	r3, [pc, #268]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff0:	0f1b      	lsrs	r3, r3, #28
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	019a      	lsls	r2, r3, #6
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	061b      	lsls	r3, r3, #24
 8006004:	431a      	orrs	r2, r3
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	071b      	lsls	r3, r3, #28
 800600a:	493b      	ldr	r1, [pc, #236]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800600c:	4313      	orrs	r3, r2
 800600e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006012:	4b39      	ldr	r3, [pc, #228]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006018:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	3b01      	subs	r3, #1
 8006022:	021b      	lsls	r3, r3, #8
 8006024:	4934      	ldr	r1, [pc, #208]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0308 	and.w	r3, r3, #8
 8006034:	2b00      	cmp	r3, #0
 8006036:	d01e      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006038:	4b2f      	ldr	r3, [pc, #188]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	0e1b      	lsrs	r3, r3, #24
 8006040:	f003 030f 	and.w	r3, r3, #15
 8006044:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	019a      	lsls	r2, r3, #6
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	061b      	lsls	r3, r3, #24
 8006050:	431a      	orrs	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	071b      	lsls	r3, r3, #28
 8006058:	4927      	ldr	r1, [pc, #156]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800605a:	4313      	orrs	r3, r2
 800605c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006060:	4b25      	ldr	r3, [pc, #148]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006066:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	4922      	ldr	r1, [pc, #136]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006070:	4313      	orrs	r3, r2
 8006072:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006076:	4b21      	ldr	r3, [pc, #132]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006078:	2201      	movs	r2, #1
 800607a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800607c:	f7fc ffaa 	bl	8002fd4 <HAL_GetTick>
 8006080:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006082:	e008      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006084:	f7fc ffa6 	bl	8002fd4 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d901      	bls.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e0a4      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006096:	4b18      	ldr	r3, [pc, #96]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800609e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060a2:	d1ef      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0320 	and.w	r3, r3, #32
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 808b 	beq.w	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060b2:	2300      	movs	r3, #0
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	4b10      	ldr	r3, [pc, #64]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	4a0f      	ldr	r2, [pc, #60]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060c0:	6413      	str	r3, [r2, #64]	; 0x40
 80060c2:	4b0d      	ldr	r3, [pc, #52]	; (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80060ce:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a0b      	ldr	r2, [pc, #44]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80060d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060da:	f7fc ff7b 	bl	8002fd4 <HAL_GetTick>
 80060de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060e0:	e010      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80060e2:	f7fc ff77 	bl	8002fd4 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d909      	bls.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e075      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80060f4:	42470068 	.word	0x42470068
 80060f8:	40023800 	.word	0x40023800
 80060fc:	42470070 	.word	0x42470070
 8006100:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006104:	4b38      	ldr	r3, [pc, #224]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0e8      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006110:	4b36      	ldr	r3, [pc, #216]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006118:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d02f      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	429a      	cmp	r2, r3
 800612c:	d028      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800612e:	4b2f      	ldr	r3, [pc, #188]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006136:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006138:	4b2d      	ldr	r3, [pc, #180]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800613a:	2201      	movs	r2, #1
 800613c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800613e:	4b2c      	ldr	r3, [pc, #176]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006144:	4a29      	ldr	r2, [pc, #164]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800614a:	4b28      	ldr	r3, [pc, #160]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800614c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b01      	cmp	r3, #1
 8006154:	d114      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006156:	f7fc ff3d 	bl	8002fd4 <HAL_GetTick>
 800615a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800615c:	e00a      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800615e:	f7fc ff39 	bl	8002fd4 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f241 3288 	movw	r2, #5000	; 0x1388
 800616c:	4293      	cmp	r3, r2
 800616e:	d901      	bls.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e035      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006174:	4b1d      	ldr	r3, [pc, #116]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0ee      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800618c:	d10d      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x332>
 800618e:	4b17      	ldr	r3, [pc, #92]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800619e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a2:	4912      	ldr	r1, [pc, #72]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	608b      	str	r3, [r1, #8]
 80061a8:	e005      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80061aa:	4b10      	ldr	r3, [pc, #64]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	4a0f      	ldr	r2, [pc, #60]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80061b4:	6093      	str	r3, [r2, #8]
 80061b6:	4b0d      	ldr	r3, [pc, #52]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c2:	490a      	ldr	r1, [pc, #40]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d004      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80061da:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80061dc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40007000 	.word	0x40007000
 80061ec:	40023800 	.word	0x40023800
 80061f0:	42470e40 	.word	0x42470e40
 80061f4:	424711e0 	.word	0x424711e0

080061f8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e025      	b.n	8006258 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d106      	bne.n	8006226 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7fb faab 	bl	800177c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2202      	movs	r2, #2
 800622a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3304      	adds	r3, #4
 8006236:	4619      	mov	r1, r3
 8006238:	4610      	mov	r0, r2
 800623a:	f001 fe91 	bl	8007f60 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	461a      	mov	r2, r3
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	f001 fee6 	bl	800801a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006272:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d101      	bne.n	800627e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800627a:	2302      	movs	r3, #2
 800627c:	e021      	b.n	80062c2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800627e:	7dfb      	ldrb	r3, [r7, #23]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d002      	beq.n	800628a <HAL_SDRAM_SendCommand+0x2a>
 8006284:	7dfb      	ldrb	r3, [r7, #23]
 8006286:	2b05      	cmp	r3, #5
 8006288:	d118      	bne.n	80062bc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2202      	movs	r2, #2
 800628e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	68b9      	ldr	r1, [r7, #8]
 800629a:	4618      	mov	r0, r3
 800629c:	f001 ff26 	bl	80080ec <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d104      	bne.n	80062b2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2205      	movs	r2, #5
 80062ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80062b0:	e006      	b.n	80062c0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80062ba:	e001      	b.n	80062c0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d101      	bne.n	80062e4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80062e0:	2302      	movs	r3, #2
 80062e2:	e016      	b.n	8006312 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d10f      	bne.n	8006310 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 ff31 	bl	8008166 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	e000      	b.n	8006312 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e07b      	b.n	8006424 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	2b00      	cmp	r3, #0
 8006332:	d108      	bne.n	8006346 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800633c:	d009      	beq.n	8006352 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	61da      	str	r2, [r3, #28]
 8006344:	e005      	b.n	8006352 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d106      	bne.n	8006372 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7fb f889 	bl	8001484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006388:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	431a      	orrs	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063c2:	431a      	orrs	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063cc:	431a      	orrs	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d6:	ea42 0103 	orr.w	r1, r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	0c1b      	lsrs	r3, r3, #16
 80063f0:	f003 0104 	and.w	r1, r3, #4
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	f003 0210 	and.w	r2, r3, #16
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	69da      	ldr	r2, [r3, #28]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006412:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e01a      	b.n	8006474 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2202      	movs	r2, #2
 8006442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006454:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7fb f85c 	bl	8001514 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	603b      	str	r3, [r7, #0]
 8006488:	4613      	mov	r3, r2
 800648a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006496:	2b01      	cmp	r3, #1
 8006498:	d101      	bne.n	800649e <HAL_SPI_Transmit+0x22>
 800649a:	2302      	movs	r3, #2
 800649c:	e126      	b.n	80066ec <HAL_SPI_Transmit+0x270>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064a6:	f7fc fd95 	bl	8002fd4 <HAL_GetTick>
 80064aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064ac:	88fb      	ldrh	r3, [r7, #6]
 80064ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d002      	beq.n	80064c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064bc:	2302      	movs	r3, #2
 80064be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064c0:	e10b      	b.n	80066da <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <HAL_SPI_Transmit+0x52>
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d102      	bne.n	80064d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064d2:	e102      	b.n	80066da <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2203      	movs	r2, #3
 80064d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	88fa      	ldrh	r2, [r7, #6]
 80064ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	88fa      	ldrh	r2, [r7, #6]
 80064f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651a:	d10f      	bne.n	800653c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800652a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800653a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006546:	2b40      	cmp	r3, #64	; 0x40
 8006548:	d007      	beq.n	800655a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006558:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006562:	d14b      	bne.n	80065fc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d002      	beq.n	8006572 <HAL_SPI_Transmit+0xf6>
 800656c:	8afb      	ldrh	r3, [r7, #22]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d13e      	bne.n	80065f0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006576:	881a      	ldrh	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006582:	1c9a      	adds	r2, r3, #2
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800658c:	b29b      	uxth	r3, r3
 800658e:	3b01      	subs	r3, #1
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006596:	e02b      	b.n	80065f0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d112      	bne.n	80065cc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	881a      	ldrh	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	1c9a      	adds	r2, r3, #2
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80065ca:	e011      	b.n	80065f0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065cc:	f7fc fd02 	bl	8002fd4 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d803      	bhi.n	80065e4 <HAL_SPI_Transmit+0x168>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e2:	d102      	bne.n	80065ea <HAL_SPI_Transmit+0x16e>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d102      	bne.n	80065f0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065ee:	e074      	b.n	80066da <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1ce      	bne.n	8006598 <HAL_SPI_Transmit+0x11c>
 80065fa:	e04c      	b.n	8006696 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <HAL_SPI_Transmit+0x18e>
 8006604:	8afb      	ldrh	r3, [r7, #22]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d140      	bne.n	800668c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	330c      	adds	r3, #12
 8006614:	7812      	ldrb	r2, [r2, #0]
 8006616:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006626:	b29b      	uxth	r3, r3
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006630:	e02c      	b.n	800668c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b02      	cmp	r3, #2
 800663e:	d113      	bne.n	8006668 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	330c      	adds	r3, #12
 800664a:	7812      	ldrb	r2, [r2, #0]
 800664c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800665c:	b29b      	uxth	r3, r3
 800665e:	3b01      	subs	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	86da      	strh	r2, [r3, #54]	; 0x36
 8006666:	e011      	b.n	800668c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006668:	f7fc fcb4 	bl	8002fd4 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d803      	bhi.n	8006680 <HAL_SPI_Transmit+0x204>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667e:	d102      	bne.n	8006686 <HAL_SPI_Transmit+0x20a>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d102      	bne.n	800668c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	77fb      	strb	r3, [r7, #31]
          goto error;
 800668a:	e026      	b.n	80066da <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006690:	b29b      	uxth	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1cd      	bne.n	8006632 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 fbda 	bl	8006e54 <SPI_EndRxTxTransaction>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2220      	movs	r2, #32
 80066aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066b4:	2300      	movs	r3, #0
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	613b      	str	r3, [r7, #16]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	77fb      	strb	r3, [r7, #31]
 80066d6:	e000      	b.n	80066da <HAL_SPI_Transmit+0x25e>
  }

error:
 80066d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3720      	adds	r7, #32
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	4613      	mov	r3, r2
 8006702:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006710:	d112      	bne.n	8006738 <HAL_SPI_Receive+0x44>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10e      	bne.n	8006738 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2204      	movs	r2, #4
 800671e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006722:	88fa      	ldrh	r2, [r7, #6]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	4613      	mov	r3, r2
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 f8f1 	bl	8006916 <HAL_SPI_TransmitReceive>
 8006734:	4603      	mov	r3, r0
 8006736:	e0ea      	b.n	800690e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_SPI_Receive+0x52>
 8006742:	2302      	movs	r3, #2
 8006744:	e0e3      	b.n	800690e <HAL_SPI_Receive+0x21a>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800674e:	f7fc fc41 	bl	8002fd4 <HAL_GetTick>
 8006752:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b01      	cmp	r3, #1
 800675e:	d002      	beq.n	8006766 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006760:	2302      	movs	r3, #2
 8006762:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006764:	e0ca      	b.n	80068fc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <HAL_SPI_Receive+0x7e>
 800676c:	88fb      	ldrh	r3, [r7, #6]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d102      	bne.n	8006778 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006776:	e0c1      	b.n	80068fc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2204      	movs	r2, #4
 800677c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	88fa      	ldrh	r2, [r7, #6]
 8006790:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	88fa      	ldrh	r2, [r7, #6]
 8006796:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067be:	d10f      	bne.n	80067e0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067de:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ea:	2b40      	cmp	r3, #64	; 0x40
 80067ec:	d007      	beq.n	80067fe <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067fc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d162      	bne.n	80068cc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006806:	e02e      	b.n	8006866 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	d115      	bne.n	8006842 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f103 020c 	add.w	r2, r3, #12
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	7812      	ldrb	r2, [r2, #0]
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006840:	e011      	b.n	8006866 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006842:	f7fc fbc7 	bl	8002fd4 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d803      	bhi.n	800685a <HAL_SPI_Receive+0x166>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d102      	bne.n	8006860 <HAL_SPI_Receive+0x16c>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d102      	bne.n	8006866 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006864:	e04a      	b.n	80068fc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800686a:	b29b      	uxth	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1cb      	bne.n	8006808 <HAL_SPI_Receive+0x114>
 8006870:	e031      	b.n	80068d6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b01      	cmp	r3, #1
 800687e:	d113      	bne.n	80068a8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688a:	b292      	uxth	r2, r2
 800688c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006892:	1c9a      	adds	r2, r3, #2
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b01      	subs	r3, #1
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068a6:	e011      	b.n	80068cc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068a8:	f7fc fb94 	bl	8002fd4 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d803      	bhi.n	80068c0 <HAL_SPI_Receive+0x1cc>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068be:	d102      	bne.n	80068c6 <HAL_SPI_Receive+0x1d2>
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d102      	bne.n	80068cc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80068ca:	e017      	b.n	80068fc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1cd      	bne.n	8006872 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 fa54 	bl	8006d88 <SPI_EndRxTransaction>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2220      	movs	r2, #32
 80068ea:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	75fb      	strb	r3, [r7, #23]
 80068f8:	e000      	b.n	80068fc <HAL_SPI_Receive+0x208>
  }

error :
 80068fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800690c:	7dfb      	ldrb	r3, [r7, #23]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b08c      	sub	sp, #48	; 0x30
 800691a:	af00      	add	r7, sp, #0
 800691c:	60f8      	str	r0, [r7, #12]
 800691e:	60b9      	str	r1, [r7, #8]
 8006920:	607a      	str	r2, [r7, #4]
 8006922:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006924:	2301      	movs	r3, #1
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_SPI_TransmitReceive+0x26>
 8006938:	2302      	movs	r3, #2
 800693a:	e18a      	b.n	8006c52 <HAL_SPI_TransmitReceive+0x33c>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006944:	f7fc fb46 	bl	8002fd4 <HAL_GetTick>
 8006948:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800695a:	887b      	ldrh	r3, [r7, #2]
 800695c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800695e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006962:	2b01      	cmp	r3, #1
 8006964:	d00f      	beq.n	8006986 <HAL_SPI_TransmitReceive+0x70>
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800696c:	d107      	bne.n	800697e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d103      	bne.n	800697e <HAL_SPI_TransmitReceive+0x68>
 8006976:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800697a:	2b04      	cmp	r3, #4
 800697c:	d003      	beq.n	8006986 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800697e:	2302      	movs	r3, #2
 8006980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006984:	e15b      	b.n	8006c3e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d005      	beq.n	8006998 <HAL_SPI_TransmitReceive+0x82>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <HAL_SPI_TransmitReceive+0x82>
 8006992:	887b      	ldrh	r3, [r7, #2]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d103      	bne.n	80069a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800699e:	e14e      	b.n	8006c3e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d003      	beq.n	80069b4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2205      	movs	r2, #5
 80069b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	887a      	ldrh	r2, [r7, #2]
 80069c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	887a      	ldrh	r2, [r7, #2]
 80069ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	887a      	ldrh	r2, [r7, #2]
 80069d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	887a      	ldrh	r2, [r7, #2]
 80069dc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f4:	2b40      	cmp	r3, #64	; 0x40
 80069f6:	d007      	beq.n	8006a08 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a10:	d178      	bne.n	8006b04 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <HAL_SPI_TransmitReceive+0x10a>
 8006a1a:	8b7b      	ldrh	r3, [r7, #26]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d166      	bne.n	8006aee <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a24:	881a      	ldrh	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	1c9a      	adds	r2, r3, #2
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a44:	e053      	b.n	8006aee <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d11b      	bne.n	8006a8c <HAL_SPI_TransmitReceive+0x176>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d016      	beq.n	8006a8c <HAL_SPI_TransmitReceive+0x176>
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d113      	bne.n	8006a8c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	881a      	ldrh	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a74:	1c9a      	adds	r2, r3, #2
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d119      	bne.n	8006ace <HAL_SPI_TransmitReceive+0x1b8>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d014      	beq.n	8006ace <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	b292      	uxth	r2, r2
 8006ab0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	1c9a      	adds	r2, r3, #2
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006aca:	2301      	movs	r3, #1
 8006acc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ace:	f7fc fa81 	bl	8002fd4 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d807      	bhi.n	8006aee <HAL_SPI_TransmitReceive+0x1d8>
 8006ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae4:	d003      	beq.n	8006aee <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006aec:	e0a7      	b.n	8006c3e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1a6      	bne.n	8006a46 <HAL_SPI_TransmitReceive+0x130>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1a1      	bne.n	8006a46 <HAL_SPI_TransmitReceive+0x130>
 8006b02:	e07c      	b.n	8006bfe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <HAL_SPI_TransmitReceive+0x1fc>
 8006b0c:	8b7b      	ldrh	r3, [r7, #26]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d16b      	bne.n	8006bea <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	330c      	adds	r3, #12
 8006b1c:	7812      	ldrb	r2, [r2, #0]
 8006b1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	3b01      	subs	r3, #1
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b38:	e057      	b.n	8006bea <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d11c      	bne.n	8006b82 <HAL_SPI_TransmitReceive+0x26c>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d017      	beq.n	8006b82 <HAL_SPI_TransmitReceive+0x26c>
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d114      	bne.n	8006b82 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	330c      	adds	r3, #12
 8006b62:	7812      	ldrb	r2, [r2, #0]
 8006b64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d119      	bne.n	8006bc4 <HAL_SPI_TransmitReceive+0x2ae>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d014      	beq.n	8006bc4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bc4:	f7fc fa06 	bl	8002fd4 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d803      	bhi.n	8006bdc <HAL_SPI_TransmitReceive+0x2c6>
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d102      	bne.n	8006be2 <HAL_SPI_TransmitReceive+0x2cc>
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d103      	bne.n	8006bea <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006be8:	e029      	b.n	8006c3e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1a2      	bne.n	8006b3a <HAL_SPI_TransmitReceive+0x224>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d19d      	bne.n	8006b3a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 f926 	bl	8006e54 <SPI_EndRxTxTransaction>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d006      	beq.n	8006c1c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2220      	movs	r2, #32
 8006c18:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006c1a:	e010      	b.n	8006c3e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10b      	bne.n	8006c3c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c24:	2300      	movs	r3, #0
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	e000      	b.n	8006c3e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006c3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3730      	adds	r7, #48	; 0x30
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c68:	b2db      	uxtb	r3, r3
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
	...

08006c78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	603b      	str	r3, [r7, #0]
 8006c84:	4613      	mov	r3, r2
 8006c86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c88:	f7fc f9a4 	bl	8002fd4 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	1a9b      	subs	r3, r3, r2
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	4413      	add	r3, r2
 8006c96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c98:	f7fc f99c 	bl	8002fd4 <HAL_GetTick>
 8006c9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c9e:	4b39      	ldr	r3, [pc, #228]	; (8006d84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	015b      	lsls	r3, r3, #5
 8006ca4:	0d1b      	lsrs	r3, r3, #20
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	fb02 f303 	mul.w	r3, r2, r3
 8006cac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cae:	e054      	b.n	8006d5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb6:	d050      	beq.n	8006d5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cb8:	f7fc f98c 	bl	8002fd4 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d902      	bls.n	8006cce <SPI_WaitFlagStateUntilTimeout+0x56>
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d13d      	bne.n	8006d4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ce6:	d111      	bne.n	8006d0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cf0:	d004      	beq.n	8006cfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfa:	d107      	bne.n	8006d0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d14:	d10f      	bne.n	8006d36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e017      	b.n	8006d7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	3b01      	subs	r3, #1
 8006d58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	4013      	ands	r3, r2
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	bf0c      	ite	eq
 8006d6a:	2301      	moveq	r3, #1
 8006d6c:	2300      	movne	r3, #0
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d19b      	bne.n	8006cb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3720      	adds	r7, #32
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000000 	.word	0x20000000

08006d88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d9c:	d111      	bne.n	8006dc2 <SPI_EndRxTransaction+0x3a>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da6:	d004      	beq.n	8006db2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006db0:	d107      	bne.n	8006dc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dc0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dca:	d12a      	bne.n	8006e22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd4:	d012      	beq.n	8006dfc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2180      	movs	r1, #128	; 0x80
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f7ff ff49 	bl	8006c78 <SPI_WaitFlagStateUntilTimeout>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d02d      	beq.n	8006e48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df0:	f043 0220 	orr.w	r2, r3, #32
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e026      	b.n	8006e4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2200      	movs	r2, #0
 8006e04:	2101      	movs	r1, #1
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f7ff ff36 	bl	8006c78 <SPI_WaitFlagStateUntilTimeout>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d01a      	beq.n	8006e48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e16:	f043 0220 	orr.w	r2, r3, #32
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e013      	b.n	8006e4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f7ff ff23 	bl	8006c78 <SPI_WaitFlagStateUntilTimeout>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d007      	beq.n	8006e48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3c:	f043 0220 	orr.w	r2, r3, #32
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e000      	b.n	8006e4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af02      	add	r7, sp, #8
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e60:	4b1b      	ldr	r3, [pc, #108]	; (8006ed0 <SPI_EndRxTxTransaction+0x7c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a1b      	ldr	r2, [pc, #108]	; (8006ed4 <SPI_EndRxTxTransaction+0x80>)
 8006e66:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6a:	0d5b      	lsrs	r3, r3, #21
 8006e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e70:	fb02 f303 	mul.w	r3, r2, r3
 8006e74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e7e:	d112      	bne.n	8006ea6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2200      	movs	r2, #0
 8006e88:	2180      	movs	r1, #128	; 0x80
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f7ff fef4 	bl	8006c78 <SPI_WaitFlagStateUntilTimeout>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d016      	beq.n	8006ec4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9a:	f043 0220 	orr.w	r2, r3, #32
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e00f      	b.n	8006ec6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00a      	beq.n	8006ec2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ebc:	2b80      	cmp	r3, #128	; 0x80
 8006ebe:	d0f2      	beq.n	8006ea6 <SPI_EndRxTxTransaction+0x52>
 8006ec0:	e000      	b.n	8006ec4 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ec2:	bf00      	nop
  }

  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000000 	.word	0x20000000
 8006ed4:	165e9f81 	.word	0x165e9f81

08006ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e041      	b.n	8006f6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d106      	bne.n	8006f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7fa fb26 	bl	8001550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3304      	adds	r3, #4
 8006f14:	4619      	mov	r1, r3
 8006f16:	4610      	mov	r0, r2
 8006f18:	f000 fa96 	bl	8007448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d001      	beq.n	8006f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e04e      	b.n	800702e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0201 	orr.w	r2, r2, #1
 8006fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a23      	ldr	r2, [pc, #140]	; (800703c <HAL_TIM_Base_Start_IT+0xc4>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d022      	beq.n	8006ff8 <HAL_TIM_Base_Start_IT+0x80>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fba:	d01d      	beq.n	8006ff8 <HAL_TIM_Base_Start_IT+0x80>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1f      	ldr	r2, [pc, #124]	; (8007040 <HAL_TIM_Base_Start_IT+0xc8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d018      	beq.n	8006ff8 <HAL_TIM_Base_Start_IT+0x80>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a1e      	ldr	r2, [pc, #120]	; (8007044 <HAL_TIM_Base_Start_IT+0xcc>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d013      	beq.n	8006ff8 <HAL_TIM_Base_Start_IT+0x80>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a1c      	ldr	r2, [pc, #112]	; (8007048 <HAL_TIM_Base_Start_IT+0xd0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00e      	beq.n	8006ff8 <HAL_TIM_Base_Start_IT+0x80>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a1b      	ldr	r2, [pc, #108]	; (800704c <HAL_TIM_Base_Start_IT+0xd4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d009      	beq.n	8006ff8 <HAL_TIM_Base_Start_IT+0x80>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a19      	ldr	r2, [pc, #100]	; (8007050 <HAL_TIM_Base_Start_IT+0xd8>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <HAL_TIM_Base_Start_IT+0x80>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a18      	ldr	r2, [pc, #96]	; (8007054 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d111      	bne.n	800701c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 0307 	and.w	r3, r3, #7
 8007002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b06      	cmp	r3, #6
 8007008:	d010      	beq.n	800702c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f042 0201 	orr.w	r2, r2, #1
 8007018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701a:	e007      	b.n	800702c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f042 0201 	orr.w	r2, r2, #1
 800702a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40010000 	.word	0x40010000
 8007040:	40000400 	.word	0x40000400
 8007044:	40000800 	.word	0x40000800
 8007048:	40000c00 	.word	0x40000c00
 800704c:	40010400 	.word	0x40010400
 8007050:	40014000 	.word	0x40014000
 8007054:	40001800 	.word	0x40001800

08007058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b02      	cmp	r3, #2
 800706c:	d122      	bne.n	80070b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b02      	cmp	r3, #2
 800707a:	d11b      	bne.n	80070b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f06f 0202 	mvn.w	r2, #2
 8007084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	f003 0303 	and.w	r3, r3, #3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f9b5 	bl	800740a <HAL_TIM_IC_CaptureCallback>
 80070a0:	e005      	b.n	80070ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f9a7 	bl	80073f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f9b8 	bl	800741e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	f003 0304 	and.w	r3, r3, #4
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d122      	bne.n	8007108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	d11b      	bne.n	8007108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f06f 0204 	mvn.w	r2, #4
 80070d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2202      	movs	r2, #2
 80070de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f98b 	bl	800740a <HAL_TIM_IC_CaptureCallback>
 80070f4:	e005      	b.n	8007102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f97d 	bl	80073f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f98e 	bl	800741e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	f003 0308 	and.w	r3, r3, #8
 8007112:	2b08      	cmp	r3, #8
 8007114:	d122      	bne.n	800715c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f003 0308 	and.w	r3, r3, #8
 8007120:	2b08      	cmp	r3, #8
 8007122:	d11b      	bne.n	800715c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f06f 0208 	mvn.w	r2, #8
 800712c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2204      	movs	r2, #4
 8007132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	f003 0303 	and.w	r3, r3, #3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d003      	beq.n	800714a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f961 	bl	800740a <HAL_TIM_IC_CaptureCallback>
 8007148:	e005      	b.n	8007156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f953 	bl	80073f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f964 	bl	800741e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f003 0310 	and.w	r3, r3, #16
 8007166:	2b10      	cmp	r3, #16
 8007168:	d122      	bne.n	80071b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f003 0310 	and.w	r3, r3, #16
 8007174:	2b10      	cmp	r3, #16
 8007176:	d11b      	bne.n	80071b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f06f 0210 	mvn.w	r2, #16
 8007180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2208      	movs	r2, #8
 8007186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f937 	bl	800740a <HAL_TIM_IC_CaptureCallback>
 800719c:	e005      	b.n	80071aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f929 	bl	80073f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f93a 	bl	800741e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d10e      	bne.n	80071dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d107      	bne.n	80071dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f06f 0201 	mvn.w	r2, #1
 80071d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7f9 fee8 	bl	8000fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e6:	2b80      	cmp	r3, #128	; 0x80
 80071e8:	d10e      	bne.n	8007208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f4:	2b80      	cmp	r3, #128	; 0x80
 80071f6:	d107      	bne.n	8007208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fae0 	bl	80077c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007212:	2b40      	cmp	r3, #64	; 0x40
 8007214:	d10e      	bne.n	8007234 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007220:	2b40      	cmp	r3, #64	; 0x40
 8007222:	d107      	bne.n	8007234 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800722c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f8ff 	bl	8007432 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b20      	cmp	r3, #32
 8007240:	d10e      	bne.n	8007260 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b20      	cmp	r3, #32
 800724e:	d107      	bne.n	8007260 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f06f 0220 	mvn.w	r2, #32
 8007258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 faaa 	bl	80077b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007260:	bf00      	nop
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800727c:	2b01      	cmp	r3, #1
 800727e:	d101      	bne.n	8007284 <HAL_TIM_ConfigClockSource+0x1c>
 8007280:	2302      	movs	r3, #2
 8007282:	e0b4      	b.n	80073ee <HAL_TIM_ConfigClockSource+0x186>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072bc:	d03e      	beq.n	800733c <HAL_TIM_ConfigClockSource+0xd4>
 80072be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072c2:	f200 8087 	bhi.w	80073d4 <HAL_TIM_ConfigClockSource+0x16c>
 80072c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ca:	f000 8086 	beq.w	80073da <HAL_TIM_ConfigClockSource+0x172>
 80072ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d2:	d87f      	bhi.n	80073d4 <HAL_TIM_ConfigClockSource+0x16c>
 80072d4:	2b70      	cmp	r3, #112	; 0x70
 80072d6:	d01a      	beq.n	800730e <HAL_TIM_ConfigClockSource+0xa6>
 80072d8:	2b70      	cmp	r3, #112	; 0x70
 80072da:	d87b      	bhi.n	80073d4 <HAL_TIM_ConfigClockSource+0x16c>
 80072dc:	2b60      	cmp	r3, #96	; 0x60
 80072de:	d050      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0x11a>
 80072e0:	2b60      	cmp	r3, #96	; 0x60
 80072e2:	d877      	bhi.n	80073d4 <HAL_TIM_ConfigClockSource+0x16c>
 80072e4:	2b50      	cmp	r3, #80	; 0x50
 80072e6:	d03c      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0xfa>
 80072e8:	2b50      	cmp	r3, #80	; 0x50
 80072ea:	d873      	bhi.n	80073d4 <HAL_TIM_ConfigClockSource+0x16c>
 80072ec:	2b40      	cmp	r3, #64	; 0x40
 80072ee:	d058      	beq.n	80073a2 <HAL_TIM_ConfigClockSource+0x13a>
 80072f0:	2b40      	cmp	r3, #64	; 0x40
 80072f2:	d86f      	bhi.n	80073d4 <HAL_TIM_ConfigClockSource+0x16c>
 80072f4:	2b30      	cmp	r3, #48	; 0x30
 80072f6:	d064      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x15a>
 80072f8:	2b30      	cmp	r3, #48	; 0x30
 80072fa:	d86b      	bhi.n	80073d4 <HAL_TIM_ConfigClockSource+0x16c>
 80072fc:	2b20      	cmp	r3, #32
 80072fe:	d060      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007300:	2b20      	cmp	r3, #32
 8007302:	d867      	bhi.n	80073d4 <HAL_TIM_ConfigClockSource+0x16c>
 8007304:	2b00      	cmp	r3, #0
 8007306:	d05c      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007308:	2b10      	cmp	r3, #16
 800730a:	d05a      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x15a>
 800730c:	e062      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6818      	ldr	r0, [r3, #0]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	6899      	ldr	r1, [r3, #8]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f000 f9ad 	bl	800767c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007330:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	609a      	str	r2, [r3, #8]
      break;
 800733a:	e04f      	b.n	80073dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6818      	ldr	r0, [r3, #0]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	6899      	ldr	r1, [r3, #8]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f000 f996 	bl	800767c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689a      	ldr	r2, [r3, #8]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800735e:	609a      	str	r2, [r3, #8]
      break;
 8007360:	e03c      	b.n	80073dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6818      	ldr	r0, [r3, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	6859      	ldr	r1, [r3, #4]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	461a      	mov	r2, r3
 8007370:	f000 f90a 	bl	8007588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2150      	movs	r1, #80	; 0x50
 800737a:	4618      	mov	r0, r3
 800737c:	f000 f963 	bl	8007646 <TIM_ITRx_SetConfig>
      break;
 8007380:	e02c      	b.n	80073dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6818      	ldr	r0, [r3, #0]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6859      	ldr	r1, [r3, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	461a      	mov	r2, r3
 8007390:	f000 f929 	bl	80075e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2160      	movs	r1, #96	; 0x60
 800739a:	4618      	mov	r0, r3
 800739c:	f000 f953 	bl	8007646 <TIM_ITRx_SetConfig>
      break;
 80073a0:	e01c      	b.n	80073dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6818      	ldr	r0, [r3, #0]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	6859      	ldr	r1, [r3, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	461a      	mov	r2, r3
 80073b0:	f000 f8ea 	bl	8007588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2140      	movs	r1, #64	; 0x40
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 f943 	bl	8007646 <TIM_ITRx_SetConfig>
      break;
 80073c0:	e00c      	b.n	80073dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4619      	mov	r1, r3
 80073cc:	4610      	mov	r0, r2
 80073ce:	f000 f93a 	bl	8007646 <TIM_ITRx_SetConfig>
      break;
 80073d2:	e003      	b.n	80073dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	73fb      	strb	r3, [r7, #15]
      break;
 80073d8:	e000      	b.n	80073dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b083      	sub	sp, #12
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
	...

08007448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a40      	ldr	r2, [pc, #256]	; (800755c <TIM_Base_SetConfig+0x114>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d013      	beq.n	8007488 <TIM_Base_SetConfig+0x40>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007466:	d00f      	beq.n	8007488 <TIM_Base_SetConfig+0x40>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a3d      	ldr	r2, [pc, #244]	; (8007560 <TIM_Base_SetConfig+0x118>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d00b      	beq.n	8007488 <TIM_Base_SetConfig+0x40>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a3c      	ldr	r2, [pc, #240]	; (8007564 <TIM_Base_SetConfig+0x11c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d007      	beq.n	8007488 <TIM_Base_SetConfig+0x40>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a3b      	ldr	r2, [pc, #236]	; (8007568 <TIM_Base_SetConfig+0x120>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d003      	beq.n	8007488 <TIM_Base_SetConfig+0x40>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a3a      	ldr	r2, [pc, #232]	; (800756c <TIM_Base_SetConfig+0x124>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d108      	bne.n	800749a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a2f      	ldr	r2, [pc, #188]	; (800755c <TIM_Base_SetConfig+0x114>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d02b      	beq.n	80074fa <TIM_Base_SetConfig+0xb2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a8:	d027      	beq.n	80074fa <TIM_Base_SetConfig+0xb2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a2c      	ldr	r2, [pc, #176]	; (8007560 <TIM_Base_SetConfig+0x118>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d023      	beq.n	80074fa <TIM_Base_SetConfig+0xb2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a2b      	ldr	r2, [pc, #172]	; (8007564 <TIM_Base_SetConfig+0x11c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d01f      	beq.n	80074fa <TIM_Base_SetConfig+0xb2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a2a      	ldr	r2, [pc, #168]	; (8007568 <TIM_Base_SetConfig+0x120>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d01b      	beq.n	80074fa <TIM_Base_SetConfig+0xb2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a29      	ldr	r2, [pc, #164]	; (800756c <TIM_Base_SetConfig+0x124>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d017      	beq.n	80074fa <TIM_Base_SetConfig+0xb2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a28      	ldr	r2, [pc, #160]	; (8007570 <TIM_Base_SetConfig+0x128>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d013      	beq.n	80074fa <TIM_Base_SetConfig+0xb2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a27      	ldr	r2, [pc, #156]	; (8007574 <TIM_Base_SetConfig+0x12c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00f      	beq.n	80074fa <TIM_Base_SetConfig+0xb2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a26      	ldr	r2, [pc, #152]	; (8007578 <TIM_Base_SetConfig+0x130>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d00b      	beq.n	80074fa <TIM_Base_SetConfig+0xb2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a25      	ldr	r2, [pc, #148]	; (800757c <TIM_Base_SetConfig+0x134>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d007      	beq.n	80074fa <TIM_Base_SetConfig+0xb2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a24      	ldr	r2, [pc, #144]	; (8007580 <TIM_Base_SetConfig+0x138>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d003      	beq.n	80074fa <TIM_Base_SetConfig+0xb2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a23      	ldr	r2, [pc, #140]	; (8007584 <TIM_Base_SetConfig+0x13c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d108      	bne.n	800750c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	4313      	orrs	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a0a      	ldr	r2, [pc, #40]	; (800755c <TIM_Base_SetConfig+0x114>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d003      	beq.n	8007540 <TIM_Base_SetConfig+0xf8>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a0c      	ldr	r2, [pc, #48]	; (800756c <TIM_Base_SetConfig+0x124>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d103      	bne.n	8007548 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	691a      	ldr	r2, [r3, #16]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	615a      	str	r2, [r3, #20]
}
 800754e:	bf00      	nop
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	40010000 	.word	0x40010000
 8007560:	40000400 	.word	0x40000400
 8007564:	40000800 	.word	0x40000800
 8007568:	40000c00 	.word	0x40000c00
 800756c:	40010400 	.word	0x40010400
 8007570:	40014000 	.word	0x40014000
 8007574:	40014400 	.word	0x40014400
 8007578:	40014800 	.word	0x40014800
 800757c:	40001800 	.word	0x40001800
 8007580:	40001c00 	.word	0x40001c00
 8007584:	40002000 	.word	0x40002000

08007588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	f023 0201 	bic.w	r2, r3, #1
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f023 030a 	bic.w	r3, r3, #10
 80075c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	621a      	str	r2, [r3, #32]
}
 80075da:	bf00      	nop
 80075dc:	371c      	adds	r7, #28
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b087      	sub	sp, #28
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	60f8      	str	r0, [r7, #12]
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f023 0210 	bic.w	r2, r3, #16
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	031b      	lsls	r3, r3, #12
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007622:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	011b      	lsls	r3, r3, #4
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	4313      	orrs	r3, r2
 800762c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	621a      	str	r2, [r3, #32]
}
 800763a:	bf00      	nop
 800763c:	371c      	adds	r7, #28
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007646:	b480      	push	{r7}
 8007648:	b085      	sub	sp, #20
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	f043 0307 	orr.w	r3, r3, #7
 8007668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	609a      	str	r2, [r3, #8]
}
 8007670:	bf00      	nop
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	021a      	lsls	r2, r3, #8
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	431a      	orrs	r2, r3
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	609a      	str	r2, [r3, #8]
}
 80076b0:	bf00      	nop
 80076b2:	371c      	adds	r7, #28
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d101      	bne.n	80076d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076d0:	2302      	movs	r3, #2
 80076d2:	e05a      	b.n	800778a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a21      	ldr	r2, [pc, #132]	; (8007798 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d022      	beq.n	800775e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007720:	d01d      	beq.n	800775e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a1d      	ldr	r2, [pc, #116]	; (800779c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d018      	beq.n	800775e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a1b      	ldr	r2, [pc, #108]	; (80077a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d013      	beq.n	800775e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a1a      	ldr	r2, [pc, #104]	; (80077a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00e      	beq.n	800775e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a18      	ldr	r2, [pc, #96]	; (80077a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d009      	beq.n	800775e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a17      	ldr	r2, [pc, #92]	; (80077ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d004      	beq.n	800775e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a15      	ldr	r2, [pc, #84]	; (80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d10c      	bne.n	8007778 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	4313      	orrs	r3, r2
 800776e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	40010000 	.word	0x40010000
 800779c:	40000400 	.word	0x40000400
 80077a0:	40000800 	.word	0x40000800
 80077a4:	40000c00 	.word	0x40000c00
 80077a8:	40010400 	.word	0x40010400
 80077ac:	40014000 	.word	0x40014000
 80077b0:	40001800 	.word	0x40001800

080077b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e03f      	b.n	800786e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7f9 fee0 	bl	80015c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2224      	movs	r2, #36	; 0x24
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68da      	ldr	r2, [r3, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800781e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f929 	bl	8007a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691a      	ldr	r2, [r3, #16]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	695a      	ldr	r2, [r3, #20]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2220      	movs	r2, #32
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2220      	movs	r2, #32
 8007868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b08a      	sub	sp, #40	; 0x28
 800787a:	af02      	add	r7, sp, #8
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	60b9      	str	r1, [r7, #8]
 8007880:	603b      	str	r3, [r7, #0]
 8007882:	4613      	mov	r3, r2
 8007884:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b20      	cmp	r3, #32
 8007894:	d17c      	bne.n	8007990 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <HAL_UART_Transmit+0x2c>
 800789c:	88fb      	ldrh	r3, [r7, #6]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e075      	b.n	8007992 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d101      	bne.n	80078b4 <HAL_UART_Transmit+0x3e>
 80078b0:	2302      	movs	r3, #2
 80078b2:	e06e      	b.n	8007992 <HAL_UART_Transmit+0x11c>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2221      	movs	r2, #33	; 0x21
 80078c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078ca:	f7fb fb83 	bl	8002fd4 <HAL_GetTick>
 80078ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	88fa      	ldrh	r2, [r7, #6]
 80078d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	88fa      	ldrh	r2, [r7, #6]
 80078da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e4:	d108      	bne.n	80078f8 <HAL_UART_Transmit+0x82>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d104      	bne.n	80078f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80078ee:	2300      	movs	r3, #0
 80078f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	61bb      	str	r3, [r7, #24]
 80078f6:	e003      	b.n	8007900 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078fc:	2300      	movs	r3, #0
 80078fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007908:	e02a      	b.n	8007960 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2200      	movs	r2, #0
 8007912:	2180      	movs	r1, #128	; 0x80
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 f840 	bl	800799a <UART_WaitOnFlagUntilTimeout>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e036      	b.n	8007992 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10b      	bne.n	8007942 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007938:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	3302      	adds	r3, #2
 800793e:	61bb      	str	r3, [r7, #24]
 8007940:	e007      	b.n	8007952 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	781a      	ldrb	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	3301      	adds	r3, #1
 8007950:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007956:	b29b      	uxth	r3, r3
 8007958:	3b01      	subs	r3, #1
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007964:	b29b      	uxth	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1cf      	bne.n	800790a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	2200      	movs	r2, #0
 8007972:	2140      	movs	r1, #64	; 0x40
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 f810 	bl	800799a <UART_WaitOnFlagUntilTimeout>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e006      	b.n	8007992 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2220      	movs	r2, #32
 8007988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	e000      	b.n	8007992 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007990:	2302      	movs	r3, #2
  }
}
 8007992:	4618      	mov	r0, r3
 8007994:	3720      	adds	r7, #32
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b090      	sub	sp, #64	; 0x40
 800799e:	af00      	add	r7, sp, #0
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	603b      	str	r3, [r7, #0]
 80079a6:	4613      	mov	r3, r2
 80079a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079aa:	e050      	b.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b2:	d04c      	beq.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80079b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d007      	beq.n	80079ca <UART_WaitOnFlagUntilTimeout+0x30>
 80079ba:	f7fb fb0b 	bl	8002fd4 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d241      	bcs.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	330c      	adds	r3, #12
 80079d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	330c      	adds	r3, #12
 80079e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079ea:	637a      	str	r2, [r7, #52]	; 0x34
 80079ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e5      	bne.n	80079ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3314      	adds	r3, #20
 8007a04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	f023 0301 	bic.w	r3, r3, #1
 8007a14:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3314      	adds	r3, #20
 8007a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a1e:	623a      	str	r2, [r7, #32]
 8007a20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	69f9      	ldr	r1, [r7, #28]
 8007a24:	6a3a      	ldr	r2, [r7, #32]
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e5      	bne.n	80079fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e00f      	b.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4013      	ands	r3, r2
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	bf0c      	ite	eq
 8007a5e:	2301      	moveq	r3, #1
 8007a60:	2300      	movne	r3, #0
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d09f      	beq.n	80079ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3740      	adds	r7, #64	; 0x40
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
	...

08007a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a7c:	b0c0      	sub	sp, #256	; 0x100
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a94:	68d9      	ldr	r1, [r3, #12]
 8007a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	ea40 0301 	orr.w	r3, r0, r1
 8007aa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ad0:	f021 010c 	bic.w	r1, r1, #12
 8007ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ade:	430b      	orrs	r3, r1
 8007ae0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af2:	6999      	ldr	r1, [r3, #24]
 8007af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	ea40 0301 	orr.w	r3, r0, r1
 8007afe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	4b8f      	ldr	r3, [pc, #572]	; (8007d44 <UART_SetConfig+0x2cc>)
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d005      	beq.n	8007b18 <UART_SetConfig+0xa0>
 8007b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	4b8d      	ldr	r3, [pc, #564]	; (8007d48 <UART_SetConfig+0x2d0>)
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d104      	bne.n	8007b22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b18:	f7fe f968 	bl	8005dec <HAL_RCC_GetPCLK2Freq>
 8007b1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b20:	e003      	b.n	8007b2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b22:	f7fe f94f 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 8007b26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b34:	f040 810c 	bne.w	8007d50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	462b      	mov	r3, r5
 8007b4e:	1891      	adds	r1, r2, r2
 8007b50:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b52:	415b      	adcs	r3, r3
 8007b54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	eb12 0801 	adds.w	r8, r2, r1
 8007b60:	4629      	mov	r1, r5
 8007b62:	eb43 0901 	adc.w	r9, r3, r1
 8007b66:	f04f 0200 	mov.w	r2, #0
 8007b6a:	f04f 0300 	mov.w	r3, #0
 8007b6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b7a:	4690      	mov	r8, r2
 8007b7c:	4699      	mov	r9, r3
 8007b7e:	4623      	mov	r3, r4
 8007b80:	eb18 0303 	adds.w	r3, r8, r3
 8007b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b88:	462b      	mov	r3, r5
 8007b8a:	eb49 0303 	adc.w	r3, r9, r3
 8007b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007ba2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	18db      	adds	r3, r3, r3
 8007baa:	653b      	str	r3, [r7, #80]	; 0x50
 8007bac:	4613      	mov	r3, r2
 8007bae:	eb42 0303 	adc.w	r3, r2, r3
 8007bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8007bb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007bb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007bbc:	f7f8 fb68 	bl	8000290 <__aeabi_uldivmod>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4b61      	ldr	r3, [pc, #388]	; (8007d4c <UART_SetConfig+0x2d4>)
 8007bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8007bca:	095b      	lsrs	r3, r3, #5
 8007bcc:	011c      	lsls	r4, r3, #4
 8007bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007bdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007be0:	4642      	mov	r2, r8
 8007be2:	464b      	mov	r3, r9
 8007be4:	1891      	adds	r1, r2, r2
 8007be6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007be8:	415b      	adcs	r3, r3
 8007bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007bf0:	4641      	mov	r1, r8
 8007bf2:	eb12 0a01 	adds.w	sl, r2, r1
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	eb43 0b01 	adc.w	fp, r3, r1
 8007bfc:	f04f 0200 	mov.w	r2, #0
 8007c00:	f04f 0300 	mov.w	r3, #0
 8007c04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c10:	4692      	mov	sl, r2
 8007c12:	469b      	mov	fp, r3
 8007c14:	4643      	mov	r3, r8
 8007c16:	eb1a 0303 	adds.w	r3, sl, r3
 8007c1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c1e:	464b      	mov	r3, r9
 8007c20:	eb4b 0303 	adc.w	r3, fp, r3
 8007c24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	18db      	adds	r3, r3, r3
 8007c40:	643b      	str	r3, [r7, #64]	; 0x40
 8007c42:	4613      	mov	r3, r2
 8007c44:	eb42 0303 	adc.w	r3, r2, r3
 8007c48:	647b      	str	r3, [r7, #68]	; 0x44
 8007c4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c52:	f7f8 fb1d 	bl	8000290 <__aeabi_uldivmod>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4b3b      	ldr	r3, [pc, #236]	; (8007d4c <UART_SetConfig+0x2d4>)
 8007c5e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c62:	095b      	lsrs	r3, r3, #5
 8007c64:	2264      	movs	r2, #100	; 0x64
 8007c66:	fb02 f303 	mul.w	r3, r2, r3
 8007c6a:	1acb      	subs	r3, r1, r3
 8007c6c:	00db      	lsls	r3, r3, #3
 8007c6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c72:	4b36      	ldr	r3, [pc, #216]	; (8007d4c <UART_SetConfig+0x2d4>)
 8007c74:	fba3 2302 	umull	r2, r3, r3, r2
 8007c78:	095b      	lsrs	r3, r3, #5
 8007c7a:	005b      	lsls	r3, r3, #1
 8007c7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c80:	441c      	add	r4, r3
 8007c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c94:	4642      	mov	r2, r8
 8007c96:	464b      	mov	r3, r9
 8007c98:	1891      	adds	r1, r2, r2
 8007c9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c9c:	415b      	adcs	r3, r3
 8007c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ca0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ca4:	4641      	mov	r1, r8
 8007ca6:	1851      	adds	r1, r2, r1
 8007ca8:	6339      	str	r1, [r7, #48]	; 0x30
 8007caa:	4649      	mov	r1, r9
 8007cac:	414b      	adcs	r3, r1
 8007cae:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb0:	f04f 0200 	mov.w	r2, #0
 8007cb4:	f04f 0300 	mov.w	r3, #0
 8007cb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007cbc:	4659      	mov	r1, fp
 8007cbe:	00cb      	lsls	r3, r1, #3
 8007cc0:	4651      	mov	r1, sl
 8007cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cc6:	4651      	mov	r1, sl
 8007cc8:	00ca      	lsls	r2, r1, #3
 8007cca:	4610      	mov	r0, r2
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4603      	mov	r3, r0
 8007cd0:	4642      	mov	r2, r8
 8007cd2:	189b      	adds	r3, r3, r2
 8007cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cd8:	464b      	mov	r3, r9
 8007cda:	460a      	mov	r2, r1
 8007cdc:	eb42 0303 	adc.w	r3, r2, r3
 8007ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007cf0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007cf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	18db      	adds	r3, r3, r3
 8007cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cfe:	4613      	mov	r3, r2
 8007d00:	eb42 0303 	adc.w	r3, r2, r3
 8007d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d0e:	f7f8 fabf 	bl	8000290 <__aeabi_uldivmod>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	4b0d      	ldr	r3, [pc, #52]	; (8007d4c <UART_SetConfig+0x2d4>)
 8007d18:	fba3 1302 	umull	r1, r3, r3, r2
 8007d1c:	095b      	lsrs	r3, r3, #5
 8007d1e:	2164      	movs	r1, #100	; 0x64
 8007d20:	fb01 f303 	mul.w	r3, r1, r3
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	3332      	adds	r3, #50	; 0x32
 8007d2a:	4a08      	ldr	r2, [pc, #32]	; (8007d4c <UART_SetConfig+0x2d4>)
 8007d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d30:	095b      	lsrs	r3, r3, #5
 8007d32:	f003 0207 	and.w	r2, r3, #7
 8007d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4422      	add	r2, r4
 8007d3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d40:	e105      	b.n	8007f4e <UART_SetConfig+0x4d6>
 8007d42:	bf00      	nop
 8007d44:	40011000 	.word	0x40011000
 8007d48:	40011400 	.word	0x40011400
 8007d4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d54:	2200      	movs	r2, #0
 8007d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d62:	4642      	mov	r2, r8
 8007d64:	464b      	mov	r3, r9
 8007d66:	1891      	adds	r1, r2, r2
 8007d68:	6239      	str	r1, [r7, #32]
 8007d6a:	415b      	adcs	r3, r3
 8007d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d72:	4641      	mov	r1, r8
 8007d74:	1854      	adds	r4, r2, r1
 8007d76:	4649      	mov	r1, r9
 8007d78:	eb43 0501 	adc.w	r5, r3, r1
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	f04f 0300 	mov.w	r3, #0
 8007d84:	00eb      	lsls	r3, r5, #3
 8007d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d8a:	00e2      	lsls	r2, r4, #3
 8007d8c:	4614      	mov	r4, r2
 8007d8e:	461d      	mov	r5, r3
 8007d90:	4643      	mov	r3, r8
 8007d92:	18e3      	adds	r3, r4, r3
 8007d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d98:	464b      	mov	r3, r9
 8007d9a:	eb45 0303 	adc.w	r3, r5, r3
 8007d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007db2:	f04f 0200 	mov.w	r2, #0
 8007db6:	f04f 0300 	mov.w	r3, #0
 8007dba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007dbe:	4629      	mov	r1, r5
 8007dc0:	008b      	lsls	r3, r1, #2
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dc8:	4621      	mov	r1, r4
 8007dca:	008a      	lsls	r2, r1, #2
 8007dcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007dd0:	f7f8 fa5e 	bl	8000290 <__aeabi_uldivmod>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4b60      	ldr	r3, [pc, #384]	; (8007f5c <UART_SetConfig+0x4e4>)
 8007dda:	fba3 2302 	umull	r2, r3, r3, r2
 8007dde:	095b      	lsrs	r3, r3, #5
 8007de0:	011c      	lsls	r4, r3, #4
 8007de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007dec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007df0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007df4:	4642      	mov	r2, r8
 8007df6:	464b      	mov	r3, r9
 8007df8:	1891      	adds	r1, r2, r2
 8007dfa:	61b9      	str	r1, [r7, #24]
 8007dfc:	415b      	adcs	r3, r3
 8007dfe:	61fb      	str	r3, [r7, #28]
 8007e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e04:	4641      	mov	r1, r8
 8007e06:	1851      	adds	r1, r2, r1
 8007e08:	6139      	str	r1, [r7, #16]
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	414b      	adcs	r3, r1
 8007e0e:	617b      	str	r3, [r7, #20]
 8007e10:	f04f 0200 	mov.w	r2, #0
 8007e14:	f04f 0300 	mov.w	r3, #0
 8007e18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e1c:	4659      	mov	r1, fp
 8007e1e:	00cb      	lsls	r3, r1, #3
 8007e20:	4651      	mov	r1, sl
 8007e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e26:	4651      	mov	r1, sl
 8007e28:	00ca      	lsls	r2, r1, #3
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4603      	mov	r3, r0
 8007e30:	4642      	mov	r2, r8
 8007e32:	189b      	adds	r3, r3, r2
 8007e34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e38:	464b      	mov	r3, r9
 8007e3a:	460a      	mov	r2, r1
 8007e3c:	eb42 0303 	adc.w	r3, r2, r3
 8007e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e50:	f04f 0200 	mov.w	r2, #0
 8007e54:	f04f 0300 	mov.w	r3, #0
 8007e58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	008b      	lsls	r3, r1, #2
 8007e60:	4641      	mov	r1, r8
 8007e62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e66:	4641      	mov	r1, r8
 8007e68:	008a      	lsls	r2, r1, #2
 8007e6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e6e:	f7f8 fa0f 	bl	8000290 <__aeabi_uldivmod>
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	4b39      	ldr	r3, [pc, #228]	; (8007f5c <UART_SetConfig+0x4e4>)
 8007e78:	fba3 1302 	umull	r1, r3, r3, r2
 8007e7c:	095b      	lsrs	r3, r3, #5
 8007e7e:	2164      	movs	r1, #100	; 0x64
 8007e80:	fb01 f303 	mul.w	r3, r1, r3
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	011b      	lsls	r3, r3, #4
 8007e88:	3332      	adds	r3, #50	; 0x32
 8007e8a:	4a34      	ldr	r2, [pc, #208]	; (8007f5c <UART_SetConfig+0x4e4>)
 8007e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e90:	095b      	lsrs	r3, r3, #5
 8007e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e96:	441c      	add	r4, r3
 8007e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	673b      	str	r3, [r7, #112]	; 0x70
 8007ea0:	677a      	str	r2, [r7, #116]	; 0x74
 8007ea2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007ea6:	4642      	mov	r2, r8
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	1891      	adds	r1, r2, r2
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	415b      	adcs	r3, r3
 8007eb0:	60fb      	str	r3, [r7, #12]
 8007eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007eb6:	4641      	mov	r1, r8
 8007eb8:	1851      	adds	r1, r2, r1
 8007eba:	6039      	str	r1, [r7, #0]
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	414b      	adcs	r3, r1
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	f04f 0200 	mov.w	r2, #0
 8007ec6:	f04f 0300 	mov.w	r3, #0
 8007eca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ece:	4659      	mov	r1, fp
 8007ed0:	00cb      	lsls	r3, r1, #3
 8007ed2:	4651      	mov	r1, sl
 8007ed4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ed8:	4651      	mov	r1, sl
 8007eda:	00ca      	lsls	r2, r1, #3
 8007edc:	4610      	mov	r0, r2
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	4642      	mov	r2, r8
 8007ee4:	189b      	adds	r3, r3, r2
 8007ee6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ee8:	464b      	mov	r3, r9
 8007eea:	460a      	mov	r2, r1
 8007eec:	eb42 0303 	adc.w	r3, r2, r3
 8007ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	663b      	str	r3, [r7, #96]	; 0x60
 8007efc:	667a      	str	r2, [r7, #100]	; 0x64
 8007efe:	f04f 0200 	mov.w	r2, #0
 8007f02:	f04f 0300 	mov.w	r3, #0
 8007f06:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	008b      	lsls	r3, r1, #2
 8007f0e:	4641      	mov	r1, r8
 8007f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f14:	4641      	mov	r1, r8
 8007f16:	008a      	lsls	r2, r1, #2
 8007f18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f1c:	f7f8 f9b8 	bl	8000290 <__aeabi_uldivmod>
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	4b0d      	ldr	r3, [pc, #52]	; (8007f5c <UART_SetConfig+0x4e4>)
 8007f26:	fba3 1302 	umull	r1, r3, r3, r2
 8007f2a:	095b      	lsrs	r3, r3, #5
 8007f2c:	2164      	movs	r1, #100	; 0x64
 8007f2e:	fb01 f303 	mul.w	r3, r1, r3
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	011b      	lsls	r3, r3, #4
 8007f36:	3332      	adds	r3, #50	; 0x32
 8007f38:	4a08      	ldr	r2, [pc, #32]	; (8007f5c <UART_SetConfig+0x4e4>)
 8007f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f3e:	095b      	lsrs	r3, r3, #5
 8007f40:	f003 020f 	and.w	r2, r3, #15
 8007f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4422      	add	r2, r4
 8007f4c:	609a      	str	r2, [r3, #8]
}
 8007f4e:	bf00      	nop
 8007f50:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f54:	46bd      	mov	sp, r7
 8007f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f5a:	bf00      	nop
 8007f5c:	51eb851f 	.word	0x51eb851f

08007f60 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d123      	bne.n	8007fba <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007f7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	6851      	ldr	r1, [r2, #4]
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	6892      	ldr	r2, [r2, #8]
 8007f86:	4311      	orrs	r1, r2
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	68d2      	ldr	r2, [r2, #12]
 8007f8c:	4311      	orrs	r1, r2
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	6912      	ldr	r2, [r2, #16]
 8007f92:	4311      	orrs	r1, r2
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	6952      	ldr	r2, [r2, #20]
 8007f98:	4311      	orrs	r1, r2
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	6992      	ldr	r2, [r2, #24]
 8007f9e:	4311      	orrs	r1, r2
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	69d2      	ldr	r2, [r2, #28]
 8007fa4:	4311      	orrs	r1, r2
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	6a12      	ldr	r2, [r2, #32]
 8007faa:	4311      	orrs	r1, r2
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007fb0:	430a      	orrs	r2, r1
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	e028      	b.n	800800c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	69d9      	ldr	r1, [r3, #28]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	4319      	orrs	r1, r3
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007fe0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	6851      	ldr	r1, [r2, #4]
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	6892      	ldr	r2, [r2, #8]
 8007fec:	4311      	orrs	r1, r2
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	68d2      	ldr	r2, [r2, #12]
 8007ff2:	4311      	orrs	r1, r2
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	6912      	ldr	r2, [r2, #16]
 8007ff8:	4311      	orrs	r1, r2
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	6952      	ldr	r2, [r2, #20]
 8007ffe:	4311      	orrs	r1, r2
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	6992      	ldr	r2, [r2, #24]
 8008004:	430a      	orrs	r2, r1
 8008006:	431a      	orrs	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d128      	bne.n	800807e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	1e59      	subs	r1, r3, #1
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	3b01      	subs	r3, #1
 8008040:	011b      	lsls	r3, r3, #4
 8008042:	4319      	orrs	r1, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	3b01      	subs	r3, #1
 800804a:	021b      	lsls	r3, r3, #8
 800804c:	4319      	orrs	r1, r3
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	3b01      	subs	r3, #1
 8008054:	031b      	lsls	r3, r3, #12
 8008056:	4319      	orrs	r1, r3
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	3b01      	subs	r3, #1
 800805e:	041b      	lsls	r3, r3, #16
 8008060:	4319      	orrs	r1, r3
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	3b01      	subs	r3, #1
 8008068:	051b      	lsls	r3, r3, #20
 800806a:	4319      	orrs	r1, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	3b01      	subs	r3, #1
 8008072:	061b      	lsls	r3, r3, #24
 8008074:	430b      	orrs	r3, r1
 8008076:	431a      	orrs	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	609a      	str	r2, [r3, #8]
 800807c:	e02f      	b.n	80080de <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008086:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	68d2      	ldr	r2, [r2, #12]
 800808e:	3a01      	subs	r2, #1
 8008090:	0311      	lsls	r1, r2, #12
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	6952      	ldr	r2, [r2, #20]
 8008096:	3a01      	subs	r2, #1
 8008098:	0512      	lsls	r2, r2, #20
 800809a:	430a      	orrs	r2, r1
 800809c:	431a      	orrs	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	1e59      	subs	r1, r3, #1
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	011b      	lsls	r3, r3, #4
 80080b8:	4319      	orrs	r1, r3
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	3b01      	subs	r3, #1
 80080c0:	021b      	lsls	r3, r3, #8
 80080c2:	4319      	orrs	r1, r3
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	041b      	lsls	r3, r3, #16
 80080cc:	4319      	orrs	r1, r3
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	061b      	lsls	r3, r3, #24
 80080d6:	430b      	orrs	r3, r1
 80080d8:	431a      	orrs	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	0d9b      	lsrs	r3, r3, #22
 8008102:	059b      	lsls	r3, r3, #22
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	6811      	ldr	r1, [r2, #0]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	6852      	ldr	r2, [r2, #4]
 800810c:	4311      	orrs	r1, r2
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	6892      	ldr	r2, [r2, #8]
 8008112:	3a01      	subs	r2, #1
 8008114:	0152      	lsls	r2, r2, #5
 8008116:	4311      	orrs	r1, r2
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	68d2      	ldr	r2, [r2, #12]
 800811c:	0252      	lsls	r2, r2, #9
 800811e:	430a      	orrs	r2, r1
 8008120:	431a      	orrs	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008126:	f7fa ff55 	bl	8002fd4 <HAL_GetTick>
 800812a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800812c:	e010      	b.n	8008150 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008134:	d00c      	beq.n	8008150 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d007      	beq.n	800814c <FMC_SDRAM_SendCommand+0x60>
 800813c:	f7fa ff4a 	bl	8002fd4 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	429a      	cmp	r2, r3
 800814a:	d201      	bcs.n	8008150 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e006      	b.n	800815e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	f003 0320 	and.w	r3, r3, #32
 8008158:	2b20      	cmp	r3, #32
 800815a:	d0e8      	beq.n	800812e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008166:	b480      	push	{r7}
 8008168:	b083      	sub	sp, #12
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008178:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	0052      	lsls	r2, r2, #1
 8008180:	431a      	orrs	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800819e:	2300      	movs	r3, #0
 80081a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80081a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80081a6:	2b84      	cmp	r3, #132	; 0x84
 80081a8:	d005      	beq.n	80081b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80081aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	4413      	add	r3, r2
 80081b2:	3303      	adds	r3, #3
 80081b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80081b6:	68fb      	ldr	r3, [r7, #12]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80081c8:	f000 faea 	bl	80087a0 <vTaskStartScheduler>
  
  return osOK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80081d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081d4:	b089      	sub	sp, #36	; 0x24
 80081d6:	af04      	add	r7, sp, #16
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d020      	beq.n	8008226 <osThreadCreate+0x54>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d01c      	beq.n	8008226 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685c      	ldr	r4, [r3, #4]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681d      	ldr	r5, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	691e      	ldr	r6, [r3, #16]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff ffc8 	bl	8008194 <makeFreeRtosPriority>
 8008204:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800820e:	9202      	str	r2, [sp, #8]
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	9100      	str	r1, [sp, #0]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	4632      	mov	r2, r6
 8008218:	4629      	mov	r1, r5
 800821a:	4620      	mov	r0, r4
 800821c:	f000 f8ed 	bl	80083fa <xTaskCreateStatic>
 8008220:	4603      	mov	r3, r0
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	e01c      	b.n	8008260 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	685c      	ldr	r4, [r3, #4]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008232:	b29e      	uxth	r6, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff ffaa 	bl	8008194 <makeFreeRtosPriority>
 8008240:	4602      	mov	r2, r0
 8008242:	f107 030c 	add.w	r3, r7, #12
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	9200      	str	r2, [sp, #0]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	4632      	mov	r2, r6
 800824e:	4629      	mov	r1, r5
 8008250:	4620      	mov	r0, r4
 8008252:	f000 f92f 	bl	80084b4 <xTaskCreate>
 8008256:	4603      	mov	r3, r0
 8008258:	2b01      	cmp	r3, #1
 800825a:	d001      	beq.n	8008260 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800825c:	2300      	movs	r3, #0
 800825e:	e000      	b.n	8008262 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008260:	68fb      	ldr	r3, [r7, #12]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800826a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <osDelay+0x16>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	e000      	b.n	8008282 <osDelay+0x18>
 8008280:	2301      	movs	r3, #1
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fa58 	bl	8008738 <vTaskDelay>
  
  return osOK;
 8008288:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f103 0208 	add.w	r2, r3, #8
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f04f 32ff 	mov.w	r2, #4294967295
 80082aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f103 0208 	add.w	r2, r3, #8
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f103 0208 	add.w	r2, r3, #8
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	689a      	ldr	r2, [r3, #8]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	1c5a      	adds	r2, r3, #1
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	601a      	str	r2, [r3, #0]
}
 8008328:	bf00      	nop
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834a:	d103      	bne.n	8008354 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	e00c      	b.n	800836e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3308      	adds	r3, #8
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	e002      	b.n	8008362 <vListInsert+0x2e>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	60fb      	str	r3, [r7, #12]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	429a      	cmp	r2, r3
 800836c:	d2f6      	bcs.n	800835c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	601a      	str	r2, [r3, #0]
}
 800839a:	bf00      	nop
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80083a6:	b480      	push	{r7}
 80083a8:	b085      	sub	sp, #20
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	6892      	ldr	r2, [r2, #8]
 80083bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	6852      	ldr	r2, [r2, #4]
 80083c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d103      	bne.n	80083da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	689a      	ldr	r2, [r3, #8]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	1e5a      	subs	r2, r3, #1
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b08e      	sub	sp, #56	; 0x38
 80083fe:	af04      	add	r7, sp, #16
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	607a      	str	r2, [r7, #4]
 8008406:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10a      	bne.n	8008424 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10a      	bne.n	8008440 <xTaskCreateStatic+0x46>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	61fb      	str	r3, [r7, #28]
}
 800843c:	bf00      	nop
 800843e:	e7fe      	b.n	800843e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008440:	2358      	movs	r3, #88	; 0x58
 8008442:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	2b58      	cmp	r3, #88	; 0x58
 8008448:	d00a      	beq.n	8008460 <xTaskCreateStatic+0x66>
	__asm volatile
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	f383 8811 	msr	BASEPRI, r3
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	61bb      	str	r3, [r7, #24]
}
 800845c:	bf00      	nop
 800845e:	e7fe      	b.n	800845e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008460:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01e      	beq.n	80084a6 <xTaskCreateStatic+0xac>
 8008468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846a:	2b00      	cmp	r3, #0
 800846c:	d01b      	beq.n	80084a6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008470:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008476:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	2202      	movs	r2, #2
 800847c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008480:	2300      	movs	r3, #0
 8008482:	9303      	str	r3, [sp, #12]
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	9302      	str	r3, [sp, #8]
 8008488:	f107 0314 	add.w	r3, r7, #20
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	68b9      	ldr	r1, [r7, #8]
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 f850 	bl	800853e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800849e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084a0:	f000 f8e0 	bl	8008664 <prvAddNewTaskToReadyList>
 80084a4:	e001      	b.n	80084aa <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80084a6:	2300      	movs	r3, #0
 80084a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084aa:	697b      	ldr	r3, [r7, #20]
	}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3728      	adds	r7, #40	; 0x28
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08c      	sub	sp, #48	; 0x30
 80084b8:	af04      	add	r7, sp, #16
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	4613      	mov	r3, r2
 80084c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084c4:	88fb      	ldrh	r3, [r7, #6]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 fef5 	bl	80092b8 <pvPortMalloc>
 80084ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00e      	beq.n	80084f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80084d6:	2058      	movs	r0, #88	; 0x58
 80084d8:	f000 feee 	bl	80092b8 <pvPortMalloc>
 80084dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	631a      	str	r2, [r3, #48]	; 0x30
 80084ea:	e005      	b.n	80084f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80084ec:	6978      	ldr	r0, [r7, #20]
 80084ee:	f000 ffb3 	bl	8009458 <vPortFree>
 80084f2:	e001      	b.n	80084f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80084f4:	2300      	movs	r3, #0
 80084f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d017      	beq.n	800852e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008506:	88fa      	ldrh	r2, [r7, #6]
 8008508:	2300      	movs	r3, #0
 800850a:	9303      	str	r3, [sp, #12]
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	9302      	str	r3, [sp, #8]
 8008510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008512:	9301      	str	r3, [sp, #4]
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	68b9      	ldr	r1, [r7, #8]
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 f80e 	bl	800853e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008522:	69f8      	ldr	r0, [r7, #28]
 8008524:	f000 f89e 	bl	8008664 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008528:	2301      	movs	r3, #1
 800852a:	61bb      	str	r3, [r7, #24]
 800852c:	e002      	b.n	8008534 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800852e:	f04f 33ff 	mov.w	r3, #4294967295
 8008532:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008534:	69bb      	ldr	r3, [r7, #24]
	}
 8008536:	4618      	mov	r0, r3
 8008538:	3720      	adds	r7, #32
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b088      	sub	sp, #32
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
 800854a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	461a      	mov	r2, r3
 8008556:	21a5      	movs	r1, #165	; 0xa5
 8008558:	f001 f8d4 	bl	8009704 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800855c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008566:	3b01      	subs	r3, #1
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	f023 0307 	bic.w	r3, r3, #7
 8008574:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	f003 0307 	and.w	r3, r3, #7
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00a      	beq.n	8008596 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	617b      	str	r3, [r7, #20]
}
 8008592:	bf00      	nop
 8008594:	e7fe      	b.n	8008594 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01f      	beq.n	80085dc <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800859c:	2300      	movs	r3, #0
 800859e:	61fb      	str	r3, [r7, #28]
 80085a0:	e012      	b.n	80085c8 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	4413      	add	r3, r2
 80085a8:	7819      	ldrb	r1, [r3, #0]
 80085aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	4413      	add	r3, r2
 80085b0:	3334      	adds	r3, #52	; 0x34
 80085b2:	460a      	mov	r2, r1
 80085b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	4413      	add	r3, r2
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d006      	beq.n	80085d0 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	3301      	adds	r3, #1
 80085c6:	61fb      	str	r3, [r7, #28]
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	2b0f      	cmp	r3, #15
 80085cc:	d9e9      	bls.n	80085a2 <prvInitialiseNewTask+0x64>
 80085ce:	e000      	b.n	80085d2 <prvInitialiseNewTask+0x94>
			{
				break;
 80085d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085da:	e003      	b.n	80085e4 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80085dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80085e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e6:	2b06      	cmp	r3, #6
 80085e8:	d901      	bls.n	80085ee <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80085ea:	2306      	movs	r3, #6
 80085ec:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80085ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085f2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80085f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085f8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	2200      	movs	r2, #0
 80085fe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	3304      	adds	r3, #4
 8008604:	4618      	mov	r0, r3
 8008606:	f7ff fe64 	bl	80082d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	3318      	adds	r3, #24
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff fe5f 	bl	80082d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008618:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800861a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861c:	f1c3 0207 	rsb	r2, r3, #7
 8008620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008622:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008628:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	2200      	movs	r2, #0
 800862e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008632:	2200      	movs	r2, #0
 8008634:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	68f9      	ldr	r1, [r7, #12]
 8008642:	69b8      	ldr	r0, [r7, #24]
 8008644:	f000 fc2c 	bl	8008ea0 <pxPortInitialiseStack>
 8008648:	4602      	mov	r2, r0
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800864e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008658:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800865a:	bf00      	nop
 800865c:	3720      	adds	r7, #32
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
	...

08008664 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800866c:	f000 fd42 	bl	80090f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008670:	4b2a      	ldr	r3, [pc, #168]	; (800871c <prvAddNewTaskToReadyList+0xb8>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3301      	adds	r3, #1
 8008676:	4a29      	ldr	r2, [pc, #164]	; (800871c <prvAddNewTaskToReadyList+0xb8>)
 8008678:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800867a:	4b29      	ldr	r3, [pc, #164]	; (8008720 <prvAddNewTaskToReadyList+0xbc>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d109      	bne.n	8008696 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008682:	4a27      	ldr	r2, [pc, #156]	; (8008720 <prvAddNewTaskToReadyList+0xbc>)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008688:	4b24      	ldr	r3, [pc, #144]	; (800871c <prvAddNewTaskToReadyList+0xb8>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d110      	bne.n	80086b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008690:	f000 fae2 	bl	8008c58 <prvInitialiseTaskLists>
 8008694:	e00d      	b.n	80086b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008696:	4b23      	ldr	r3, [pc, #140]	; (8008724 <prvAddNewTaskToReadyList+0xc0>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d109      	bne.n	80086b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800869e:	4b20      	ldr	r3, [pc, #128]	; (8008720 <prvAddNewTaskToReadyList+0xbc>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d802      	bhi.n	80086b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086ac:	4a1c      	ldr	r2, [pc, #112]	; (8008720 <prvAddNewTaskToReadyList+0xbc>)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086b2:	4b1d      	ldr	r3, [pc, #116]	; (8008728 <prvAddNewTaskToReadyList+0xc4>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3301      	adds	r3, #1
 80086b8:	4a1b      	ldr	r2, [pc, #108]	; (8008728 <prvAddNewTaskToReadyList+0xc4>)
 80086ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	2201      	movs	r2, #1
 80086c2:	409a      	lsls	r2, r3
 80086c4:	4b19      	ldr	r3, [pc, #100]	; (800872c <prvAddNewTaskToReadyList+0xc8>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	4a18      	ldr	r2, [pc, #96]	; (800872c <prvAddNewTaskToReadyList+0xc8>)
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d2:	4613      	mov	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4a15      	ldr	r2, [pc, #84]	; (8008730 <prvAddNewTaskToReadyList+0xcc>)
 80086dc:	441a      	add	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	3304      	adds	r3, #4
 80086e2:	4619      	mov	r1, r3
 80086e4:	4610      	mov	r0, r2
 80086e6:	f7ff fe01 	bl	80082ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80086ea:	f000 fd33 	bl	8009154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80086ee:	4b0d      	ldr	r3, [pc, #52]	; (8008724 <prvAddNewTaskToReadyList+0xc0>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00e      	beq.n	8008714 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80086f6:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <prvAddNewTaskToReadyList+0xbc>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008700:	429a      	cmp	r2, r3
 8008702:	d207      	bcs.n	8008714 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008704:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <prvAddNewTaskToReadyList+0xd0>)
 8008706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008714:	bf00      	nop
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	200009cc 	.word	0x200009cc
 8008720:	200008cc 	.word	0x200008cc
 8008724:	200009d8 	.word	0x200009d8
 8008728:	200009e8 	.word	0x200009e8
 800872c:	200009d4 	.word	0x200009d4
 8008730:	200008d0 	.word	0x200008d0
 8008734:	e000ed04 	.word	0xe000ed04

08008738 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008740:	2300      	movs	r3, #0
 8008742:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d017      	beq.n	800877a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800874a:	4b13      	ldr	r3, [pc, #76]	; (8008798 <vTaskDelay+0x60>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00a      	beq.n	8008768 <vTaskDelay+0x30>
	__asm volatile
 8008752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	60bb      	str	r3, [r7, #8]
}
 8008764:	bf00      	nop
 8008766:	e7fe      	b.n	8008766 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008768:	f000 f87a 	bl	8008860 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800876c:	2100      	movs	r1, #0
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fb30 	bl	8008dd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008774:	f000 f882 	bl	800887c <xTaskResumeAll>
 8008778:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d107      	bne.n	8008790 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008780:	4b06      	ldr	r3, [pc, #24]	; (800879c <vTaskDelay+0x64>)
 8008782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008790:	bf00      	nop
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	200009f4 	.word	0x200009f4
 800879c:	e000ed04 	.word	0xe000ed04

080087a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08a      	sub	sp, #40	; 0x28
 80087a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087ae:	463a      	mov	r2, r7
 80087b0:	1d39      	adds	r1, r7, #4
 80087b2:	f107 0308 	add.w	r3, r7, #8
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7f7 ff06 	bl	80005c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	9202      	str	r2, [sp, #8]
 80087c4:	9301      	str	r3, [sp, #4]
 80087c6:	2300      	movs	r3, #0
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	2300      	movs	r3, #0
 80087cc:	460a      	mov	r2, r1
 80087ce:	491e      	ldr	r1, [pc, #120]	; (8008848 <vTaskStartScheduler+0xa8>)
 80087d0:	481e      	ldr	r0, [pc, #120]	; (800884c <vTaskStartScheduler+0xac>)
 80087d2:	f7ff fe12 	bl	80083fa <xTaskCreateStatic>
 80087d6:	4603      	mov	r3, r0
 80087d8:	4a1d      	ldr	r2, [pc, #116]	; (8008850 <vTaskStartScheduler+0xb0>)
 80087da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087dc:	4b1c      	ldr	r3, [pc, #112]	; (8008850 <vTaskStartScheduler+0xb0>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087e4:	2301      	movs	r3, #1
 80087e6:	617b      	str	r3, [r7, #20]
 80087e8:	e001      	b.n	80087ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d116      	bne.n	8008822 <vTaskStartScheduler+0x82>
	__asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	613b      	str	r3, [r7, #16]
}
 8008806:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008808:	4b12      	ldr	r3, [pc, #72]	; (8008854 <vTaskStartScheduler+0xb4>)
 800880a:	f04f 32ff 	mov.w	r2, #4294967295
 800880e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008810:	4b11      	ldr	r3, [pc, #68]	; (8008858 <vTaskStartScheduler+0xb8>)
 8008812:	2201      	movs	r2, #1
 8008814:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008816:	4b11      	ldr	r3, [pc, #68]	; (800885c <vTaskStartScheduler+0xbc>)
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800881c:	f000 fbc8 	bl	8008fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008820:	e00e      	b.n	8008840 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008828:	d10a      	bne.n	8008840 <vTaskStartScheduler+0xa0>
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	60fb      	str	r3, [r7, #12]
}
 800883c:	bf00      	nop
 800883e:	e7fe      	b.n	800883e <vTaskStartScheduler+0x9e>
}
 8008840:	bf00      	nop
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	0800a058 	.word	0x0800a058
 800884c:	08008c25 	.word	0x08008c25
 8008850:	200009f0 	.word	0x200009f0
 8008854:	200009ec 	.word	0x200009ec
 8008858:	200009d8 	.word	0x200009d8
 800885c:	200009d0 	.word	0x200009d0

08008860 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008860:	b480      	push	{r7}
 8008862:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008864:	4b04      	ldr	r3, [pc, #16]	; (8008878 <vTaskSuspendAll+0x18>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3301      	adds	r3, #1
 800886a:	4a03      	ldr	r2, [pc, #12]	; (8008878 <vTaskSuspendAll+0x18>)
 800886c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800886e:	bf00      	nop
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	200009f4 	.word	0x200009f4

0800887c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008882:	2300      	movs	r3, #0
 8008884:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008886:	2300      	movs	r3, #0
 8008888:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800888a:	4b41      	ldr	r3, [pc, #260]	; (8008990 <xTaskResumeAll+0x114>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10a      	bne.n	80088a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	603b      	str	r3, [r7, #0]
}
 80088a4:	bf00      	nop
 80088a6:	e7fe      	b.n	80088a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088a8:	f000 fc24 	bl	80090f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088ac:	4b38      	ldr	r3, [pc, #224]	; (8008990 <xTaskResumeAll+0x114>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	4a37      	ldr	r2, [pc, #220]	; (8008990 <xTaskResumeAll+0x114>)
 80088b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088b6:	4b36      	ldr	r3, [pc, #216]	; (8008990 <xTaskResumeAll+0x114>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d161      	bne.n	8008982 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088be:	4b35      	ldr	r3, [pc, #212]	; (8008994 <xTaskResumeAll+0x118>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d05d      	beq.n	8008982 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088c6:	e02e      	b.n	8008926 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088c8:	4b33      	ldr	r3, [pc, #204]	; (8008998 <xTaskResumeAll+0x11c>)
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3318      	adds	r3, #24
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7ff fd66 	bl	80083a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	3304      	adds	r3, #4
 80088de:	4618      	mov	r0, r3
 80088e0:	f7ff fd61 	bl	80083a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e8:	2201      	movs	r2, #1
 80088ea:	409a      	lsls	r2, r3
 80088ec:	4b2b      	ldr	r3, [pc, #172]	; (800899c <xTaskResumeAll+0x120>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	4a2a      	ldr	r2, [pc, #168]	; (800899c <xTaskResumeAll+0x120>)
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088fa:	4613      	mov	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4a27      	ldr	r2, [pc, #156]	; (80089a0 <xTaskResumeAll+0x124>)
 8008904:	441a      	add	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	3304      	adds	r3, #4
 800890a:	4619      	mov	r1, r3
 800890c:	4610      	mov	r0, r2
 800890e:	f7ff fced 	bl	80082ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008916:	4b23      	ldr	r3, [pc, #140]	; (80089a4 <xTaskResumeAll+0x128>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	429a      	cmp	r2, r3
 800891e:	d302      	bcc.n	8008926 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008920:	4b21      	ldr	r3, [pc, #132]	; (80089a8 <xTaskResumeAll+0x12c>)
 8008922:	2201      	movs	r2, #1
 8008924:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008926:	4b1c      	ldr	r3, [pc, #112]	; (8008998 <xTaskResumeAll+0x11c>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1cc      	bne.n	80088c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008934:	f000 fa2e 	bl	8008d94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008938:	4b1c      	ldr	r3, [pc, #112]	; (80089ac <xTaskResumeAll+0x130>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d010      	beq.n	8008966 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008944:	f000 f836 	bl	80089b4 <xTaskIncrementTick>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d002      	beq.n	8008954 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800894e:	4b16      	ldr	r3, [pc, #88]	; (80089a8 <xTaskResumeAll+0x12c>)
 8008950:	2201      	movs	r2, #1
 8008952:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3b01      	subs	r3, #1
 8008958:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1f1      	bne.n	8008944 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008960:	4b12      	ldr	r3, [pc, #72]	; (80089ac <xTaskResumeAll+0x130>)
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008966:	4b10      	ldr	r3, [pc, #64]	; (80089a8 <xTaskResumeAll+0x12c>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d009      	beq.n	8008982 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800896e:	2301      	movs	r3, #1
 8008970:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008972:	4b0f      	ldr	r3, [pc, #60]	; (80089b0 <xTaskResumeAll+0x134>)
 8008974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008978:	601a      	str	r2, [r3, #0]
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008982:	f000 fbe7 	bl	8009154 <vPortExitCritical>

	return xAlreadyYielded;
 8008986:	68bb      	ldr	r3, [r7, #8]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	200009f4 	.word	0x200009f4
 8008994:	200009cc 	.word	0x200009cc
 8008998:	2000098c 	.word	0x2000098c
 800899c:	200009d4 	.word	0x200009d4
 80089a0:	200008d0 	.word	0x200008d0
 80089a4:	200008cc 	.word	0x200008cc
 80089a8:	200009e0 	.word	0x200009e0
 80089ac:	200009dc 	.word	0x200009dc
 80089b0:	e000ed04 	.word	0xe000ed04

080089b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089ba:	2300      	movs	r3, #0
 80089bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089be:	4b4e      	ldr	r3, [pc, #312]	; (8008af8 <xTaskIncrementTick+0x144>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f040 808e 	bne.w	8008ae4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089c8:	4b4c      	ldr	r3, [pc, #304]	; (8008afc <xTaskIncrementTick+0x148>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3301      	adds	r3, #1
 80089ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80089d0:	4a4a      	ldr	r2, [pc, #296]	; (8008afc <xTaskIncrementTick+0x148>)
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d120      	bne.n	8008a1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80089dc:	4b48      	ldr	r3, [pc, #288]	; (8008b00 <xTaskIncrementTick+0x14c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00a      	beq.n	80089fc <xTaskIncrementTick+0x48>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	603b      	str	r3, [r7, #0]
}
 80089f8:	bf00      	nop
 80089fa:	e7fe      	b.n	80089fa <xTaskIncrementTick+0x46>
 80089fc:	4b40      	ldr	r3, [pc, #256]	; (8008b00 <xTaskIncrementTick+0x14c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	60fb      	str	r3, [r7, #12]
 8008a02:	4b40      	ldr	r3, [pc, #256]	; (8008b04 <xTaskIncrementTick+0x150>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a3e      	ldr	r2, [pc, #248]	; (8008b00 <xTaskIncrementTick+0x14c>)
 8008a08:	6013      	str	r3, [r2, #0]
 8008a0a:	4a3e      	ldr	r2, [pc, #248]	; (8008b04 <xTaskIncrementTick+0x150>)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	4b3d      	ldr	r3, [pc, #244]	; (8008b08 <xTaskIncrementTick+0x154>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3301      	adds	r3, #1
 8008a16:	4a3c      	ldr	r2, [pc, #240]	; (8008b08 <xTaskIncrementTick+0x154>)
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	f000 f9bb 	bl	8008d94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a1e:	4b3b      	ldr	r3, [pc, #236]	; (8008b0c <xTaskIncrementTick+0x158>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d348      	bcc.n	8008aba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a28:	4b35      	ldr	r3, [pc, #212]	; (8008b00 <xTaskIncrementTick+0x14c>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d104      	bne.n	8008a3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a32:	4b36      	ldr	r3, [pc, #216]	; (8008b0c <xTaskIncrementTick+0x158>)
 8008a34:	f04f 32ff 	mov.w	r2, #4294967295
 8008a38:	601a      	str	r2, [r3, #0]
					break;
 8008a3a:	e03e      	b.n	8008aba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a3c:	4b30      	ldr	r3, [pc, #192]	; (8008b00 <xTaskIncrementTick+0x14c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d203      	bcs.n	8008a5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a54:	4a2d      	ldr	r2, [pc, #180]	; (8008b0c <xTaskIncrementTick+0x158>)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a5a:	e02e      	b.n	8008aba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7ff fca0 	bl	80083a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d004      	beq.n	8008a78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	3318      	adds	r3, #24
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7ff fc97 	bl	80083a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	409a      	lsls	r2, r3
 8008a80:	4b23      	ldr	r3, [pc, #140]	; (8008b10 <xTaskIncrementTick+0x15c>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	4a22      	ldr	r2, [pc, #136]	; (8008b10 <xTaskIncrementTick+0x15c>)
 8008a88:	6013      	str	r3, [r2, #0]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8e:	4613      	mov	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4a1f      	ldr	r2, [pc, #124]	; (8008b14 <xTaskIncrementTick+0x160>)
 8008a98:	441a      	add	r2, r3
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f7ff fc23 	bl	80082ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aaa:	4b1b      	ldr	r3, [pc, #108]	; (8008b18 <xTaskIncrementTick+0x164>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d3b9      	bcc.n	8008a28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ab8:	e7b6      	b.n	8008a28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008aba:	4b17      	ldr	r3, [pc, #92]	; (8008b18 <xTaskIncrementTick+0x164>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac0:	4914      	ldr	r1, [pc, #80]	; (8008b14 <xTaskIncrementTick+0x160>)
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	440b      	add	r3, r1
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d901      	bls.n	8008ad6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ad6:	4b11      	ldr	r3, [pc, #68]	; (8008b1c <xTaskIncrementTick+0x168>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d007      	beq.n	8008aee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	617b      	str	r3, [r7, #20]
 8008ae2:	e004      	b.n	8008aee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ae4:	4b0e      	ldr	r3, [pc, #56]	; (8008b20 <xTaskIncrementTick+0x16c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	4a0d      	ldr	r2, [pc, #52]	; (8008b20 <xTaskIncrementTick+0x16c>)
 8008aec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008aee:	697b      	ldr	r3, [r7, #20]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	200009f4 	.word	0x200009f4
 8008afc:	200009d0 	.word	0x200009d0
 8008b00:	20000984 	.word	0x20000984
 8008b04:	20000988 	.word	0x20000988
 8008b08:	200009e4 	.word	0x200009e4
 8008b0c:	200009ec 	.word	0x200009ec
 8008b10:	200009d4 	.word	0x200009d4
 8008b14:	200008d0 	.word	0x200008d0
 8008b18:	200008cc 	.word	0x200008cc
 8008b1c:	200009e0 	.word	0x200009e0
 8008b20:	200009dc 	.word	0x200009dc

08008b24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b088      	sub	sp, #32
 8008b28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b2a:	4b39      	ldr	r3, [pc, #228]	; (8008c10 <vTaskSwitchContext+0xec>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d003      	beq.n	8008b3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b32:	4b38      	ldr	r3, [pc, #224]	; (8008c14 <vTaskSwitchContext+0xf0>)
 8008b34:	2201      	movs	r2, #1
 8008b36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b38:	e066      	b.n	8008c08 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 8008b3a:	4b36      	ldr	r3, [pc, #216]	; (8008c14 <vTaskSwitchContext+0xf0>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008b40:	4b35      	ldr	r3, [pc, #212]	; (8008c18 <vTaskSwitchContext+0xf4>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b46:	61fb      	str	r3, [r7, #28]
 8008b48:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008b4c:	61bb      	str	r3, [r7, #24]
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d111      	bne.n	8008b7c <vTaskSwitchContext+0x58>
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	69ba      	ldr	r2, [r7, #24]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d10b      	bne.n	8008b7c <vTaskSwitchContext+0x58>
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	3308      	adds	r3, #8
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	69ba      	ldr	r2, [r7, #24]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d105      	bne.n	8008b7c <vTaskSwitchContext+0x58>
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	330c      	adds	r3, #12
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d008      	beq.n	8008b8e <vTaskSwitchContext+0x6a>
 8008b7c:	4b26      	ldr	r3, [pc, #152]	; (8008c18 <vTaskSwitchContext+0xf4>)
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	4b25      	ldr	r3, [pc, #148]	; (8008c18 <vTaskSwitchContext+0xf4>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3334      	adds	r3, #52	; 0x34
 8008b86:	4619      	mov	r1, r3
 8008b88:	4610      	mov	r0, r2
 8008b8a:	f7f7 fd0a 	bl	80005a2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b8e:	4b23      	ldr	r3, [pc, #140]	; (8008c1c <vTaskSwitchContext+0xf8>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	fab3 f383 	clz	r3, r3
 8008b9a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008b9c:	7afb      	ldrb	r3, [r7, #11]
 8008b9e:	f1c3 031f 	rsb	r3, r3, #31
 8008ba2:	617b      	str	r3, [r7, #20]
 8008ba4:	491e      	ldr	r1, [pc, #120]	; (8008c20 <vTaskSwitchContext+0xfc>)
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	440b      	add	r3, r1
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10a      	bne.n	8008bce <vTaskSwitchContext+0xaa>
	__asm volatile
 8008bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbc:	f383 8811 	msr	BASEPRI, r3
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	607b      	str	r3, [r7, #4]
}
 8008bca:	bf00      	nop
 8008bcc:	e7fe      	b.n	8008bcc <vTaskSwitchContext+0xa8>
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4a11      	ldr	r2, [pc, #68]	; (8008c20 <vTaskSwitchContext+0xfc>)
 8008bda:	4413      	add	r3, r2
 8008bdc:	613b      	str	r3, [r7, #16]
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	605a      	str	r2, [r3, #4]
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	3308      	adds	r3, #8
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d104      	bne.n	8008bfe <vTaskSwitchContext+0xda>
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	605a      	str	r2, [r3, #4]
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	4a04      	ldr	r2, [pc, #16]	; (8008c18 <vTaskSwitchContext+0xf4>)
 8008c06:	6013      	str	r3, [r2, #0]
}
 8008c08:	bf00      	nop
 8008c0a:	3720      	adds	r7, #32
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	200009f4 	.word	0x200009f4
 8008c14:	200009e0 	.word	0x200009e0
 8008c18:	200008cc 	.word	0x200008cc
 8008c1c:	200009d4 	.word	0x200009d4
 8008c20:	200008d0 	.word	0x200008d0

08008c24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c2c:	f000 f854 	bl	8008cd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c30:	4b07      	ldr	r3, [pc, #28]	; (8008c50 <prvIdleTask+0x2c>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d907      	bls.n	8008c48 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008c38:	4b06      	ldr	r3, [pc, #24]	; (8008c54 <prvIdleTask+0x30>)
 8008c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c3e:	601a      	str	r2, [r3, #0]
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008c48:	f7f7 fca4 	bl	8000594 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008c4c:	e7ee      	b.n	8008c2c <prvIdleTask+0x8>
 8008c4e:	bf00      	nop
 8008c50:	200008d0 	.word	0x200008d0
 8008c54:	e000ed04 	.word	0xe000ed04

08008c58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c5e:	2300      	movs	r3, #0
 8008c60:	607b      	str	r3, [r7, #4]
 8008c62:	e00c      	b.n	8008c7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	4613      	mov	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4a12      	ldr	r2, [pc, #72]	; (8008cb8 <prvInitialiseTaskLists+0x60>)
 8008c70:	4413      	add	r3, r2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7ff fb0d 	bl	8008292 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	607b      	str	r3, [r7, #4]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2b06      	cmp	r3, #6
 8008c82:	d9ef      	bls.n	8008c64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c84:	480d      	ldr	r0, [pc, #52]	; (8008cbc <prvInitialiseTaskLists+0x64>)
 8008c86:	f7ff fb04 	bl	8008292 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c8a:	480d      	ldr	r0, [pc, #52]	; (8008cc0 <prvInitialiseTaskLists+0x68>)
 8008c8c:	f7ff fb01 	bl	8008292 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c90:	480c      	ldr	r0, [pc, #48]	; (8008cc4 <prvInitialiseTaskLists+0x6c>)
 8008c92:	f7ff fafe 	bl	8008292 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c96:	480c      	ldr	r0, [pc, #48]	; (8008cc8 <prvInitialiseTaskLists+0x70>)
 8008c98:	f7ff fafb 	bl	8008292 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c9c:	480b      	ldr	r0, [pc, #44]	; (8008ccc <prvInitialiseTaskLists+0x74>)
 8008c9e:	f7ff faf8 	bl	8008292 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ca2:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <prvInitialiseTaskLists+0x78>)
 8008ca4:	4a05      	ldr	r2, [pc, #20]	; (8008cbc <prvInitialiseTaskLists+0x64>)
 8008ca6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ca8:	4b0a      	ldr	r3, [pc, #40]	; (8008cd4 <prvInitialiseTaskLists+0x7c>)
 8008caa:	4a05      	ldr	r2, [pc, #20]	; (8008cc0 <prvInitialiseTaskLists+0x68>)
 8008cac:	601a      	str	r2, [r3, #0]
}
 8008cae:	bf00      	nop
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	200008d0 	.word	0x200008d0
 8008cbc:	2000095c 	.word	0x2000095c
 8008cc0:	20000970 	.word	0x20000970
 8008cc4:	2000098c 	.word	0x2000098c
 8008cc8:	200009a0 	.word	0x200009a0
 8008ccc:	200009b8 	.word	0x200009b8
 8008cd0:	20000984 	.word	0x20000984
 8008cd4:	20000988 	.word	0x20000988

08008cd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cde:	e019      	b.n	8008d14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ce0:	f000 fa08 	bl	80090f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ce4:	4b10      	ldr	r3, [pc, #64]	; (8008d28 <prvCheckTasksWaitingTermination+0x50>)
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	3304      	adds	r3, #4
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7ff fb58 	bl	80083a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008cf6:	4b0d      	ldr	r3, [pc, #52]	; (8008d2c <prvCheckTasksWaitingTermination+0x54>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	4a0b      	ldr	r2, [pc, #44]	; (8008d2c <prvCheckTasksWaitingTermination+0x54>)
 8008cfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d00:	4b0b      	ldr	r3, [pc, #44]	; (8008d30 <prvCheckTasksWaitingTermination+0x58>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3b01      	subs	r3, #1
 8008d06:	4a0a      	ldr	r2, [pc, #40]	; (8008d30 <prvCheckTasksWaitingTermination+0x58>)
 8008d08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d0a:	f000 fa23 	bl	8009154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f810 	bl	8008d34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d14:	4b06      	ldr	r3, [pc, #24]	; (8008d30 <prvCheckTasksWaitingTermination+0x58>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1e1      	bne.n	8008ce0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d1c:	bf00      	nop
 8008d1e:	bf00      	nop
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	200009a0 	.word	0x200009a0
 8008d2c:	200009cc 	.word	0x200009cc
 8008d30:	200009b4 	.word	0x200009b4

08008d34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d108      	bne.n	8008d58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 fb84 	bl	8009458 <vPortFree>
				vPortFree( pxTCB );
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fb81 	bl	8009458 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d56:	e018      	b.n	8008d8a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d103      	bne.n	8008d6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fb78 	bl	8009458 <vPortFree>
	}
 8008d68:	e00f      	b.n	8008d8a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d00a      	beq.n	8008d8a <prvDeleteTCB+0x56>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	60fb      	str	r3, [r7, #12]
}
 8008d86:	bf00      	nop
 8008d88:	e7fe      	b.n	8008d88 <prvDeleteTCB+0x54>
	}
 8008d8a:	bf00      	nop
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d9a:	4b0c      	ldr	r3, [pc, #48]	; (8008dcc <prvResetNextTaskUnblockTime+0x38>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d104      	bne.n	8008dae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008da4:	4b0a      	ldr	r3, [pc, #40]	; (8008dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8008da6:	f04f 32ff 	mov.w	r2, #4294967295
 8008daa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008dac:	e008      	b.n	8008dc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dae:	4b07      	ldr	r3, [pc, #28]	; (8008dcc <prvResetNextTaskUnblockTime+0x38>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	4a04      	ldr	r2, [pc, #16]	; (8008dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8008dbe:	6013      	str	r3, [r2, #0]
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	20000984 	.word	0x20000984
 8008dd0:	200009ec 	.word	0x200009ec

08008dd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008dde:	4b29      	ldr	r3, [pc, #164]	; (8008e84 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008de4:	4b28      	ldr	r3, [pc, #160]	; (8008e88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3304      	adds	r3, #4
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7ff fadb 	bl	80083a6 <uxListRemove>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10b      	bne.n	8008e0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008df6:	4b24      	ldr	r3, [pc, #144]	; (8008e88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008e02:	43da      	mvns	r2, r3
 8008e04:	4b21      	ldr	r3, [pc, #132]	; (8008e8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4013      	ands	r3, r2
 8008e0a:	4a20      	ldr	r2, [pc, #128]	; (8008e8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008e0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e14:	d10a      	bne.n	8008e2c <prvAddCurrentTaskToDelayedList+0x58>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d007      	beq.n	8008e2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e1c:	4b1a      	ldr	r3, [pc, #104]	; (8008e88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3304      	adds	r3, #4
 8008e22:	4619      	mov	r1, r3
 8008e24:	481a      	ldr	r0, [pc, #104]	; (8008e90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008e26:	f7ff fa61 	bl	80082ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e2a:	e026      	b.n	8008e7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4413      	add	r3, r2
 8008e32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e34:	4b14      	ldr	r3, [pc, #80]	; (8008e88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d209      	bcs.n	8008e58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e44:	4b13      	ldr	r3, [pc, #76]	; (8008e94 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	4619      	mov	r1, r3
 8008e50:	4610      	mov	r0, r2
 8008e52:	f7ff fa6f 	bl	8008334 <vListInsert>
}
 8008e56:	e010      	b.n	8008e7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e58:	4b0f      	ldr	r3, [pc, #60]	; (8008e98 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	4b0a      	ldr	r3, [pc, #40]	; (8008e88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3304      	adds	r3, #4
 8008e62:	4619      	mov	r1, r3
 8008e64:	4610      	mov	r0, r2
 8008e66:	f7ff fa65 	bl	8008334 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e6a:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d202      	bcs.n	8008e7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008e74:	4a09      	ldr	r2, [pc, #36]	; (8008e9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	6013      	str	r3, [r2, #0]
}
 8008e7a:	bf00      	nop
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	200009d0 	.word	0x200009d0
 8008e88:	200008cc 	.word	0x200008cc
 8008e8c:	200009d4 	.word	0x200009d4
 8008e90:	200009b8 	.word	0x200009b8
 8008e94:	20000988 	.word	0x20000988
 8008e98:	20000984 	.word	0x20000984
 8008e9c:	200009ec 	.word	0x200009ec

08008ea0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3b04      	subs	r3, #4
 8008eb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3b04      	subs	r3, #4
 8008ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f023 0201 	bic.w	r2, r3, #1
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3b04      	subs	r3, #4
 8008ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ed0:	4a0c      	ldr	r2, [pc, #48]	; (8008f04 <pxPortInitialiseStack+0x64>)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3b14      	subs	r3, #20
 8008eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3b04      	subs	r3, #4
 8008ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f06f 0202 	mvn.w	r2, #2
 8008eee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3b20      	subs	r3, #32
 8008ef4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	08008f09 	.word	0x08008f09

08008f08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f12:	4b12      	ldr	r3, [pc, #72]	; (8008f5c <prvTaskExitError+0x54>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1a:	d00a      	beq.n	8008f32 <prvTaskExitError+0x2a>
	__asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	60fb      	str	r3, [r7, #12]
}
 8008f2e:	bf00      	nop
 8008f30:	e7fe      	b.n	8008f30 <prvTaskExitError+0x28>
	__asm volatile
 8008f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	60bb      	str	r3, [r7, #8]
}
 8008f44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f46:	bf00      	nop
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d0fc      	beq.n	8008f48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f4e:	bf00      	nop
 8008f50:	bf00      	nop
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	20000054 	.word	0x20000054

08008f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f60:	4b07      	ldr	r3, [pc, #28]	; (8008f80 <pxCurrentTCBConst2>)
 8008f62:	6819      	ldr	r1, [r3, #0]
 8008f64:	6808      	ldr	r0, [r1, #0]
 8008f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6a:	f380 8809 	msr	PSP, r0
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f04f 0000 	mov.w	r0, #0
 8008f76:	f380 8811 	msr	BASEPRI, r0
 8008f7a:	4770      	bx	lr
 8008f7c:	f3af 8000 	nop.w

08008f80 <pxCurrentTCBConst2>:
 8008f80:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop

08008f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f88:	4808      	ldr	r0, [pc, #32]	; (8008fac <prvPortStartFirstTask+0x24>)
 8008f8a:	6800      	ldr	r0, [r0, #0]
 8008f8c:	6800      	ldr	r0, [r0, #0]
 8008f8e:	f380 8808 	msr	MSP, r0
 8008f92:	f04f 0000 	mov.w	r0, #0
 8008f96:	f380 8814 	msr	CONTROL, r0
 8008f9a:	b662      	cpsie	i
 8008f9c:	b661      	cpsie	f
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	df00      	svc	0
 8008fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008faa:	bf00      	nop
 8008fac:	e000ed08 	.word	0xe000ed08

08008fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008fb6:	4b46      	ldr	r3, [pc, #280]	; (80090d0 <xPortStartScheduler+0x120>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a46      	ldr	r2, [pc, #280]	; (80090d4 <xPortStartScheduler+0x124>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d10a      	bne.n	8008fd6 <xPortStartScheduler+0x26>
	__asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	613b      	str	r3, [r7, #16]
}
 8008fd2:	bf00      	nop
 8008fd4:	e7fe      	b.n	8008fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008fd6:	4b3e      	ldr	r3, [pc, #248]	; (80090d0 <xPortStartScheduler+0x120>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a3f      	ldr	r2, [pc, #252]	; (80090d8 <xPortStartScheduler+0x128>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d10a      	bne.n	8008ff6 <xPortStartScheduler+0x46>
	__asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	60fb      	str	r3, [r7, #12]
}
 8008ff2:	bf00      	nop
 8008ff4:	e7fe      	b.n	8008ff4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ff6:	4b39      	ldr	r3, [pc, #228]	; (80090dc <xPortStartScheduler+0x12c>)
 8008ff8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	22ff      	movs	r2, #255	; 0xff
 8009006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	b2db      	uxtb	r3, r3
 800900e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009010:	78fb      	ldrb	r3, [r7, #3]
 8009012:	b2db      	uxtb	r3, r3
 8009014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009018:	b2da      	uxtb	r2, r3
 800901a:	4b31      	ldr	r3, [pc, #196]	; (80090e0 <xPortStartScheduler+0x130>)
 800901c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800901e:	4b31      	ldr	r3, [pc, #196]	; (80090e4 <xPortStartScheduler+0x134>)
 8009020:	2207      	movs	r2, #7
 8009022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009024:	e009      	b.n	800903a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009026:	4b2f      	ldr	r3, [pc, #188]	; (80090e4 <xPortStartScheduler+0x134>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3b01      	subs	r3, #1
 800902c:	4a2d      	ldr	r2, [pc, #180]	; (80090e4 <xPortStartScheduler+0x134>)
 800902e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009030:	78fb      	ldrb	r3, [r7, #3]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	005b      	lsls	r3, r3, #1
 8009036:	b2db      	uxtb	r3, r3
 8009038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	b2db      	uxtb	r3, r3
 800903e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009042:	2b80      	cmp	r3, #128	; 0x80
 8009044:	d0ef      	beq.n	8009026 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009046:	4b27      	ldr	r3, [pc, #156]	; (80090e4 <xPortStartScheduler+0x134>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f1c3 0307 	rsb	r3, r3, #7
 800904e:	2b04      	cmp	r3, #4
 8009050:	d00a      	beq.n	8009068 <xPortStartScheduler+0xb8>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	60bb      	str	r3, [r7, #8]
}
 8009064:	bf00      	nop
 8009066:	e7fe      	b.n	8009066 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009068:	4b1e      	ldr	r3, [pc, #120]	; (80090e4 <xPortStartScheduler+0x134>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	021b      	lsls	r3, r3, #8
 800906e:	4a1d      	ldr	r2, [pc, #116]	; (80090e4 <xPortStartScheduler+0x134>)
 8009070:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009072:	4b1c      	ldr	r3, [pc, #112]	; (80090e4 <xPortStartScheduler+0x134>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800907a:	4a1a      	ldr	r2, [pc, #104]	; (80090e4 <xPortStartScheduler+0x134>)
 800907c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	b2da      	uxtb	r2, r3
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009086:	4b18      	ldr	r3, [pc, #96]	; (80090e8 <xPortStartScheduler+0x138>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a17      	ldr	r2, [pc, #92]	; (80090e8 <xPortStartScheduler+0x138>)
 800908c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009092:	4b15      	ldr	r3, [pc, #84]	; (80090e8 <xPortStartScheduler+0x138>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a14      	ldr	r2, [pc, #80]	; (80090e8 <xPortStartScheduler+0x138>)
 8009098:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800909c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800909e:	f000 f8dd 	bl	800925c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80090a2:	4b12      	ldr	r3, [pc, #72]	; (80090ec <xPortStartScheduler+0x13c>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80090a8:	f000 f8fc 	bl	80092a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80090ac:	4b10      	ldr	r3, [pc, #64]	; (80090f0 <xPortStartScheduler+0x140>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a0f      	ldr	r2, [pc, #60]	; (80090f0 <xPortStartScheduler+0x140>)
 80090b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80090b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80090b8:	f7ff ff66 	bl	8008f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80090bc:	f7ff fd32 	bl	8008b24 <vTaskSwitchContext>
	prvTaskExitError();
 80090c0:	f7ff ff22 	bl	8008f08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	e000ed00 	.word	0xe000ed00
 80090d4:	410fc271 	.word	0x410fc271
 80090d8:	410fc270 	.word	0x410fc270
 80090dc:	e000e400 	.word	0xe000e400
 80090e0:	200009f8 	.word	0x200009f8
 80090e4:	200009fc 	.word	0x200009fc
 80090e8:	e000ed20 	.word	0xe000ed20
 80090ec:	20000054 	.word	0x20000054
 80090f0:	e000ef34 	.word	0xe000ef34

080090f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	607b      	str	r3, [r7, #4]
}
 800910c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800910e:	4b0f      	ldr	r3, [pc, #60]	; (800914c <vPortEnterCritical+0x58>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	3301      	adds	r3, #1
 8009114:	4a0d      	ldr	r2, [pc, #52]	; (800914c <vPortEnterCritical+0x58>)
 8009116:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009118:	4b0c      	ldr	r3, [pc, #48]	; (800914c <vPortEnterCritical+0x58>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d10f      	bne.n	8009140 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009120:	4b0b      	ldr	r3, [pc, #44]	; (8009150 <vPortEnterCritical+0x5c>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00a      	beq.n	8009140 <vPortEnterCritical+0x4c>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	603b      	str	r3, [r7, #0]
}
 800913c:	bf00      	nop
 800913e:	e7fe      	b.n	800913e <vPortEnterCritical+0x4a>
	}
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	20000054 	.word	0x20000054
 8009150:	e000ed04 	.word	0xe000ed04

08009154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800915a:	4b12      	ldr	r3, [pc, #72]	; (80091a4 <vPortExitCritical+0x50>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10a      	bne.n	8009178 <vPortExitCritical+0x24>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	607b      	str	r3, [r7, #4]
}
 8009174:	bf00      	nop
 8009176:	e7fe      	b.n	8009176 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009178:	4b0a      	ldr	r3, [pc, #40]	; (80091a4 <vPortExitCritical+0x50>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3b01      	subs	r3, #1
 800917e:	4a09      	ldr	r2, [pc, #36]	; (80091a4 <vPortExitCritical+0x50>)
 8009180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009182:	4b08      	ldr	r3, [pc, #32]	; (80091a4 <vPortExitCritical+0x50>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d105      	bne.n	8009196 <vPortExitCritical+0x42>
 800918a:	2300      	movs	r3, #0
 800918c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009194:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009196:	bf00      	nop
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	20000054 	.word	0x20000054
	...

080091b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80091b0:	f3ef 8009 	mrs	r0, PSP
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	4b15      	ldr	r3, [pc, #84]	; (8009210 <pxCurrentTCBConst>)
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	f01e 0f10 	tst.w	lr, #16
 80091c0:	bf08      	it	eq
 80091c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80091c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ca:	6010      	str	r0, [r2, #0]
 80091cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80091d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80091d4:	f380 8811 	msr	BASEPRI, r0
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f7ff fca0 	bl	8008b24 <vTaskSwitchContext>
 80091e4:	f04f 0000 	mov.w	r0, #0
 80091e8:	f380 8811 	msr	BASEPRI, r0
 80091ec:	bc09      	pop	{r0, r3}
 80091ee:	6819      	ldr	r1, [r3, #0]
 80091f0:	6808      	ldr	r0, [r1, #0]
 80091f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f6:	f01e 0f10 	tst.w	lr, #16
 80091fa:	bf08      	it	eq
 80091fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009200:	f380 8809 	msr	PSP, r0
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	f3af 8000 	nop.w

08009210 <pxCurrentTCBConst>:
 8009210:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop

08009218 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
	__asm volatile
 800921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	607b      	str	r3, [r7, #4]
}
 8009230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009232:	f7ff fbbf 	bl	80089b4 <xTaskIncrementTick>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d003      	beq.n	8009244 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800923c:	4b06      	ldr	r3, [pc, #24]	; (8009258 <SysTick_Handler+0x40>)
 800923e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	2300      	movs	r3, #0
 8009246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	f383 8811 	msr	BASEPRI, r3
}
 800924e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	e000ed04 	.word	0xe000ed04

0800925c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800925c:	b480      	push	{r7}
 800925e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009260:	4b0b      	ldr	r3, [pc, #44]	; (8009290 <vPortSetupTimerInterrupt+0x34>)
 8009262:	2200      	movs	r2, #0
 8009264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009266:	4b0b      	ldr	r3, [pc, #44]	; (8009294 <vPortSetupTimerInterrupt+0x38>)
 8009268:	2200      	movs	r2, #0
 800926a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800926c:	4b0a      	ldr	r3, [pc, #40]	; (8009298 <vPortSetupTimerInterrupt+0x3c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a0a      	ldr	r2, [pc, #40]	; (800929c <vPortSetupTimerInterrupt+0x40>)
 8009272:	fba2 2303 	umull	r2, r3, r2, r3
 8009276:	099b      	lsrs	r3, r3, #6
 8009278:	4a09      	ldr	r2, [pc, #36]	; (80092a0 <vPortSetupTimerInterrupt+0x44>)
 800927a:	3b01      	subs	r3, #1
 800927c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800927e:	4b04      	ldr	r3, [pc, #16]	; (8009290 <vPortSetupTimerInterrupt+0x34>)
 8009280:	2207      	movs	r2, #7
 8009282:	601a      	str	r2, [r3, #0]
}
 8009284:	bf00      	nop
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	e000e010 	.word	0xe000e010
 8009294:	e000e018 	.word	0xe000e018
 8009298:	20000000 	.word	0x20000000
 800929c:	10624dd3 	.word	0x10624dd3
 80092a0:	e000e014 	.word	0xe000e014

080092a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80092a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80092b4 <vPortEnableVFP+0x10>
 80092a8:	6801      	ldr	r1, [r0, #0]
 80092aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80092ae:	6001      	str	r1, [r0, #0]
 80092b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80092b2:	bf00      	nop
 80092b4:	e000ed88 	.word	0xe000ed88

080092b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08a      	sub	sp, #40	; 0x28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80092c0:	2300      	movs	r3, #0
 80092c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80092c4:	f7ff facc 	bl	8008860 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80092c8:	4b5d      	ldr	r3, [pc, #372]	; (8009440 <pvPortMalloc+0x188>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092d0:	f000 f924 	bl	800951c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092d4:	4b5b      	ldr	r3, [pc, #364]	; (8009444 <pvPortMalloc+0x18c>)
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4013      	ands	r3, r2
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f040 8093 	bne.w	8009408 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d01d      	beq.n	8009324 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80092e8:	2208      	movs	r2, #8
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4413      	add	r3, r2
 80092ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f003 0307 	and.w	r3, r3, #7
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d014      	beq.n	8009324 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f023 0307 	bic.w	r3, r3, #7
 8009300:	3308      	adds	r3, #8
 8009302:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f003 0307 	and.w	r3, r3, #7
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00a      	beq.n	8009324 <pvPortMalloc+0x6c>
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	617b      	str	r3, [r7, #20]
}
 8009320:	bf00      	nop
 8009322:	e7fe      	b.n	8009322 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d06e      	beq.n	8009408 <pvPortMalloc+0x150>
 800932a:	4b47      	ldr	r3, [pc, #284]	; (8009448 <pvPortMalloc+0x190>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	429a      	cmp	r2, r3
 8009332:	d869      	bhi.n	8009408 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009334:	4b45      	ldr	r3, [pc, #276]	; (800944c <pvPortMalloc+0x194>)
 8009336:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009338:	4b44      	ldr	r3, [pc, #272]	; (800944c <pvPortMalloc+0x194>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800933e:	e004      	b.n	800934a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	429a      	cmp	r2, r3
 8009352:	d903      	bls.n	800935c <pvPortMalloc+0xa4>
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1f1      	bne.n	8009340 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800935c:	4b38      	ldr	r3, [pc, #224]	; (8009440 <pvPortMalloc+0x188>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009362:	429a      	cmp	r2, r3
 8009364:	d050      	beq.n	8009408 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2208      	movs	r2, #8
 800936c:	4413      	add	r3, r2
 800936e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	6a3b      	ldr	r3, [r7, #32]
 8009376:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	1ad2      	subs	r2, r2, r3
 8009380:	2308      	movs	r3, #8
 8009382:	005b      	lsls	r3, r3, #1
 8009384:	429a      	cmp	r2, r3
 8009386:	d91f      	bls.n	80093c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4413      	add	r3, r2
 800938e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	f003 0307 	and.w	r3, r3, #7
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00a      	beq.n	80093b0 <pvPortMalloc+0xf8>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	613b      	str	r3, [r7, #16]
}
 80093ac:	bf00      	nop
 80093ae:	e7fe      	b.n	80093ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	1ad2      	subs	r2, r2, r3
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093c2:	69b8      	ldr	r0, [r7, #24]
 80093c4:	f000 f90c 	bl	80095e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093c8:	4b1f      	ldr	r3, [pc, #124]	; (8009448 <pvPortMalloc+0x190>)
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	4a1d      	ldr	r2, [pc, #116]	; (8009448 <pvPortMalloc+0x190>)
 80093d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093d6:	4b1c      	ldr	r3, [pc, #112]	; (8009448 <pvPortMalloc+0x190>)
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	4b1d      	ldr	r3, [pc, #116]	; (8009450 <pvPortMalloc+0x198>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d203      	bcs.n	80093ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093e2:	4b19      	ldr	r3, [pc, #100]	; (8009448 <pvPortMalloc+0x190>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a1a      	ldr	r2, [pc, #104]	; (8009450 <pvPortMalloc+0x198>)
 80093e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	4b15      	ldr	r3, [pc, #84]	; (8009444 <pvPortMalloc+0x18c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	431a      	orrs	r2, r3
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	2200      	movs	r2, #0
 80093fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80093fe:	4b15      	ldr	r3, [pc, #84]	; (8009454 <pvPortMalloc+0x19c>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3301      	adds	r3, #1
 8009404:	4a13      	ldr	r2, [pc, #76]	; (8009454 <pvPortMalloc+0x19c>)
 8009406:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009408:	f7ff fa38 	bl	800887c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009412:	f7f7 f8d1 	bl	80005b8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	f003 0307 	and.w	r3, r3, #7
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00a      	beq.n	8009436 <pvPortMalloc+0x17e>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	60fb      	str	r3, [r7, #12]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <pvPortMalloc+0x17c>
	return pvReturn;
 8009436:	69fb      	ldr	r3, [r7, #28]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3728      	adds	r7, #40	; 0x28
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	20008a08 	.word	0x20008a08
 8009444:	20008a1c 	.word	0x20008a1c
 8009448:	20008a0c 	.word	0x20008a0c
 800944c:	20008a00 	.word	0x20008a00
 8009450:	20008a10 	.word	0x20008a10
 8009454:	20008a14 	.word	0x20008a14

08009458 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d04d      	beq.n	8009506 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800946a:	2308      	movs	r3, #8
 800946c:	425b      	negs	r3, r3
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	4413      	add	r3, r2
 8009472:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	4b24      	ldr	r3, [pc, #144]	; (8009510 <vPortFree+0xb8>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4013      	ands	r3, r2
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10a      	bne.n	800949c <vPortFree+0x44>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	60fb      	str	r3, [r7, #12]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00a      	beq.n	80094ba <vPortFree+0x62>
	__asm volatile
 80094a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a8:	f383 8811 	msr	BASEPRI, r3
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	60bb      	str	r3, [r7, #8]
}
 80094b6:	bf00      	nop
 80094b8:	e7fe      	b.n	80094b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	685a      	ldr	r2, [r3, #4]
 80094be:	4b14      	ldr	r3, [pc, #80]	; (8009510 <vPortFree+0xb8>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4013      	ands	r3, r2
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d01e      	beq.n	8009506 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d11a      	bne.n	8009506 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	685a      	ldr	r2, [r3, #4]
 80094d4:	4b0e      	ldr	r3, [pc, #56]	; (8009510 <vPortFree+0xb8>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	43db      	mvns	r3, r3
 80094da:	401a      	ands	r2, r3
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094e0:	f7ff f9be 	bl	8008860 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	685a      	ldr	r2, [r3, #4]
 80094e8:	4b0a      	ldr	r3, [pc, #40]	; (8009514 <vPortFree+0xbc>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4413      	add	r3, r2
 80094ee:	4a09      	ldr	r2, [pc, #36]	; (8009514 <vPortFree+0xbc>)
 80094f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094f2:	6938      	ldr	r0, [r7, #16]
 80094f4:	f000 f874 	bl	80095e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80094f8:	4b07      	ldr	r3, [pc, #28]	; (8009518 <vPortFree+0xc0>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3301      	adds	r3, #1
 80094fe:	4a06      	ldr	r2, [pc, #24]	; (8009518 <vPortFree+0xc0>)
 8009500:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009502:	f7ff f9bb 	bl	800887c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009506:	bf00      	nop
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	20008a1c 	.word	0x20008a1c
 8009514:	20008a0c 	.word	0x20008a0c
 8009518:	20008a18 	.word	0x20008a18

0800951c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009526:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009528:	4b27      	ldr	r3, [pc, #156]	; (80095c8 <prvHeapInit+0xac>)
 800952a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f003 0307 	and.w	r3, r3, #7
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00c      	beq.n	8009550 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3307      	adds	r3, #7
 800953a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f023 0307 	bic.w	r3, r3, #7
 8009542:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	1ad3      	subs	r3, r2, r3
 800954a:	4a1f      	ldr	r2, [pc, #124]	; (80095c8 <prvHeapInit+0xac>)
 800954c:	4413      	add	r3, r2
 800954e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009554:	4a1d      	ldr	r2, [pc, #116]	; (80095cc <prvHeapInit+0xb0>)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800955a:	4b1c      	ldr	r3, [pc, #112]	; (80095cc <prvHeapInit+0xb0>)
 800955c:	2200      	movs	r2, #0
 800955e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	4413      	add	r3, r2
 8009566:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009568:	2208      	movs	r2, #8
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	1a9b      	subs	r3, r3, r2
 800956e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f023 0307 	bic.w	r3, r3, #7
 8009576:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4a15      	ldr	r2, [pc, #84]	; (80095d0 <prvHeapInit+0xb4>)
 800957c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800957e:	4b14      	ldr	r3, [pc, #80]	; (80095d0 <prvHeapInit+0xb4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2200      	movs	r2, #0
 8009584:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009586:	4b12      	ldr	r3, [pc, #72]	; (80095d0 <prvHeapInit+0xb4>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2200      	movs	r2, #0
 800958c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	1ad2      	subs	r2, r2, r3
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800959c:	4b0c      	ldr	r3, [pc, #48]	; (80095d0 <prvHeapInit+0xb4>)
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	4a0a      	ldr	r2, [pc, #40]	; (80095d4 <prvHeapInit+0xb8>)
 80095aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	4a09      	ldr	r2, [pc, #36]	; (80095d8 <prvHeapInit+0xbc>)
 80095b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095b4:	4b09      	ldr	r3, [pc, #36]	; (80095dc <prvHeapInit+0xc0>)
 80095b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80095ba:	601a      	str	r2, [r3, #0]
}
 80095bc:	bf00      	nop
 80095be:	3714      	adds	r7, #20
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr
 80095c8:	20000a00 	.word	0x20000a00
 80095cc:	20008a00 	.word	0x20008a00
 80095d0:	20008a08 	.word	0x20008a08
 80095d4:	20008a10 	.word	0x20008a10
 80095d8:	20008a0c 	.word	0x20008a0c
 80095dc:	20008a1c 	.word	0x20008a1c

080095e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095e8:	4b28      	ldr	r3, [pc, #160]	; (800968c <prvInsertBlockIntoFreeList+0xac>)
 80095ea:	60fb      	str	r3, [r7, #12]
 80095ec:	e002      	b.n	80095f4 <prvInsertBlockIntoFreeList+0x14>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	60fb      	str	r3, [r7, #12]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d8f7      	bhi.n	80095ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	4413      	add	r3, r2
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	429a      	cmp	r2, r3
 800960e:	d108      	bne.n	8009622 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	685a      	ldr	r2, [r3, #4]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	441a      	add	r2, r3
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	441a      	add	r2, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	429a      	cmp	r2, r3
 8009634:	d118      	bne.n	8009668 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	4b15      	ldr	r3, [pc, #84]	; (8009690 <prvInsertBlockIntoFreeList+0xb0>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	429a      	cmp	r2, r3
 8009640:	d00d      	beq.n	800965e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	685a      	ldr	r2, [r3, #4]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	441a      	add	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	e008      	b.n	8009670 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800965e:	4b0c      	ldr	r3, [pc, #48]	; (8009690 <prvInsertBlockIntoFreeList+0xb0>)
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	601a      	str	r2, [r3, #0]
 8009666:	e003      	b.n	8009670 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	429a      	cmp	r2, r3
 8009676:	d002      	beq.n	800967e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800967e:	bf00      	nop
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	20008a00 	.word	0x20008a00
 8009690:	20008a08 	.word	0x20008a08

08009694 <__errno>:
 8009694:	4b01      	ldr	r3, [pc, #4]	; (800969c <__errno+0x8>)
 8009696:	6818      	ldr	r0, [r3, #0]
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	20000058 	.word	0x20000058

080096a0 <__libc_init_array>:
 80096a0:	b570      	push	{r4, r5, r6, lr}
 80096a2:	4d0d      	ldr	r5, [pc, #52]	; (80096d8 <__libc_init_array+0x38>)
 80096a4:	4c0d      	ldr	r4, [pc, #52]	; (80096dc <__libc_init_array+0x3c>)
 80096a6:	1b64      	subs	r4, r4, r5
 80096a8:	10a4      	asrs	r4, r4, #2
 80096aa:	2600      	movs	r6, #0
 80096ac:	42a6      	cmp	r6, r4
 80096ae:	d109      	bne.n	80096c4 <__libc_init_array+0x24>
 80096b0:	4d0b      	ldr	r5, [pc, #44]	; (80096e0 <__libc_init_array+0x40>)
 80096b2:	4c0c      	ldr	r4, [pc, #48]	; (80096e4 <__libc_init_array+0x44>)
 80096b4:	f000 fca2 	bl	8009ffc <_init>
 80096b8:	1b64      	subs	r4, r4, r5
 80096ba:	10a4      	asrs	r4, r4, #2
 80096bc:	2600      	movs	r6, #0
 80096be:	42a6      	cmp	r6, r4
 80096c0:	d105      	bne.n	80096ce <__libc_init_array+0x2e>
 80096c2:	bd70      	pop	{r4, r5, r6, pc}
 80096c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c8:	4798      	blx	r3
 80096ca:	3601      	adds	r6, #1
 80096cc:	e7ee      	b.n	80096ac <__libc_init_array+0xc>
 80096ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d2:	4798      	blx	r3
 80096d4:	3601      	adds	r6, #1
 80096d6:	e7f2      	b.n	80096be <__libc_init_array+0x1e>
 80096d8:	0800bb74 	.word	0x0800bb74
 80096dc:	0800bb74 	.word	0x0800bb74
 80096e0:	0800bb74 	.word	0x0800bb74
 80096e4:	0800bb78 	.word	0x0800bb78

080096e8 <memcpy>:
 80096e8:	440a      	add	r2, r1
 80096ea:	4291      	cmp	r1, r2
 80096ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80096f0:	d100      	bne.n	80096f4 <memcpy+0xc>
 80096f2:	4770      	bx	lr
 80096f4:	b510      	push	{r4, lr}
 80096f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096fe:	4291      	cmp	r1, r2
 8009700:	d1f9      	bne.n	80096f6 <memcpy+0xe>
 8009702:	bd10      	pop	{r4, pc}

08009704 <memset>:
 8009704:	4402      	add	r2, r0
 8009706:	4603      	mov	r3, r0
 8009708:	4293      	cmp	r3, r2
 800970a:	d100      	bne.n	800970e <memset+0xa>
 800970c:	4770      	bx	lr
 800970e:	f803 1b01 	strb.w	r1, [r3], #1
 8009712:	e7f9      	b.n	8009708 <memset+0x4>

08009714 <sniprintf>:
 8009714:	b40c      	push	{r2, r3}
 8009716:	b530      	push	{r4, r5, lr}
 8009718:	4b17      	ldr	r3, [pc, #92]	; (8009778 <sniprintf+0x64>)
 800971a:	1e0c      	subs	r4, r1, #0
 800971c:	681d      	ldr	r5, [r3, #0]
 800971e:	b09d      	sub	sp, #116	; 0x74
 8009720:	da08      	bge.n	8009734 <sniprintf+0x20>
 8009722:	238b      	movs	r3, #139	; 0x8b
 8009724:	602b      	str	r3, [r5, #0]
 8009726:	f04f 30ff 	mov.w	r0, #4294967295
 800972a:	b01d      	add	sp, #116	; 0x74
 800972c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009730:	b002      	add	sp, #8
 8009732:	4770      	bx	lr
 8009734:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009738:	f8ad 3014 	strh.w	r3, [sp, #20]
 800973c:	bf14      	ite	ne
 800973e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009742:	4623      	moveq	r3, r4
 8009744:	9304      	str	r3, [sp, #16]
 8009746:	9307      	str	r3, [sp, #28]
 8009748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800974c:	9002      	str	r0, [sp, #8]
 800974e:	9006      	str	r0, [sp, #24]
 8009750:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009754:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009756:	ab21      	add	r3, sp, #132	; 0x84
 8009758:	a902      	add	r1, sp, #8
 800975a:	4628      	mov	r0, r5
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	f000 f869 	bl	8009834 <_svfiprintf_r>
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	bfbc      	itt	lt
 8009766:	238b      	movlt	r3, #139	; 0x8b
 8009768:	602b      	strlt	r3, [r5, #0]
 800976a:	2c00      	cmp	r4, #0
 800976c:	d0dd      	beq.n	800972a <sniprintf+0x16>
 800976e:	9b02      	ldr	r3, [sp, #8]
 8009770:	2200      	movs	r2, #0
 8009772:	701a      	strb	r2, [r3, #0]
 8009774:	e7d9      	b.n	800972a <sniprintf+0x16>
 8009776:	bf00      	nop
 8009778:	20000058 	.word	0x20000058

0800977c <__ssputs_r>:
 800977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009780:	688e      	ldr	r6, [r1, #8]
 8009782:	429e      	cmp	r6, r3
 8009784:	4682      	mov	sl, r0
 8009786:	460c      	mov	r4, r1
 8009788:	4690      	mov	r8, r2
 800978a:	461f      	mov	r7, r3
 800978c:	d838      	bhi.n	8009800 <__ssputs_r+0x84>
 800978e:	898a      	ldrh	r2, [r1, #12]
 8009790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009794:	d032      	beq.n	80097fc <__ssputs_r+0x80>
 8009796:	6825      	ldr	r5, [r4, #0]
 8009798:	6909      	ldr	r1, [r1, #16]
 800979a:	eba5 0901 	sub.w	r9, r5, r1
 800979e:	6965      	ldr	r5, [r4, #20]
 80097a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097a8:	3301      	adds	r3, #1
 80097aa:	444b      	add	r3, r9
 80097ac:	106d      	asrs	r5, r5, #1
 80097ae:	429d      	cmp	r5, r3
 80097b0:	bf38      	it	cc
 80097b2:	461d      	movcc	r5, r3
 80097b4:	0553      	lsls	r3, r2, #21
 80097b6:	d531      	bpl.n	800981c <__ssputs_r+0xa0>
 80097b8:	4629      	mov	r1, r5
 80097ba:	f000 fb55 	bl	8009e68 <_malloc_r>
 80097be:	4606      	mov	r6, r0
 80097c0:	b950      	cbnz	r0, 80097d8 <__ssputs_r+0x5c>
 80097c2:	230c      	movs	r3, #12
 80097c4:	f8ca 3000 	str.w	r3, [sl]
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ce:	81a3      	strh	r3, [r4, #12]
 80097d0:	f04f 30ff 	mov.w	r0, #4294967295
 80097d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d8:	6921      	ldr	r1, [r4, #16]
 80097da:	464a      	mov	r2, r9
 80097dc:	f7ff ff84 	bl	80096e8 <memcpy>
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ea:	81a3      	strh	r3, [r4, #12]
 80097ec:	6126      	str	r6, [r4, #16]
 80097ee:	6165      	str	r5, [r4, #20]
 80097f0:	444e      	add	r6, r9
 80097f2:	eba5 0509 	sub.w	r5, r5, r9
 80097f6:	6026      	str	r6, [r4, #0]
 80097f8:	60a5      	str	r5, [r4, #8]
 80097fa:	463e      	mov	r6, r7
 80097fc:	42be      	cmp	r6, r7
 80097fe:	d900      	bls.n	8009802 <__ssputs_r+0x86>
 8009800:	463e      	mov	r6, r7
 8009802:	6820      	ldr	r0, [r4, #0]
 8009804:	4632      	mov	r2, r6
 8009806:	4641      	mov	r1, r8
 8009808:	f000 faa8 	bl	8009d5c <memmove>
 800980c:	68a3      	ldr	r3, [r4, #8]
 800980e:	1b9b      	subs	r3, r3, r6
 8009810:	60a3      	str	r3, [r4, #8]
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	4433      	add	r3, r6
 8009816:	6023      	str	r3, [r4, #0]
 8009818:	2000      	movs	r0, #0
 800981a:	e7db      	b.n	80097d4 <__ssputs_r+0x58>
 800981c:	462a      	mov	r2, r5
 800981e:	f000 fb97 	bl	8009f50 <_realloc_r>
 8009822:	4606      	mov	r6, r0
 8009824:	2800      	cmp	r0, #0
 8009826:	d1e1      	bne.n	80097ec <__ssputs_r+0x70>
 8009828:	6921      	ldr	r1, [r4, #16]
 800982a:	4650      	mov	r0, sl
 800982c:	f000 fab0 	bl	8009d90 <_free_r>
 8009830:	e7c7      	b.n	80097c2 <__ssputs_r+0x46>
	...

08009834 <_svfiprintf_r>:
 8009834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009838:	4698      	mov	r8, r3
 800983a:	898b      	ldrh	r3, [r1, #12]
 800983c:	061b      	lsls	r3, r3, #24
 800983e:	b09d      	sub	sp, #116	; 0x74
 8009840:	4607      	mov	r7, r0
 8009842:	460d      	mov	r5, r1
 8009844:	4614      	mov	r4, r2
 8009846:	d50e      	bpl.n	8009866 <_svfiprintf_r+0x32>
 8009848:	690b      	ldr	r3, [r1, #16]
 800984a:	b963      	cbnz	r3, 8009866 <_svfiprintf_r+0x32>
 800984c:	2140      	movs	r1, #64	; 0x40
 800984e:	f000 fb0b 	bl	8009e68 <_malloc_r>
 8009852:	6028      	str	r0, [r5, #0]
 8009854:	6128      	str	r0, [r5, #16]
 8009856:	b920      	cbnz	r0, 8009862 <_svfiprintf_r+0x2e>
 8009858:	230c      	movs	r3, #12
 800985a:	603b      	str	r3, [r7, #0]
 800985c:	f04f 30ff 	mov.w	r0, #4294967295
 8009860:	e0d1      	b.n	8009a06 <_svfiprintf_r+0x1d2>
 8009862:	2340      	movs	r3, #64	; 0x40
 8009864:	616b      	str	r3, [r5, #20]
 8009866:	2300      	movs	r3, #0
 8009868:	9309      	str	r3, [sp, #36]	; 0x24
 800986a:	2320      	movs	r3, #32
 800986c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009870:	f8cd 800c 	str.w	r8, [sp, #12]
 8009874:	2330      	movs	r3, #48	; 0x30
 8009876:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a20 <_svfiprintf_r+0x1ec>
 800987a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800987e:	f04f 0901 	mov.w	r9, #1
 8009882:	4623      	mov	r3, r4
 8009884:	469a      	mov	sl, r3
 8009886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800988a:	b10a      	cbz	r2, 8009890 <_svfiprintf_r+0x5c>
 800988c:	2a25      	cmp	r2, #37	; 0x25
 800988e:	d1f9      	bne.n	8009884 <_svfiprintf_r+0x50>
 8009890:	ebba 0b04 	subs.w	fp, sl, r4
 8009894:	d00b      	beq.n	80098ae <_svfiprintf_r+0x7a>
 8009896:	465b      	mov	r3, fp
 8009898:	4622      	mov	r2, r4
 800989a:	4629      	mov	r1, r5
 800989c:	4638      	mov	r0, r7
 800989e:	f7ff ff6d 	bl	800977c <__ssputs_r>
 80098a2:	3001      	adds	r0, #1
 80098a4:	f000 80aa 	beq.w	80099fc <_svfiprintf_r+0x1c8>
 80098a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098aa:	445a      	add	r2, fp
 80098ac:	9209      	str	r2, [sp, #36]	; 0x24
 80098ae:	f89a 3000 	ldrb.w	r3, [sl]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 80a2 	beq.w	80099fc <_svfiprintf_r+0x1c8>
 80098b8:	2300      	movs	r3, #0
 80098ba:	f04f 32ff 	mov.w	r2, #4294967295
 80098be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098c2:	f10a 0a01 	add.w	sl, sl, #1
 80098c6:	9304      	str	r3, [sp, #16]
 80098c8:	9307      	str	r3, [sp, #28]
 80098ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098ce:	931a      	str	r3, [sp, #104]	; 0x68
 80098d0:	4654      	mov	r4, sl
 80098d2:	2205      	movs	r2, #5
 80098d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d8:	4851      	ldr	r0, [pc, #324]	; (8009a20 <_svfiprintf_r+0x1ec>)
 80098da:	f7f6 fc89 	bl	80001f0 <memchr>
 80098de:	9a04      	ldr	r2, [sp, #16]
 80098e0:	b9d8      	cbnz	r0, 800991a <_svfiprintf_r+0xe6>
 80098e2:	06d0      	lsls	r0, r2, #27
 80098e4:	bf44      	itt	mi
 80098e6:	2320      	movmi	r3, #32
 80098e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098ec:	0711      	lsls	r1, r2, #28
 80098ee:	bf44      	itt	mi
 80098f0:	232b      	movmi	r3, #43	; 0x2b
 80098f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098f6:	f89a 3000 	ldrb.w	r3, [sl]
 80098fa:	2b2a      	cmp	r3, #42	; 0x2a
 80098fc:	d015      	beq.n	800992a <_svfiprintf_r+0xf6>
 80098fe:	9a07      	ldr	r2, [sp, #28]
 8009900:	4654      	mov	r4, sl
 8009902:	2000      	movs	r0, #0
 8009904:	f04f 0c0a 	mov.w	ip, #10
 8009908:	4621      	mov	r1, r4
 800990a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800990e:	3b30      	subs	r3, #48	; 0x30
 8009910:	2b09      	cmp	r3, #9
 8009912:	d94e      	bls.n	80099b2 <_svfiprintf_r+0x17e>
 8009914:	b1b0      	cbz	r0, 8009944 <_svfiprintf_r+0x110>
 8009916:	9207      	str	r2, [sp, #28]
 8009918:	e014      	b.n	8009944 <_svfiprintf_r+0x110>
 800991a:	eba0 0308 	sub.w	r3, r0, r8
 800991e:	fa09 f303 	lsl.w	r3, r9, r3
 8009922:	4313      	orrs	r3, r2
 8009924:	9304      	str	r3, [sp, #16]
 8009926:	46a2      	mov	sl, r4
 8009928:	e7d2      	b.n	80098d0 <_svfiprintf_r+0x9c>
 800992a:	9b03      	ldr	r3, [sp, #12]
 800992c:	1d19      	adds	r1, r3, #4
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	9103      	str	r1, [sp, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	bfbb      	ittet	lt
 8009936:	425b      	neglt	r3, r3
 8009938:	f042 0202 	orrlt.w	r2, r2, #2
 800993c:	9307      	strge	r3, [sp, #28]
 800993e:	9307      	strlt	r3, [sp, #28]
 8009940:	bfb8      	it	lt
 8009942:	9204      	strlt	r2, [sp, #16]
 8009944:	7823      	ldrb	r3, [r4, #0]
 8009946:	2b2e      	cmp	r3, #46	; 0x2e
 8009948:	d10c      	bne.n	8009964 <_svfiprintf_r+0x130>
 800994a:	7863      	ldrb	r3, [r4, #1]
 800994c:	2b2a      	cmp	r3, #42	; 0x2a
 800994e:	d135      	bne.n	80099bc <_svfiprintf_r+0x188>
 8009950:	9b03      	ldr	r3, [sp, #12]
 8009952:	1d1a      	adds	r2, r3, #4
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	9203      	str	r2, [sp, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	bfb8      	it	lt
 800995c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009960:	3402      	adds	r4, #2
 8009962:	9305      	str	r3, [sp, #20]
 8009964:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a30 <_svfiprintf_r+0x1fc>
 8009968:	7821      	ldrb	r1, [r4, #0]
 800996a:	2203      	movs	r2, #3
 800996c:	4650      	mov	r0, sl
 800996e:	f7f6 fc3f 	bl	80001f0 <memchr>
 8009972:	b140      	cbz	r0, 8009986 <_svfiprintf_r+0x152>
 8009974:	2340      	movs	r3, #64	; 0x40
 8009976:	eba0 000a 	sub.w	r0, r0, sl
 800997a:	fa03 f000 	lsl.w	r0, r3, r0
 800997e:	9b04      	ldr	r3, [sp, #16]
 8009980:	4303      	orrs	r3, r0
 8009982:	3401      	adds	r4, #1
 8009984:	9304      	str	r3, [sp, #16]
 8009986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800998a:	4826      	ldr	r0, [pc, #152]	; (8009a24 <_svfiprintf_r+0x1f0>)
 800998c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009990:	2206      	movs	r2, #6
 8009992:	f7f6 fc2d 	bl	80001f0 <memchr>
 8009996:	2800      	cmp	r0, #0
 8009998:	d038      	beq.n	8009a0c <_svfiprintf_r+0x1d8>
 800999a:	4b23      	ldr	r3, [pc, #140]	; (8009a28 <_svfiprintf_r+0x1f4>)
 800999c:	bb1b      	cbnz	r3, 80099e6 <_svfiprintf_r+0x1b2>
 800999e:	9b03      	ldr	r3, [sp, #12]
 80099a0:	3307      	adds	r3, #7
 80099a2:	f023 0307 	bic.w	r3, r3, #7
 80099a6:	3308      	adds	r3, #8
 80099a8:	9303      	str	r3, [sp, #12]
 80099aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ac:	4433      	add	r3, r6
 80099ae:	9309      	str	r3, [sp, #36]	; 0x24
 80099b0:	e767      	b.n	8009882 <_svfiprintf_r+0x4e>
 80099b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80099b6:	460c      	mov	r4, r1
 80099b8:	2001      	movs	r0, #1
 80099ba:	e7a5      	b.n	8009908 <_svfiprintf_r+0xd4>
 80099bc:	2300      	movs	r3, #0
 80099be:	3401      	adds	r4, #1
 80099c0:	9305      	str	r3, [sp, #20]
 80099c2:	4619      	mov	r1, r3
 80099c4:	f04f 0c0a 	mov.w	ip, #10
 80099c8:	4620      	mov	r0, r4
 80099ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099ce:	3a30      	subs	r2, #48	; 0x30
 80099d0:	2a09      	cmp	r2, #9
 80099d2:	d903      	bls.n	80099dc <_svfiprintf_r+0x1a8>
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d0c5      	beq.n	8009964 <_svfiprintf_r+0x130>
 80099d8:	9105      	str	r1, [sp, #20]
 80099da:	e7c3      	b.n	8009964 <_svfiprintf_r+0x130>
 80099dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80099e0:	4604      	mov	r4, r0
 80099e2:	2301      	movs	r3, #1
 80099e4:	e7f0      	b.n	80099c8 <_svfiprintf_r+0x194>
 80099e6:	ab03      	add	r3, sp, #12
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	462a      	mov	r2, r5
 80099ec:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <_svfiprintf_r+0x1f8>)
 80099ee:	a904      	add	r1, sp, #16
 80099f0:	4638      	mov	r0, r7
 80099f2:	f3af 8000 	nop.w
 80099f6:	1c42      	adds	r2, r0, #1
 80099f8:	4606      	mov	r6, r0
 80099fa:	d1d6      	bne.n	80099aa <_svfiprintf_r+0x176>
 80099fc:	89ab      	ldrh	r3, [r5, #12]
 80099fe:	065b      	lsls	r3, r3, #25
 8009a00:	f53f af2c 	bmi.w	800985c <_svfiprintf_r+0x28>
 8009a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a06:	b01d      	add	sp, #116	; 0x74
 8009a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0c:	ab03      	add	r3, sp, #12
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	462a      	mov	r2, r5
 8009a12:	4b06      	ldr	r3, [pc, #24]	; (8009a2c <_svfiprintf_r+0x1f8>)
 8009a14:	a904      	add	r1, sp, #16
 8009a16:	4638      	mov	r0, r7
 8009a18:	f000 f87a 	bl	8009b10 <_printf_i>
 8009a1c:	e7eb      	b.n	80099f6 <_svfiprintf_r+0x1c2>
 8009a1e:	bf00      	nop
 8009a20:	0800bb38 	.word	0x0800bb38
 8009a24:	0800bb42 	.word	0x0800bb42
 8009a28:	00000000 	.word	0x00000000
 8009a2c:	0800977d 	.word	0x0800977d
 8009a30:	0800bb3e 	.word	0x0800bb3e

08009a34 <_printf_common>:
 8009a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a38:	4616      	mov	r6, r2
 8009a3a:	4699      	mov	r9, r3
 8009a3c:	688a      	ldr	r2, [r1, #8]
 8009a3e:	690b      	ldr	r3, [r1, #16]
 8009a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a44:	4293      	cmp	r3, r2
 8009a46:	bfb8      	it	lt
 8009a48:	4613      	movlt	r3, r2
 8009a4a:	6033      	str	r3, [r6, #0]
 8009a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a50:	4607      	mov	r7, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	b10a      	cbz	r2, 8009a5a <_printf_common+0x26>
 8009a56:	3301      	adds	r3, #1
 8009a58:	6033      	str	r3, [r6, #0]
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	0699      	lsls	r1, r3, #26
 8009a5e:	bf42      	ittt	mi
 8009a60:	6833      	ldrmi	r3, [r6, #0]
 8009a62:	3302      	addmi	r3, #2
 8009a64:	6033      	strmi	r3, [r6, #0]
 8009a66:	6825      	ldr	r5, [r4, #0]
 8009a68:	f015 0506 	ands.w	r5, r5, #6
 8009a6c:	d106      	bne.n	8009a7c <_printf_common+0x48>
 8009a6e:	f104 0a19 	add.w	sl, r4, #25
 8009a72:	68e3      	ldr	r3, [r4, #12]
 8009a74:	6832      	ldr	r2, [r6, #0]
 8009a76:	1a9b      	subs	r3, r3, r2
 8009a78:	42ab      	cmp	r3, r5
 8009a7a:	dc26      	bgt.n	8009aca <_printf_common+0x96>
 8009a7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a80:	1e13      	subs	r3, r2, #0
 8009a82:	6822      	ldr	r2, [r4, #0]
 8009a84:	bf18      	it	ne
 8009a86:	2301      	movne	r3, #1
 8009a88:	0692      	lsls	r2, r2, #26
 8009a8a:	d42b      	bmi.n	8009ae4 <_printf_common+0xb0>
 8009a8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a90:	4649      	mov	r1, r9
 8009a92:	4638      	mov	r0, r7
 8009a94:	47c0      	blx	r8
 8009a96:	3001      	adds	r0, #1
 8009a98:	d01e      	beq.n	8009ad8 <_printf_common+0xa4>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	68e5      	ldr	r5, [r4, #12]
 8009a9e:	6832      	ldr	r2, [r6, #0]
 8009aa0:	f003 0306 	and.w	r3, r3, #6
 8009aa4:	2b04      	cmp	r3, #4
 8009aa6:	bf08      	it	eq
 8009aa8:	1aad      	subeq	r5, r5, r2
 8009aaa:	68a3      	ldr	r3, [r4, #8]
 8009aac:	6922      	ldr	r2, [r4, #16]
 8009aae:	bf0c      	ite	eq
 8009ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ab4:	2500      	movne	r5, #0
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	bfc4      	itt	gt
 8009aba:	1a9b      	subgt	r3, r3, r2
 8009abc:	18ed      	addgt	r5, r5, r3
 8009abe:	2600      	movs	r6, #0
 8009ac0:	341a      	adds	r4, #26
 8009ac2:	42b5      	cmp	r5, r6
 8009ac4:	d11a      	bne.n	8009afc <_printf_common+0xc8>
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	e008      	b.n	8009adc <_printf_common+0xa8>
 8009aca:	2301      	movs	r3, #1
 8009acc:	4652      	mov	r2, sl
 8009ace:	4649      	mov	r1, r9
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	47c0      	blx	r8
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d103      	bne.n	8009ae0 <_printf_common+0xac>
 8009ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8009adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae0:	3501      	adds	r5, #1
 8009ae2:	e7c6      	b.n	8009a72 <_printf_common+0x3e>
 8009ae4:	18e1      	adds	r1, r4, r3
 8009ae6:	1c5a      	adds	r2, r3, #1
 8009ae8:	2030      	movs	r0, #48	; 0x30
 8009aea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aee:	4422      	add	r2, r4
 8009af0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009af4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009af8:	3302      	adds	r3, #2
 8009afa:	e7c7      	b.n	8009a8c <_printf_common+0x58>
 8009afc:	2301      	movs	r3, #1
 8009afe:	4622      	mov	r2, r4
 8009b00:	4649      	mov	r1, r9
 8009b02:	4638      	mov	r0, r7
 8009b04:	47c0      	blx	r8
 8009b06:	3001      	adds	r0, #1
 8009b08:	d0e6      	beq.n	8009ad8 <_printf_common+0xa4>
 8009b0a:	3601      	adds	r6, #1
 8009b0c:	e7d9      	b.n	8009ac2 <_printf_common+0x8e>
	...

08009b10 <_printf_i>:
 8009b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b14:	7e0f      	ldrb	r7, [r1, #24]
 8009b16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b18:	2f78      	cmp	r7, #120	; 0x78
 8009b1a:	4691      	mov	r9, r2
 8009b1c:	4680      	mov	r8, r0
 8009b1e:	460c      	mov	r4, r1
 8009b20:	469a      	mov	sl, r3
 8009b22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b26:	d807      	bhi.n	8009b38 <_printf_i+0x28>
 8009b28:	2f62      	cmp	r7, #98	; 0x62
 8009b2a:	d80a      	bhi.n	8009b42 <_printf_i+0x32>
 8009b2c:	2f00      	cmp	r7, #0
 8009b2e:	f000 80d8 	beq.w	8009ce2 <_printf_i+0x1d2>
 8009b32:	2f58      	cmp	r7, #88	; 0x58
 8009b34:	f000 80a3 	beq.w	8009c7e <_printf_i+0x16e>
 8009b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b40:	e03a      	b.n	8009bb8 <_printf_i+0xa8>
 8009b42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b46:	2b15      	cmp	r3, #21
 8009b48:	d8f6      	bhi.n	8009b38 <_printf_i+0x28>
 8009b4a:	a101      	add	r1, pc, #4	; (adr r1, 8009b50 <_printf_i+0x40>)
 8009b4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b50:	08009ba9 	.word	0x08009ba9
 8009b54:	08009bbd 	.word	0x08009bbd
 8009b58:	08009b39 	.word	0x08009b39
 8009b5c:	08009b39 	.word	0x08009b39
 8009b60:	08009b39 	.word	0x08009b39
 8009b64:	08009b39 	.word	0x08009b39
 8009b68:	08009bbd 	.word	0x08009bbd
 8009b6c:	08009b39 	.word	0x08009b39
 8009b70:	08009b39 	.word	0x08009b39
 8009b74:	08009b39 	.word	0x08009b39
 8009b78:	08009b39 	.word	0x08009b39
 8009b7c:	08009cc9 	.word	0x08009cc9
 8009b80:	08009bed 	.word	0x08009bed
 8009b84:	08009cab 	.word	0x08009cab
 8009b88:	08009b39 	.word	0x08009b39
 8009b8c:	08009b39 	.word	0x08009b39
 8009b90:	08009ceb 	.word	0x08009ceb
 8009b94:	08009b39 	.word	0x08009b39
 8009b98:	08009bed 	.word	0x08009bed
 8009b9c:	08009b39 	.word	0x08009b39
 8009ba0:	08009b39 	.word	0x08009b39
 8009ba4:	08009cb3 	.word	0x08009cb3
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	1d1a      	adds	r2, r3, #4
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	602a      	str	r2, [r5, #0]
 8009bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e0a3      	b.n	8009d04 <_printf_i+0x1f4>
 8009bbc:	6820      	ldr	r0, [r4, #0]
 8009bbe:	6829      	ldr	r1, [r5, #0]
 8009bc0:	0606      	lsls	r6, r0, #24
 8009bc2:	f101 0304 	add.w	r3, r1, #4
 8009bc6:	d50a      	bpl.n	8009bde <_printf_i+0xce>
 8009bc8:	680e      	ldr	r6, [r1, #0]
 8009bca:	602b      	str	r3, [r5, #0]
 8009bcc:	2e00      	cmp	r6, #0
 8009bce:	da03      	bge.n	8009bd8 <_printf_i+0xc8>
 8009bd0:	232d      	movs	r3, #45	; 0x2d
 8009bd2:	4276      	negs	r6, r6
 8009bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bd8:	485e      	ldr	r0, [pc, #376]	; (8009d54 <_printf_i+0x244>)
 8009bda:	230a      	movs	r3, #10
 8009bdc:	e019      	b.n	8009c12 <_printf_i+0x102>
 8009bde:	680e      	ldr	r6, [r1, #0]
 8009be0:	602b      	str	r3, [r5, #0]
 8009be2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009be6:	bf18      	it	ne
 8009be8:	b236      	sxthne	r6, r6
 8009bea:	e7ef      	b.n	8009bcc <_printf_i+0xbc>
 8009bec:	682b      	ldr	r3, [r5, #0]
 8009bee:	6820      	ldr	r0, [r4, #0]
 8009bf0:	1d19      	adds	r1, r3, #4
 8009bf2:	6029      	str	r1, [r5, #0]
 8009bf4:	0601      	lsls	r1, r0, #24
 8009bf6:	d501      	bpl.n	8009bfc <_printf_i+0xec>
 8009bf8:	681e      	ldr	r6, [r3, #0]
 8009bfa:	e002      	b.n	8009c02 <_printf_i+0xf2>
 8009bfc:	0646      	lsls	r6, r0, #25
 8009bfe:	d5fb      	bpl.n	8009bf8 <_printf_i+0xe8>
 8009c00:	881e      	ldrh	r6, [r3, #0]
 8009c02:	4854      	ldr	r0, [pc, #336]	; (8009d54 <_printf_i+0x244>)
 8009c04:	2f6f      	cmp	r7, #111	; 0x6f
 8009c06:	bf0c      	ite	eq
 8009c08:	2308      	moveq	r3, #8
 8009c0a:	230a      	movne	r3, #10
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c12:	6865      	ldr	r5, [r4, #4]
 8009c14:	60a5      	str	r5, [r4, #8]
 8009c16:	2d00      	cmp	r5, #0
 8009c18:	bfa2      	ittt	ge
 8009c1a:	6821      	ldrge	r1, [r4, #0]
 8009c1c:	f021 0104 	bicge.w	r1, r1, #4
 8009c20:	6021      	strge	r1, [r4, #0]
 8009c22:	b90e      	cbnz	r6, 8009c28 <_printf_i+0x118>
 8009c24:	2d00      	cmp	r5, #0
 8009c26:	d04d      	beq.n	8009cc4 <_printf_i+0x1b4>
 8009c28:	4615      	mov	r5, r2
 8009c2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c2e:	fb03 6711 	mls	r7, r3, r1, r6
 8009c32:	5dc7      	ldrb	r7, [r0, r7]
 8009c34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c38:	4637      	mov	r7, r6
 8009c3a:	42bb      	cmp	r3, r7
 8009c3c:	460e      	mov	r6, r1
 8009c3e:	d9f4      	bls.n	8009c2a <_printf_i+0x11a>
 8009c40:	2b08      	cmp	r3, #8
 8009c42:	d10b      	bne.n	8009c5c <_printf_i+0x14c>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	07de      	lsls	r6, r3, #31
 8009c48:	d508      	bpl.n	8009c5c <_printf_i+0x14c>
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	6861      	ldr	r1, [r4, #4]
 8009c4e:	4299      	cmp	r1, r3
 8009c50:	bfde      	ittt	le
 8009c52:	2330      	movle	r3, #48	; 0x30
 8009c54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c5c:	1b52      	subs	r2, r2, r5
 8009c5e:	6122      	str	r2, [r4, #16]
 8009c60:	f8cd a000 	str.w	sl, [sp]
 8009c64:	464b      	mov	r3, r9
 8009c66:	aa03      	add	r2, sp, #12
 8009c68:	4621      	mov	r1, r4
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	f7ff fee2 	bl	8009a34 <_printf_common>
 8009c70:	3001      	adds	r0, #1
 8009c72:	d14c      	bne.n	8009d0e <_printf_i+0x1fe>
 8009c74:	f04f 30ff 	mov.w	r0, #4294967295
 8009c78:	b004      	add	sp, #16
 8009c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c7e:	4835      	ldr	r0, [pc, #212]	; (8009d54 <_printf_i+0x244>)
 8009c80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c84:	6829      	ldr	r1, [r5, #0]
 8009c86:	6823      	ldr	r3, [r4, #0]
 8009c88:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c8c:	6029      	str	r1, [r5, #0]
 8009c8e:	061d      	lsls	r5, r3, #24
 8009c90:	d514      	bpl.n	8009cbc <_printf_i+0x1ac>
 8009c92:	07df      	lsls	r7, r3, #31
 8009c94:	bf44      	itt	mi
 8009c96:	f043 0320 	orrmi.w	r3, r3, #32
 8009c9a:	6023      	strmi	r3, [r4, #0]
 8009c9c:	b91e      	cbnz	r6, 8009ca6 <_printf_i+0x196>
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	f023 0320 	bic.w	r3, r3, #32
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	2310      	movs	r3, #16
 8009ca8:	e7b0      	b.n	8009c0c <_printf_i+0xfc>
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	f043 0320 	orr.w	r3, r3, #32
 8009cb0:	6023      	str	r3, [r4, #0]
 8009cb2:	2378      	movs	r3, #120	; 0x78
 8009cb4:	4828      	ldr	r0, [pc, #160]	; (8009d58 <_printf_i+0x248>)
 8009cb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cba:	e7e3      	b.n	8009c84 <_printf_i+0x174>
 8009cbc:	0659      	lsls	r1, r3, #25
 8009cbe:	bf48      	it	mi
 8009cc0:	b2b6      	uxthmi	r6, r6
 8009cc2:	e7e6      	b.n	8009c92 <_printf_i+0x182>
 8009cc4:	4615      	mov	r5, r2
 8009cc6:	e7bb      	b.n	8009c40 <_printf_i+0x130>
 8009cc8:	682b      	ldr	r3, [r5, #0]
 8009cca:	6826      	ldr	r6, [r4, #0]
 8009ccc:	6961      	ldr	r1, [r4, #20]
 8009cce:	1d18      	adds	r0, r3, #4
 8009cd0:	6028      	str	r0, [r5, #0]
 8009cd2:	0635      	lsls	r5, r6, #24
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	d501      	bpl.n	8009cdc <_printf_i+0x1cc>
 8009cd8:	6019      	str	r1, [r3, #0]
 8009cda:	e002      	b.n	8009ce2 <_printf_i+0x1d2>
 8009cdc:	0670      	lsls	r0, r6, #25
 8009cde:	d5fb      	bpl.n	8009cd8 <_printf_i+0x1c8>
 8009ce0:	8019      	strh	r1, [r3, #0]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	6123      	str	r3, [r4, #16]
 8009ce6:	4615      	mov	r5, r2
 8009ce8:	e7ba      	b.n	8009c60 <_printf_i+0x150>
 8009cea:	682b      	ldr	r3, [r5, #0]
 8009cec:	1d1a      	adds	r2, r3, #4
 8009cee:	602a      	str	r2, [r5, #0]
 8009cf0:	681d      	ldr	r5, [r3, #0]
 8009cf2:	6862      	ldr	r2, [r4, #4]
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f7f6 fa7a 	bl	80001f0 <memchr>
 8009cfc:	b108      	cbz	r0, 8009d02 <_printf_i+0x1f2>
 8009cfe:	1b40      	subs	r0, r0, r5
 8009d00:	6060      	str	r0, [r4, #4]
 8009d02:	6863      	ldr	r3, [r4, #4]
 8009d04:	6123      	str	r3, [r4, #16]
 8009d06:	2300      	movs	r3, #0
 8009d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d0c:	e7a8      	b.n	8009c60 <_printf_i+0x150>
 8009d0e:	6923      	ldr	r3, [r4, #16]
 8009d10:	462a      	mov	r2, r5
 8009d12:	4649      	mov	r1, r9
 8009d14:	4640      	mov	r0, r8
 8009d16:	47d0      	blx	sl
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d0ab      	beq.n	8009c74 <_printf_i+0x164>
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	079b      	lsls	r3, r3, #30
 8009d20:	d413      	bmi.n	8009d4a <_printf_i+0x23a>
 8009d22:	68e0      	ldr	r0, [r4, #12]
 8009d24:	9b03      	ldr	r3, [sp, #12]
 8009d26:	4298      	cmp	r0, r3
 8009d28:	bfb8      	it	lt
 8009d2a:	4618      	movlt	r0, r3
 8009d2c:	e7a4      	b.n	8009c78 <_printf_i+0x168>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	4632      	mov	r2, r6
 8009d32:	4649      	mov	r1, r9
 8009d34:	4640      	mov	r0, r8
 8009d36:	47d0      	blx	sl
 8009d38:	3001      	adds	r0, #1
 8009d3a:	d09b      	beq.n	8009c74 <_printf_i+0x164>
 8009d3c:	3501      	adds	r5, #1
 8009d3e:	68e3      	ldr	r3, [r4, #12]
 8009d40:	9903      	ldr	r1, [sp, #12]
 8009d42:	1a5b      	subs	r3, r3, r1
 8009d44:	42ab      	cmp	r3, r5
 8009d46:	dcf2      	bgt.n	8009d2e <_printf_i+0x21e>
 8009d48:	e7eb      	b.n	8009d22 <_printf_i+0x212>
 8009d4a:	2500      	movs	r5, #0
 8009d4c:	f104 0619 	add.w	r6, r4, #25
 8009d50:	e7f5      	b.n	8009d3e <_printf_i+0x22e>
 8009d52:	bf00      	nop
 8009d54:	0800bb49 	.word	0x0800bb49
 8009d58:	0800bb5a 	.word	0x0800bb5a

08009d5c <memmove>:
 8009d5c:	4288      	cmp	r0, r1
 8009d5e:	b510      	push	{r4, lr}
 8009d60:	eb01 0402 	add.w	r4, r1, r2
 8009d64:	d902      	bls.n	8009d6c <memmove+0x10>
 8009d66:	4284      	cmp	r4, r0
 8009d68:	4623      	mov	r3, r4
 8009d6a:	d807      	bhi.n	8009d7c <memmove+0x20>
 8009d6c:	1e43      	subs	r3, r0, #1
 8009d6e:	42a1      	cmp	r1, r4
 8009d70:	d008      	beq.n	8009d84 <memmove+0x28>
 8009d72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d7a:	e7f8      	b.n	8009d6e <memmove+0x12>
 8009d7c:	4402      	add	r2, r0
 8009d7e:	4601      	mov	r1, r0
 8009d80:	428a      	cmp	r2, r1
 8009d82:	d100      	bne.n	8009d86 <memmove+0x2a>
 8009d84:	bd10      	pop	{r4, pc}
 8009d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d8e:	e7f7      	b.n	8009d80 <memmove+0x24>

08009d90 <_free_r>:
 8009d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d92:	2900      	cmp	r1, #0
 8009d94:	d044      	beq.n	8009e20 <_free_r+0x90>
 8009d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d9a:	9001      	str	r0, [sp, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8009da2:	bfb8      	it	lt
 8009da4:	18e4      	addlt	r4, r4, r3
 8009da6:	f000 f913 	bl	8009fd0 <__malloc_lock>
 8009daa:	4a1e      	ldr	r2, [pc, #120]	; (8009e24 <_free_r+0x94>)
 8009dac:	9801      	ldr	r0, [sp, #4]
 8009dae:	6813      	ldr	r3, [r2, #0]
 8009db0:	b933      	cbnz	r3, 8009dc0 <_free_r+0x30>
 8009db2:	6063      	str	r3, [r4, #4]
 8009db4:	6014      	str	r4, [r2, #0]
 8009db6:	b003      	add	sp, #12
 8009db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dbc:	f000 b90e 	b.w	8009fdc <__malloc_unlock>
 8009dc0:	42a3      	cmp	r3, r4
 8009dc2:	d908      	bls.n	8009dd6 <_free_r+0x46>
 8009dc4:	6825      	ldr	r5, [r4, #0]
 8009dc6:	1961      	adds	r1, r4, r5
 8009dc8:	428b      	cmp	r3, r1
 8009dca:	bf01      	itttt	eq
 8009dcc:	6819      	ldreq	r1, [r3, #0]
 8009dce:	685b      	ldreq	r3, [r3, #4]
 8009dd0:	1949      	addeq	r1, r1, r5
 8009dd2:	6021      	streq	r1, [r4, #0]
 8009dd4:	e7ed      	b.n	8009db2 <_free_r+0x22>
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	b10b      	cbz	r3, 8009de0 <_free_r+0x50>
 8009ddc:	42a3      	cmp	r3, r4
 8009dde:	d9fa      	bls.n	8009dd6 <_free_r+0x46>
 8009de0:	6811      	ldr	r1, [r2, #0]
 8009de2:	1855      	adds	r5, r2, r1
 8009de4:	42a5      	cmp	r5, r4
 8009de6:	d10b      	bne.n	8009e00 <_free_r+0x70>
 8009de8:	6824      	ldr	r4, [r4, #0]
 8009dea:	4421      	add	r1, r4
 8009dec:	1854      	adds	r4, r2, r1
 8009dee:	42a3      	cmp	r3, r4
 8009df0:	6011      	str	r1, [r2, #0]
 8009df2:	d1e0      	bne.n	8009db6 <_free_r+0x26>
 8009df4:	681c      	ldr	r4, [r3, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	6053      	str	r3, [r2, #4]
 8009dfa:	4421      	add	r1, r4
 8009dfc:	6011      	str	r1, [r2, #0]
 8009dfe:	e7da      	b.n	8009db6 <_free_r+0x26>
 8009e00:	d902      	bls.n	8009e08 <_free_r+0x78>
 8009e02:	230c      	movs	r3, #12
 8009e04:	6003      	str	r3, [r0, #0]
 8009e06:	e7d6      	b.n	8009db6 <_free_r+0x26>
 8009e08:	6825      	ldr	r5, [r4, #0]
 8009e0a:	1961      	adds	r1, r4, r5
 8009e0c:	428b      	cmp	r3, r1
 8009e0e:	bf04      	itt	eq
 8009e10:	6819      	ldreq	r1, [r3, #0]
 8009e12:	685b      	ldreq	r3, [r3, #4]
 8009e14:	6063      	str	r3, [r4, #4]
 8009e16:	bf04      	itt	eq
 8009e18:	1949      	addeq	r1, r1, r5
 8009e1a:	6021      	streq	r1, [r4, #0]
 8009e1c:	6054      	str	r4, [r2, #4]
 8009e1e:	e7ca      	b.n	8009db6 <_free_r+0x26>
 8009e20:	b003      	add	sp, #12
 8009e22:	bd30      	pop	{r4, r5, pc}
 8009e24:	20008a20 	.word	0x20008a20

08009e28 <sbrk_aligned>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	4e0e      	ldr	r6, [pc, #56]	; (8009e64 <sbrk_aligned+0x3c>)
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	6831      	ldr	r1, [r6, #0]
 8009e30:	4605      	mov	r5, r0
 8009e32:	b911      	cbnz	r1, 8009e3a <sbrk_aligned+0x12>
 8009e34:	f000 f8bc 	bl	8009fb0 <_sbrk_r>
 8009e38:	6030      	str	r0, [r6, #0]
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	f000 f8b7 	bl	8009fb0 <_sbrk_r>
 8009e42:	1c43      	adds	r3, r0, #1
 8009e44:	d00a      	beq.n	8009e5c <sbrk_aligned+0x34>
 8009e46:	1cc4      	adds	r4, r0, #3
 8009e48:	f024 0403 	bic.w	r4, r4, #3
 8009e4c:	42a0      	cmp	r0, r4
 8009e4e:	d007      	beq.n	8009e60 <sbrk_aligned+0x38>
 8009e50:	1a21      	subs	r1, r4, r0
 8009e52:	4628      	mov	r0, r5
 8009e54:	f000 f8ac 	bl	8009fb0 <_sbrk_r>
 8009e58:	3001      	adds	r0, #1
 8009e5a:	d101      	bne.n	8009e60 <sbrk_aligned+0x38>
 8009e5c:	f04f 34ff 	mov.w	r4, #4294967295
 8009e60:	4620      	mov	r0, r4
 8009e62:	bd70      	pop	{r4, r5, r6, pc}
 8009e64:	20008a24 	.word	0x20008a24

08009e68 <_malloc_r>:
 8009e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6c:	1ccd      	adds	r5, r1, #3
 8009e6e:	f025 0503 	bic.w	r5, r5, #3
 8009e72:	3508      	adds	r5, #8
 8009e74:	2d0c      	cmp	r5, #12
 8009e76:	bf38      	it	cc
 8009e78:	250c      	movcc	r5, #12
 8009e7a:	2d00      	cmp	r5, #0
 8009e7c:	4607      	mov	r7, r0
 8009e7e:	db01      	blt.n	8009e84 <_malloc_r+0x1c>
 8009e80:	42a9      	cmp	r1, r5
 8009e82:	d905      	bls.n	8009e90 <_malloc_r+0x28>
 8009e84:	230c      	movs	r3, #12
 8009e86:	603b      	str	r3, [r7, #0]
 8009e88:	2600      	movs	r6, #0
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e90:	4e2e      	ldr	r6, [pc, #184]	; (8009f4c <_malloc_r+0xe4>)
 8009e92:	f000 f89d 	bl	8009fd0 <__malloc_lock>
 8009e96:	6833      	ldr	r3, [r6, #0]
 8009e98:	461c      	mov	r4, r3
 8009e9a:	bb34      	cbnz	r4, 8009eea <_malloc_r+0x82>
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	f7ff ffc2 	bl	8009e28 <sbrk_aligned>
 8009ea4:	1c43      	adds	r3, r0, #1
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	d14d      	bne.n	8009f46 <_malloc_r+0xde>
 8009eaa:	6834      	ldr	r4, [r6, #0]
 8009eac:	4626      	mov	r6, r4
 8009eae:	2e00      	cmp	r6, #0
 8009eb0:	d140      	bne.n	8009f34 <_malloc_r+0xcc>
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	4631      	mov	r1, r6
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	eb04 0803 	add.w	r8, r4, r3
 8009ebc:	f000 f878 	bl	8009fb0 <_sbrk_r>
 8009ec0:	4580      	cmp	r8, r0
 8009ec2:	d13a      	bne.n	8009f3a <_malloc_r+0xd2>
 8009ec4:	6821      	ldr	r1, [r4, #0]
 8009ec6:	3503      	adds	r5, #3
 8009ec8:	1a6d      	subs	r5, r5, r1
 8009eca:	f025 0503 	bic.w	r5, r5, #3
 8009ece:	3508      	adds	r5, #8
 8009ed0:	2d0c      	cmp	r5, #12
 8009ed2:	bf38      	it	cc
 8009ed4:	250c      	movcc	r5, #12
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	4638      	mov	r0, r7
 8009eda:	f7ff ffa5 	bl	8009e28 <sbrk_aligned>
 8009ede:	3001      	adds	r0, #1
 8009ee0:	d02b      	beq.n	8009f3a <_malloc_r+0xd2>
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	442b      	add	r3, r5
 8009ee6:	6023      	str	r3, [r4, #0]
 8009ee8:	e00e      	b.n	8009f08 <_malloc_r+0xa0>
 8009eea:	6822      	ldr	r2, [r4, #0]
 8009eec:	1b52      	subs	r2, r2, r5
 8009eee:	d41e      	bmi.n	8009f2e <_malloc_r+0xc6>
 8009ef0:	2a0b      	cmp	r2, #11
 8009ef2:	d916      	bls.n	8009f22 <_malloc_r+0xba>
 8009ef4:	1961      	adds	r1, r4, r5
 8009ef6:	42a3      	cmp	r3, r4
 8009ef8:	6025      	str	r5, [r4, #0]
 8009efa:	bf18      	it	ne
 8009efc:	6059      	strne	r1, [r3, #4]
 8009efe:	6863      	ldr	r3, [r4, #4]
 8009f00:	bf08      	it	eq
 8009f02:	6031      	streq	r1, [r6, #0]
 8009f04:	5162      	str	r2, [r4, r5]
 8009f06:	604b      	str	r3, [r1, #4]
 8009f08:	4638      	mov	r0, r7
 8009f0a:	f104 060b 	add.w	r6, r4, #11
 8009f0e:	f000 f865 	bl	8009fdc <__malloc_unlock>
 8009f12:	f026 0607 	bic.w	r6, r6, #7
 8009f16:	1d23      	adds	r3, r4, #4
 8009f18:	1af2      	subs	r2, r6, r3
 8009f1a:	d0b6      	beq.n	8009e8a <_malloc_r+0x22>
 8009f1c:	1b9b      	subs	r3, r3, r6
 8009f1e:	50a3      	str	r3, [r4, r2]
 8009f20:	e7b3      	b.n	8009e8a <_malloc_r+0x22>
 8009f22:	6862      	ldr	r2, [r4, #4]
 8009f24:	42a3      	cmp	r3, r4
 8009f26:	bf0c      	ite	eq
 8009f28:	6032      	streq	r2, [r6, #0]
 8009f2a:	605a      	strne	r2, [r3, #4]
 8009f2c:	e7ec      	b.n	8009f08 <_malloc_r+0xa0>
 8009f2e:	4623      	mov	r3, r4
 8009f30:	6864      	ldr	r4, [r4, #4]
 8009f32:	e7b2      	b.n	8009e9a <_malloc_r+0x32>
 8009f34:	4634      	mov	r4, r6
 8009f36:	6876      	ldr	r6, [r6, #4]
 8009f38:	e7b9      	b.n	8009eae <_malloc_r+0x46>
 8009f3a:	230c      	movs	r3, #12
 8009f3c:	603b      	str	r3, [r7, #0]
 8009f3e:	4638      	mov	r0, r7
 8009f40:	f000 f84c 	bl	8009fdc <__malloc_unlock>
 8009f44:	e7a1      	b.n	8009e8a <_malloc_r+0x22>
 8009f46:	6025      	str	r5, [r4, #0]
 8009f48:	e7de      	b.n	8009f08 <_malloc_r+0xa0>
 8009f4a:	bf00      	nop
 8009f4c:	20008a20 	.word	0x20008a20

08009f50 <_realloc_r>:
 8009f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f54:	4680      	mov	r8, r0
 8009f56:	4614      	mov	r4, r2
 8009f58:	460e      	mov	r6, r1
 8009f5a:	b921      	cbnz	r1, 8009f66 <_realloc_r+0x16>
 8009f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f60:	4611      	mov	r1, r2
 8009f62:	f7ff bf81 	b.w	8009e68 <_malloc_r>
 8009f66:	b92a      	cbnz	r2, 8009f74 <_realloc_r+0x24>
 8009f68:	f7ff ff12 	bl	8009d90 <_free_r>
 8009f6c:	4625      	mov	r5, r4
 8009f6e:	4628      	mov	r0, r5
 8009f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f74:	f000 f838 	bl	8009fe8 <_malloc_usable_size_r>
 8009f78:	4284      	cmp	r4, r0
 8009f7a:	4607      	mov	r7, r0
 8009f7c:	d802      	bhi.n	8009f84 <_realloc_r+0x34>
 8009f7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f82:	d812      	bhi.n	8009faa <_realloc_r+0x5a>
 8009f84:	4621      	mov	r1, r4
 8009f86:	4640      	mov	r0, r8
 8009f88:	f7ff ff6e 	bl	8009e68 <_malloc_r>
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d0ed      	beq.n	8009f6e <_realloc_r+0x1e>
 8009f92:	42bc      	cmp	r4, r7
 8009f94:	4622      	mov	r2, r4
 8009f96:	4631      	mov	r1, r6
 8009f98:	bf28      	it	cs
 8009f9a:	463a      	movcs	r2, r7
 8009f9c:	f7ff fba4 	bl	80096e8 <memcpy>
 8009fa0:	4631      	mov	r1, r6
 8009fa2:	4640      	mov	r0, r8
 8009fa4:	f7ff fef4 	bl	8009d90 <_free_r>
 8009fa8:	e7e1      	b.n	8009f6e <_realloc_r+0x1e>
 8009faa:	4635      	mov	r5, r6
 8009fac:	e7df      	b.n	8009f6e <_realloc_r+0x1e>
	...

08009fb0 <_sbrk_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	4d06      	ldr	r5, [pc, #24]	; (8009fcc <_sbrk_r+0x1c>)
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	4608      	mov	r0, r1
 8009fba:	602b      	str	r3, [r5, #0]
 8009fbc:	f7f7 fcc8 	bl	8001950 <_sbrk>
 8009fc0:	1c43      	adds	r3, r0, #1
 8009fc2:	d102      	bne.n	8009fca <_sbrk_r+0x1a>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	b103      	cbz	r3, 8009fca <_sbrk_r+0x1a>
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	20008a28 	.word	0x20008a28

08009fd0 <__malloc_lock>:
 8009fd0:	4801      	ldr	r0, [pc, #4]	; (8009fd8 <__malloc_lock+0x8>)
 8009fd2:	f000 b811 	b.w	8009ff8 <__retarget_lock_acquire_recursive>
 8009fd6:	bf00      	nop
 8009fd8:	20008a2c 	.word	0x20008a2c

08009fdc <__malloc_unlock>:
 8009fdc:	4801      	ldr	r0, [pc, #4]	; (8009fe4 <__malloc_unlock+0x8>)
 8009fde:	f000 b80c 	b.w	8009ffa <__retarget_lock_release_recursive>
 8009fe2:	bf00      	nop
 8009fe4:	20008a2c 	.word	0x20008a2c

08009fe8 <_malloc_usable_size_r>:
 8009fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fec:	1f18      	subs	r0, r3, #4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	bfbc      	itt	lt
 8009ff2:	580b      	ldrlt	r3, [r1, r0]
 8009ff4:	18c0      	addlt	r0, r0, r3
 8009ff6:	4770      	bx	lr

08009ff8 <__retarget_lock_acquire_recursive>:
 8009ff8:	4770      	bx	lr

08009ffa <__retarget_lock_release_recursive>:
 8009ffa:	4770      	bx	lr

08009ffc <_init>:
 8009ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffe:	bf00      	nop
 800a000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a002:	bc08      	pop	{r3}
 800a004:	469e      	mov	lr, r3
 800a006:	4770      	bx	lr

0800a008 <_fini>:
 800a008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00a:	bf00      	nop
 800a00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a00e:	bc08      	pop	{r3}
 800a010:	469e      	mov	lr, r3
 800a012:	4770      	bx	lr
