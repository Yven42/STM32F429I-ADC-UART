
STM32F429I-ADC-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008804  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b1c  080089b4  080089b4  000189b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4d0  0800a4d0  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4d0  0800a4d0  0001a4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4d8  0800a4d8  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4d8  0800a4d8  0001a4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4dc  0800a4dc  0001a4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800a4e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020058  2**0
                  CONTENTS
 10 .bss          000088cc  20000058  20000058  00020058  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008924  20008924  00020058  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024074  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000477d  00000000  00000000  000440fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f10  00000000  00000000  00048880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d50  00000000  00000000  0004a790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002859e  00000000  00000000  0004c4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002296c  00000000  00000000  00074a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1d93  00000000  00000000  000973ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018917d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000083c4  00000000  00000000  001891d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000058 	.word	0x20000058
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800899c 	.word	0x0800899c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	0800899c 	.word	0x0800899c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <vApplicationGetIdleTaskMemory+0x2c>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <vApplicationGetIdleTaskMemory+0x30>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000074 	.word	0x20000074
 8000558:	200000cc 	.word	0x200000cc

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f002 fb33 	bl	8002bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f82d 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 fa9d 	bl	8000aa8 <MX_GPIO_Init>
  MX_CRC_Init();
 800056e:	f000 f895 	bl	800069c <MX_CRC_Init>
  MX_DMA2D_Init();
 8000572:	f000 f8a7 	bl	80006c4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000576:	f000 fa47 	bl	8000a08 <MX_FMC_Init>
  MX_I2C3_Init();
 800057a:	f000 f8d5 	bl	8000728 <MX_I2C3_Init>
  MX_LTDC_Init();
 800057e:	f000 f913 	bl	80007a8 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000582:	f000 f991 	bl	80008a8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000586:	f000 f9c5 	bl	8000914 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800058a:	f000 fa13 	bl	80009b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  DisplayInit();
 800058e:	f000 fbb9 	bl	8000d04 <DisplayInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of _DisplayTask */
  osThreadDef(_DisplayTask, DisplayTask, osPriorityNormal, 0, 4096);
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <main+0x60>)
 8000594:	1d3c      	adds	r4, r7, #4
 8000596:	461d      	mov	r5, r3
 8000598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  _DisplayTaskHandle = osThreadCreate(osThread(_DisplayTask), NULL);
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f006 ff68 	bl	800747e <osThreadCreate>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a03      	ldr	r2, [pc, #12]	; (80005c0 <main+0x64>)
 80005b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b4:	f006 ff5c 	bl	8007470 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0x5c>
 80005ba:	bf00      	nop
 80005bc:	080089c4 	.word	0x080089c4
 80005c0:	20000528 	.word	0x20000528

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f008 f9da 	bl	800898c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <SystemClock_Config+0xd0>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a28      	ldr	r2, [pc, #160]	; (8000694 <SystemClock_Config+0xd0>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b26      	ldr	r3, [pc, #152]	; (8000694 <SystemClock_Config+0xd0>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <SystemClock_Config+0xd4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <SystemClock_Config+0xd4>)
 8000612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <SystemClock_Config+0xd4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000638:	2308      	movs	r3, #8
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 800063c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000640:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000642:	2304      	movs	r3, #4
 8000644:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000646:	2308      	movs	r3, #8
 8000648:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	4618      	mov	r0, r3
 8000650:	f004 f99e 	bl	8004990 <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800065a:	f000 fbaf 	bl	8000dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2103      	movs	r1, #3
 800067c:	4618      	mov	r0, r3
 800067e:	f004 fbff 	bl	8004e80 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000688:	f000 fb98 	bl	8000dbc <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3750      	adds	r7, #80	; 0x50
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_CRC_Init+0x20>)
 80006a2:	4a07      	ldr	r2, [pc, #28]	; (80006c0 <MX_CRC_Init+0x24>)
 80006a4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_CRC_Init+0x20>)
 80006a8:	f002 fbd8 	bl	8002e5c <HAL_CRC_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006b2:	f000 fb83 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200002cc 	.word	0x200002cc
 80006c0:	40023000 	.word	0x40023000

080006c4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006ca:	4a16      	ldr	r2, [pc, #88]	; (8000724 <MX_DMA2D_Init+0x60>)
 80006cc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006fa:	f002 fd89 	bl	8003210 <HAL_DMA2D_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000704:	f000 fb5a 	bl	8000dbc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000708:	2101      	movs	r1, #1
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_DMA2D_Init+0x5c>)
 800070c:	f002 ffee 	bl	80036ec <HAL_DMA2D_ConfigLayer>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000716:	f000 fb51 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200002d4 	.word	0x200002d4
 8000724:	4002b000 	.word	0x4002b000

08000728 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_I2C3_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_I2C3_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_I2C3_Init+0x74>)
 8000734:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <MX_I2C3_Init+0x7c>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_I2C3_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_I2C3_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_I2C3_Init+0x74>)
 8000746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_I2C3_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2C3_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_I2C3_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_I2C3_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_I2C3_Init+0x74>)
 8000766:	f003 fbc1 	bl	8003eec <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 fb24 	bl	8000dbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000774:	2100      	movs	r1, #0
 8000776:	4809      	ldr	r0, [pc, #36]	; (800079c <MX_I2C3_Init+0x74>)
 8000778:	f003 fcfc 	bl	8004174 <HAL_I2CEx_ConfigAnalogFilter>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000782:	f000 fb1b 	bl	8000dbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_I2C3_Init+0x74>)
 800078a:	f003 fd2f 	bl	80041ec <HAL_I2CEx_ConfigDigitalFilter>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000794:	f000 fb12 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000314 	.word	0x20000314
 80007a0:	40005c00 	.word	0x40005c00
 80007a4:	000186a0 	.word	0x000186a0

080007a8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08e      	sub	sp, #56	; 0x38
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2234      	movs	r2, #52	; 0x34
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f008 f8e9 	bl	800898c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007ba:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <MX_LTDC_Init+0xf8>)
 80007bc:	4a39      	ldr	r2, [pc, #228]	; (80008a4 <MX_LTDC_Init+0xfc>)
 80007be:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007c0:	4b37      	ldr	r3, [pc, #220]	; (80008a0 <MX_LTDC_Init+0xf8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007c6:	4b36      	ldr	r3, [pc, #216]	; (80008a0 <MX_LTDC_Init+0xf8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007cc:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <MX_LTDC_Init+0xf8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007d2:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <MX_LTDC_Init+0xf8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007d8:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <MX_LTDC_Init+0xf8>)
 80007da:	2209      	movs	r2, #9
 80007dc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007de:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <MX_LTDC_Init+0xf8>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007e4:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MX_LTDC_Init+0xf8>)
 80007e6:	221d      	movs	r2, #29
 80007e8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <MX_LTDC_Init+0xf8>)
 80007ec:	2203      	movs	r2, #3
 80007ee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007f0:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_LTDC_Init+0xf8>)
 80007f2:	f240 120d 	movw	r2, #269	; 0x10d
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_LTDC_Init+0xf8>)
 80007fa:	f240 1243 	movw	r2, #323	; 0x143
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <MX_LTDC_Init+0xf8>)
 8000802:	f240 1217 	movw	r2, #279	; 0x117
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000808:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <MX_LTDC_Init+0xf8>)
 800080a:	f240 1247 	movw	r2, #327	; 0x147
 800080e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000810:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_LTDC_Init+0xf8>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000818:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <MX_LTDC_Init+0xf8>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_LTDC_Init+0xf8>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000828:	481d      	ldr	r0, [pc, #116]	; (80008a0 <MX_LTDC_Init+0xf8>)
 800082a:	f003 fd1f 	bl	800426c <HAL_LTDC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000834:	f000 fac2 	bl	8000dbc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800083c:	23f0      	movs	r3, #240	; 0xf0
 800083e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000844:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000848:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800084a:	2302      	movs	r3, #2
 800084c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800084e:	23ff      	movs	r3, #255	; 0xff
 8000850:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000856:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800085a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800085c:	2307      	movs	r3, #7
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000860:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000866:	23f0      	movs	r3, #240	; 0xf0
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800086a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_LTDC_Init+0xf8>)
 800088a:	f003 fe81 	bl	8004590 <HAL_LTDC_ConfigLayer>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000894:	f000 fa92 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3738      	adds	r7, #56	; 0x38
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000368 	.word	0x20000368
 80008a4:	40016800 	.word	0x40016800

080008a8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_SPI5_Init+0x64>)
 80008ae:	4a18      	ldr	r2, [pc, #96]	; (8000910 <MX_SPI5_Init+0x68>)
 80008b0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_SPI5_Init+0x64>)
 80008b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_SPI5_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_SPI5_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_SPI5_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_SPI5_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_SPI5_Init+0x64>)
 80008d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_SPI5_Init+0x64>)
 80008dc:	2218      	movs	r2, #24
 80008de:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <MX_SPI5_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_SPI5_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <MX_SPI5_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_SPI5_Init+0x64>)
 80008f4:	220a      	movs	r2, #10
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_SPI5_Init+0x64>)
 80008fa:	f004 ff64 	bl	80057c6 <HAL_SPI_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000904:	f000 fa5a 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000410 	.word	0x20000410
 8000910:	40015000 	.word	0x40015000

08000914 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	463b      	mov	r3, r7
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000930:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <MX_TIM1_Init+0x98>)
 8000932:	4a1f      	ldr	r2, [pc, #124]	; (80009b0 <MX_TIM1_Init+0x9c>)
 8000934:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_TIM1_Init+0x98>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <MX_TIM1_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000942:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_TIM1_Init+0x98>)
 8000944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000948:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <MX_TIM1_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_TIM1_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_TIM1_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800095c:	4813      	ldr	r0, [pc, #76]	; (80009ac <MX_TIM1_Init+0x98>)
 800095e:	f005 fd11 	bl	8006384 <HAL_TIM_Base_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000968:	f000 fa28 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000970:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	4619      	mov	r1, r3
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <MX_TIM1_Init+0x98>)
 800097a:	f005 fecb 	bl	8006714 <HAL_TIM_ConfigClockSource>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000984:	f000 fa1a 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000988:	2300      	movs	r3, #0
 800098a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000990:	463b      	mov	r3, r7
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_TIM1_Init+0x98>)
 8000996:	f006 f8e7 	bl	8006b68 <HAL_TIMEx_MasterConfigSynchronization>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009a0:	f000 fa0c 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000468 	.word	0x20000468
 80009b0:	40010000 	.word	0x40010000

080009b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <MX_USART1_UART_Init+0x50>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009ec:	f006 f94c 	bl	8006c88 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009f6:	f000 f9e1 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200004b0 	.word	0x200004b0
 8000a04:	40011000 	.word	0x40011000

08000a08 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
 8000a1c:	615a      	str	r2, [r3, #20]
 8000a1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_FMC_Init+0x98>)
 8000a22:	4a20      	ldr	r2, [pc, #128]	; (8000aa4 <MX_FMC_Init+0x9c>)
 8000a24:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <MX_FMC_Init+0x98>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_FMC_Init+0x98>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_FMC_Init+0x98>)
 8000a34:	2204      	movs	r2, #4
 8000a36:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_FMC_Init+0x98>)
 8000a3a:	2210      	movs	r2, #16
 8000a3c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_FMC_Init+0x98>)
 8000a40:	2240      	movs	r2, #64	; 0x40
 8000a42:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_FMC_Init+0x98>)
 8000a46:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a4a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_FMC_Init+0x98>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_FMC_Init+0x98>)
 8000a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a58:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_FMC_Init+0x98>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_FMC_Init+0x98>)
 8000a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a70:	2304      	movs	r3, #4
 8000a72:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a74:	2307      	movs	r3, #7
 8000a76:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_FMC_Init+0x98>)
 8000a8a:	f004 fe0b 	bl	80056a4 <HAL_SDRAM_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a94:	f000 f992 	bl	8000dbc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a98:	bf00      	nop
 8000a9a:	3720      	adds	r7, #32
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200004f4 	.word	0x200004f4
 8000aa4:	a0000140 	.word	0xa0000140

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	; 0x38
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
 8000ac2:	4b8a      	ldr	r3, [pc, #552]	; (8000cec <MX_GPIO_Init+0x244>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a89      	ldr	r2, [pc, #548]	; (8000cec <MX_GPIO_Init+0x244>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b87      	ldr	r3, [pc, #540]	; (8000cec <MX_GPIO_Init+0x244>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	623b      	str	r3, [r7, #32]
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
 8000ade:	4b83      	ldr	r3, [pc, #524]	; (8000cec <MX_GPIO_Init+0x244>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a82      	ldr	r2, [pc, #520]	; (8000cec <MX_GPIO_Init+0x244>)
 8000ae4:	f043 0320 	orr.w	r3, r3, #32
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b80      	ldr	r3, [pc, #512]	; (8000cec <MX_GPIO_Init+0x244>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0320 	and.w	r3, r3, #32
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
 8000afa:	4b7c      	ldr	r3, [pc, #496]	; (8000cec <MX_GPIO_Init+0x244>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a7b      	ldr	r2, [pc, #492]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b79      	ldr	r3, [pc, #484]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0e:	61bb      	str	r3, [r7, #24]
 8000b10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	4b75      	ldr	r3, [pc, #468]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a74      	ldr	r2, [pc, #464]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b72      	ldr	r3, [pc, #456]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b6e      	ldr	r3, [pc, #440]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a6d      	ldr	r2, [pc, #436]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b6b      	ldr	r3, [pc, #428]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b67      	ldr	r3, [pc, #412]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a66      	ldr	r2, [pc, #408]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b64      	ldr	r3, [pc, #400]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	4b60      	ldr	r3, [pc, #384]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a5f      	ldr	r2, [pc, #380]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b70:	f043 0310 	orr.w	r3, r3, #16
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b5d      	ldr	r3, [pc, #372]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0310 	and.w	r3, r3, #16
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b59      	ldr	r3, [pc, #356]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a58      	ldr	r2, [pc, #352]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b8c:	f043 0308 	orr.w	r3, r3, #8
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b56      	ldr	r3, [pc, #344]	; (8000cec <MX_GPIO_Init+0x244>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0308 	and.w	r3, r3, #8
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2116      	movs	r1, #22
 8000ba2:	4853      	ldr	r0, [pc, #332]	; (8000cf0 <MX_GPIO_Init+0x248>)
 8000ba4:	f003 f988 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2180      	movs	r1, #128	; 0x80
 8000bac:	4851      	ldr	r0, [pc, #324]	; (8000cf4 <MX_GPIO_Init+0x24c>)
 8000bae:	f003 f983 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000bb8:	484f      	ldr	r0, [pc, #316]	; (8000cf8 <MX_GPIO_Init+0x250>)
 8000bba:	f003 f97d 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000bc4:	484d      	ldr	r0, [pc, #308]	; (8000cfc <MX_GPIO_Init+0x254>)
 8000bc6:	f003 f977 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000bca:	2316      	movs	r3, #22
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	4843      	ldr	r0, [pc, #268]	; (8000cf0 <MX_GPIO_Init+0x248>)
 8000be2:	f002 feb1 	bl	8003948 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000be6:	f248 0307 	movw	r3, #32775	; 0x8007
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	483d      	ldr	r0, [pc, #244]	; (8000cf4 <MX_GPIO_Init+0x24c>)
 8000bfe:	f002 fea3 	bl	8003948 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	4836      	ldr	r0, [pc, #216]	; (8000cf4 <MX_GPIO_Init+0x24c>)
 8000c1a:	f002 fe95 	bl	8003948 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c1e:	2320      	movs	r3, #32
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c22:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	482f      	ldr	r0, [pc, #188]	; (8000cf0 <MX_GPIO_Init+0x248>)
 8000c34:	f002 fe88 	bl	8003948 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	482d      	ldr	r0, [pc, #180]	; (8000d00 <MX_GPIO_Init+0x258>)
 8000c4c:	f002 fe7c 	bl	8003948 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000c50:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000c62:	230c      	movs	r3, #12
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4824      	ldr	r0, [pc, #144]	; (8000d00 <MX_GPIO_Init+0x258>)
 8000c6e:	f002 fe6b 	bl	8003948 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000c72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	481e      	ldr	r0, [pc, #120]	; (8000d00 <MX_GPIO_Init+0x258>)
 8000c88:	f002 fe5e 	bl	8003948 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4815      	ldr	r0, [pc, #84]	; (8000cf8 <MX_GPIO_Init+0x250>)
 8000ca2:	f002 fe51 	bl	8003948 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000ca6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480e      	ldr	r0, [pc, #56]	; (8000cf8 <MX_GPIO_Init+0x250>)
 8000cc0:	f002 fe42 	bl	8003948 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000cc4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4807      	ldr	r0, [pc, #28]	; (8000cfc <MX_GPIO_Init+0x254>)
 8000cde:	f002 fe33 	bl	8003948 <HAL_GPIO_Init>

}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	; 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020c00 	.word	0x40020c00
 8000cfc:	40021800 	.word	0x40021800
 8000d00:	40020400 	.word	0x40020400

08000d04 <DisplayInit>:

/* USER CODE BEGIN 4 */
static void DisplayInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 8000d08:	f001 f820 	bl	8001d4c <BSP_LCD_Init>

	//Start Screen
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 8000d0c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000d10:	2000      	movs	r0, #0
 8000d12:	f001 f89d 	bl	8001e50 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 8000d16:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f001 f898 	bl	8001e50 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f001 f8f9 	bl	8001f18 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8000d26:	f001 fb89 	bl	800243c <BSP_LCD_DisplayOn>

	BSP_LCD_Clear(LCD_COLOR_ORANGE);
 8000d2a:	4814      	ldr	r0, [pc, #80]	; (8000d7c <DisplayInit+0x78>)
 8000d2c:	f001 f950 	bl	8001fd0 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f001 f900 	bl	8001f38 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f001 f914 	bl	8001f68 <BSP_LCD_SetBackColor>
	BSP_LCD_FillRect(10, 10, 220, 80);
 8000d40:	2350      	movs	r3, #80	; 0x50
 8000d42:	22dc      	movs	r2, #220	; 0xdc
 8000d44:	210a      	movs	r1, #10
 8000d46:	200a      	movs	r0, #10
 8000d48:	f001 fb1e 	bl	8002388 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000d4c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000d50:	f001 f8f2 	bl	8001f38 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(10, 10, 220, 80);
 8000d54:	2350      	movs	r3, #80	; 0x50
 8000d56:	22dc      	movs	r2, #220	; 0xdc
 8000d58:	210a      	movs	r1, #10
 8000d5a:	200a      	movs	r0, #10
 8000d5c:	f001 fae2 	bl	8002324 <BSP_LCD_DrawRect>

	BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"Embedded", CENTER_MODE);
 8000d60:	2301      	movs	r3, #1
 8000d62:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <DisplayInit+0x7c>)
 8000d64:	211e      	movs	r1, #30
 8000d66:	2000      	movs	r0, #0
 8000d68:	f001 f99e 	bl	80020a8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 50, (uint8_t*)"KI", CENTER_MODE);
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <DisplayInit+0x80>)
 8000d70:	2132      	movs	r1, #50	; 0x32
 8000d72:	2000      	movs	r0, #0
 8000d74:	f001 f998 	bl	80020a8 <BSP_LCD_DisplayStringAt>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	ffffa500 	.word	0xffffa500
 8000d80:	080089e0 	.word	0x080089e0
 8000d84:	080089ec 	.word	0x080089ec

08000d88 <DisplayTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DisplayTask */
void DisplayTask(void const * argument)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f006 fbc0 	bl	8007516 <osDelay>
 8000d96:	e7fb      	b.n	8000d90 <DisplayTask+0x8>

08000d98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d101      	bne.n	8000dae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000daa:	f001 ff31 	bl	8002c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40001000 	.word	0x40001000

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>
	...

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_MspInit+0x54>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a11      	ldr	r2, [pc, #68]	; (8000e1c <HAL_MspInit+0x54>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_MspInit+0x54>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_MspInit+0x54>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_MspInit+0x54>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_MspInit+0x54>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	210f      	movs	r1, #15
 8000e0a:	f06f 0001 	mvn.w	r0, #1
 8000e0e:	f001 fffb 	bl	8002e08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800

08000e20 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <HAL_CRC_MspInit+0x3c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d10d      	bne.n	8000e4e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_CRC_MspInit+0x40>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <HAL_CRC_MspInit+0x40>)
 8000e3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <HAL_CRC_MspInit+0x40>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40023000 	.word	0x40023000
 8000e60:	40023800 	.word	0x40023800

08000e64 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_DMA2D_MspInit+0x48>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d115      	bne.n	8000ea2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_DMA2D_MspInit+0x4c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <HAL_DMA2D_MspInit+0x4c>)
 8000e80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_DMA2D_MspInit+0x4c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2105      	movs	r1, #5
 8000e96:	205a      	movs	r0, #90	; 0x5a
 8000e98:	f001 ffb6 	bl	8002e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e9c:	205a      	movs	r0, #90	; 0x5a
 8000e9e:	f001 ffcf 	bl	8002e40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	4002b000 	.word	0x4002b000
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a29      	ldr	r2, [pc, #164]	; (8000f78 <HAL_I2C_MspInit+0xc4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d14b      	bne.n	8000f6e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a20      	ldr	r2, [pc, #128]	; (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f14:	2312      	movs	r3, #18
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f20:	2304      	movs	r3, #4
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4815      	ldr	r0, [pc, #84]	; (8000f80 <HAL_I2C_MspInit+0xcc>)
 8000f2c:	f002 fd0c 	bl	8003948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f36:	2312      	movs	r3, #18
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f42:	2304      	movs	r3, #4
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <HAL_I2C_MspInit+0xd0>)
 8000f4e:	f002 fcfb 	bl	8003948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000f5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f60:	6413      	str	r3, [r2, #64]	; 0x40
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40005c00 	.word	0x40005c00
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020800 	.word	0x40020800
 8000f84:	40020000 	.word	0x40020000

08000f88 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b09a      	sub	sp, #104	; 0x68
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa4:	2230      	movs	r2, #48	; 0x30
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f007 fcef 	bl	800898c <memset>
  if(hltdc->Instance==LTDC)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a85      	ldr	r2, [pc, #532]	; (80011c8 <HAL_LTDC_MspInit+0x240>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	f040 8103 	bne.w	80011c0 <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fba:	2308      	movs	r3, #8
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000fbe:	23c0      	movs	r3, #192	; 0xc0
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fca:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 f9a7 	bl	8005324 <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8000fdc:	f7ff feee 	bl	8000dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
 8000fe4:	4b79      	ldr	r3, [pc, #484]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 8000fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe8:	4a78      	ldr	r2, [pc, #480]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 8000fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fee:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff0:	4b76      	ldr	r3, [pc, #472]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 8000ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ff8:	623b      	str	r3, [r7, #32]
 8000ffa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	4b72      	ldr	r3, [pc, #456]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a71      	ldr	r2, [pc, #452]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 8001006:	f043 0320 	orr.w	r3, r3, #32
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
 800100c:	4b6f      	ldr	r3, [pc, #444]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
 800101c:	4b6b      	ldr	r3, [pc, #428]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	4a6a      	ldr	r2, [pc, #424]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6313      	str	r3, [r2, #48]	; 0x30
 8001028:	4b68      	ldr	r3, [pc, #416]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	4b64      	ldr	r3, [pc, #400]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	4a63      	ldr	r2, [pc, #396]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	6313      	str	r3, [r2, #48]	; 0x30
 8001044:	4b61      	ldr	r3, [pc, #388]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	4b5d      	ldr	r3, [pc, #372]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	4a5c      	ldr	r2, [pc, #368]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 800105a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800105e:	6313      	str	r3, [r2, #48]	; 0x30
 8001060:	4b5a      	ldr	r3, [pc, #360]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	4b56      	ldr	r3, [pc, #344]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	4a55      	ldr	r2, [pc, #340]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6313      	str	r3, [r2, #48]	; 0x30
 800107c:	4b53      	ldr	r3, [pc, #332]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	4b4f      	ldr	r3, [pc, #316]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	4a4e      	ldr	r2, [pc, #312]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6313      	str	r3, [r2, #48]	; 0x30
 8001098:	4b4c      	ldr	r3, [pc, #304]	; (80011cc <HAL_LTDC_MspInit+0x244>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80010a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010b6:	230e      	movs	r3, #14
 80010b8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010be:	4619      	mov	r1, r3
 80010c0:	4843      	ldr	r0, [pc, #268]	; (80011d0 <HAL_LTDC_MspInit+0x248>)
 80010c2:	f002 fc41 	bl	8003948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80010c6:	f641 0358 	movw	r3, #6232	; 0x1858
 80010ca:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010d8:	230e      	movs	r3, #14
 80010da:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010e0:	4619      	mov	r1, r3
 80010e2:	483c      	ldr	r0, [pc, #240]	; (80011d4 <HAL_LTDC_MspInit+0x24c>)
 80010e4:	f002 fc30 	bl	8003948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80010e8:	2303      	movs	r3, #3
 80010ea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010f8:	2309      	movs	r3, #9
 80010fa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001100:	4619      	mov	r1, r3
 8001102:	4835      	ldr	r0, [pc, #212]	; (80011d8 <HAL_LTDC_MspInit+0x250>)
 8001104:	f002 fc20 	bl	8003948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001108:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800110c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800111a:	230e      	movs	r3, #14
 800111c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001122:	4619      	mov	r1, r3
 8001124:	482c      	ldr	r0, [pc, #176]	; (80011d8 <HAL_LTDC_MspInit+0x250>)
 8001126:	f002 fc0f 	bl	8003948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800112a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800112e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800113c:	230e      	movs	r3, #14
 800113e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001140:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001144:	4619      	mov	r1, r3
 8001146:	4825      	ldr	r0, [pc, #148]	; (80011dc <HAL_LTDC_MspInit+0x254>)
 8001148:	f002 fbfe 	bl	8003948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800114c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001150:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800115e:	230e      	movs	r3, #14
 8001160:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001162:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001166:	4619      	mov	r1, r3
 8001168:	481d      	ldr	r0, [pc, #116]	; (80011e0 <HAL_LTDC_MspInit+0x258>)
 800116a:	f002 fbed 	bl	8003948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800116e:	2348      	movs	r3, #72	; 0x48
 8001170:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800117e:	230e      	movs	r3, #14
 8001180:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001182:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001186:	4619      	mov	r1, r3
 8001188:	4816      	ldr	r0, [pc, #88]	; (80011e4 <HAL_LTDC_MspInit+0x25c>)
 800118a:	f002 fbdd 	bl	8003948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800118e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001192:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011a0:	2309      	movs	r3, #9
 80011a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011a8:	4619      	mov	r1, r3
 80011aa:	480c      	ldr	r0, [pc, #48]	; (80011dc <HAL_LTDC_MspInit+0x254>)
 80011ac:	f002 fbcc 	bl	8003948 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2105      	movs	r1, #5
 80011b4:	2058      	movs	r0, #88	; 0x58
 80011b6:	f001 fe27 	bl	8002e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011ba:	2058      	movs	r0, #88	; 0x58
 80011bc:	f001 fe40 	bl	8002e40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80011c0:	bf00      	nop
 80011c2:	3768      	adds	r7, #104	; 0x68
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40016800 	.word	0x40016800
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40021400 	.word	0x40021400
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40021800 	.word	0x40021800
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020c00 	.word	0x40020c00

080011e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a19      	ldr	r2, [pc, #100]	; (800126c <HAL_SPI_MspInit+0x84>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d12c      	bne.n	8001264 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <HAL_SPI_MspInit+0x88>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a17      	ldr	r2, [pc, #92]	; (8001270 <HAL_SPI_MspInit+0x88>)
 8001214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_SPI_MspInit+0x88>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_SPI_MspInit+0x88>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <HAL_SPI_MspInit+0x88>)
 8001230:	f043 0320 	orr.w	r3, r3, #32
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_SPI_MspInit+0x88>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001242:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001254:	2305      	movs	r3, #5
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <HAL_SPI_MspInit+0x8c>)
 8001260:	f002 fb72 	bl	8003948 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001264:	bf00      	nop
 8001266:	3728      	adds	r7, #40	; 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40015000 	.word	0x40015000
 8001270:	40023800 	.word	0x40023800
 8001274:	40021400 	.word	0x40021400

08001278 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <HAL_SPI_MspDeInit+0x30>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d10a      	bne.n	80012a0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_SPI_MspDeInit+0x34>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_SPI_MspDeInit+0x34>)
 8001290:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001296:	f44f 7160 	mov.w	r1, #896	; 0x380
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <HAL_SPI_MspDeInit+0x38>)
 800129c:	f002 fd00 	bl	8003ca0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40015000 	.word	0x40015000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40021400 	.word	0x40021400

080012b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <HAL_TIM_Base_MspInit+0x3c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d10d      	bne.n	80012e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_TIM_Base_MspInit+0x40>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <HAL_TIM_Base_MspInit+0x40>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <HAL_TIM_Base_MspInit+0x40>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40010000 	.word	0x40010000
 80012f4:	40023800 	.word	0x40023800

080012f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a19      	ldr	r2, [pc, #100]	; (800137c <HAL_UART_MspInit+0x84>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d12c      	bne.n	8001374 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <HAL_UART_MspInit+0x88>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a17      	ldr	r2, [pc, #92]	; (8001380 <HAL_UART_MspInit+0x88>)
 8001324:	f043 0310 	orr.w	r3, r3, #16
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_UART_MspInit+0x88>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_UART_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a10      	ldr	r2, [pc, #64]	; (8001380 <HAL_UART_MspInit+0x88>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_UART_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001352:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001364:	2307      	movs	r3, #7
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <HAL_UART_MspInit+0x8c>)
 8001370:	f002 faea 	bl	8003948 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001374:	bf00      	nop
 8001376:	3728      	adds	r7, #40	; 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40011000 	.word	0x40011000
 8001380:	40023800 	.word	0x40023800
 8001384:	40020000 	.word	0x40020000

08001388 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800139c:	4b3b      	ldr	r3, [pc, #236]	; (800148c <HAL_FMC_MspInit+0x104>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d16f      	bne.n	8001484 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80013a4:	4b39      	ldr	r3, [pc, #228]	; (800148c <HAL_FMC_MspInit+0x104>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	4b38      	ldr	r3, [pc, #224]	; (8001490 <HAL_FMC_MspInit+0x108>)
 80013b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b2:	4a37      	ldr	r2, [pc, #220]	; (8001490 <HAL_FMC_MspInit+0x108>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6393      	str	r3, [r2, #56]	; 0x38
 80013ba:	4b35      	ldr	r3, [pc, #212]	; (8001490 <HAL_FMC_MspInit+0x108>)
 80013bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80013c6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80013ca:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013d8:	230c      	movs	r3, #12
 80013da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	482c      	ldr	r0, [pc, #176]	; (8001494 <HAL_FMC_MspInit+0x10c>)
 80013e2:	f002 fab1 	bl	8003948 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80013e6:	2301      	movs	r3, #1
 80013e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f6:	230c      	movs	r3, #12
 80013f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4619      	mov	r1, r3
 80013fe:	4826      	ldr	r0, [pc, #152]	; (8001498 <HAL_FMC_MspInit+0x110>)
 8001400:	f002 faa2 	bl	8003948 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001404:	f248 1333 	movw	r3, #33075	; 0x8133
 8001408:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001416:	230c      	movs	r3, #12
 8001418:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	4619      	mov	r1, r3
 800141e:	481f      	ldr	r0, [pc, #124]	; (800149c <HAL_FMC_MspInit+0x114>)
 8001420:	f002 fa92 	bl	8003948 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001424:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001428:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001436:	230c      	movs	r3, #12
 8001438:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4818      	ldr	r0, [pc, #96]	; (80014a0 <HAL_FMC_MspInit+0x118>)
 8001440:	f002 fa82 	bl	8003948 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001444:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001448:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001456:	230c      	movs	r3, #12
 8001458:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4619      	mov	r1, r3
 800145e:	4811      	ldr	r0, [pc, #68]	; (80014a4 <HAL_FMC_MspInit+0x11c>)
 8001460:	f002 fa72 	bl	8003948 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001464:	2360      	movs	r3, #96	; 0x60
 8001466:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001474:	230c      	movs	r3, #12
 8001476:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4619      	mov	r1, r3
 800147c:	480a      	ldr	r0, [pc, #40]	; (80014a8 <HAL_FMC_MspInit+0x120>)
 800147e:	f002 fa63 	bl	8003948 <HAL_GPIO_Init>
 8001482:	e000      	b.n	8001486 <HAL_FMC_MspInit+0xfe>
    return;
 8001484:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	2000052c 	.word	0x2000052c
 8001490:	40023800 	.word	0x40023800
 8001494:	40021400 	.word	0x40021400
 8001498:	40020800 	.word	0x40020800
 800149c:	40021800 	.word	0x40021800
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40020c00 	.word	0x40020c00
 80014a8:	40020400 	.word	0x40020400

080014ac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80014b4:	f7ff ff68 	bl	8001388 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08e      	sub	sp, #56	; 0x38
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <HAL_InitTick+0xe4>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	4a32      	ldr	r2, [pc, #200]	; (80015a4 <HAL_InitTick+0xe4>)
 80014da:	f043 0310 	orr.w	r3, r3, #16
 80014de:	6413      	str	r3, [r2, #64]	; 0x40
 80014e0:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <HAL_InitTick+0xe4>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014ec:	f107 0210 	add.w	r2, r7, #16
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 fee2 	bl	80052c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001502:	2b00      	cmp	r3, #0
 8001504:	d103      	bne.n	800150e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001506:	f003 feb3 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 800150a:	6378      	str	r0, [r7, #52]	; 0x34
 800150c:	e004      	b.n	8001518 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800150e:	f003 feaf 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8001512:	4603      	mov	r3, r0
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800151a:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <HAL_InitTick+0xe8>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	0c9b      	lsrs	r3, r3, #18
 8001522:	3b01      	subs	r3, #1
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <HAL_InitTick+0xec>)
 8001528:	4a21      	ldr	r2, [pc, #132]	; (80015b0 <HAL_InitTick+0xf0>)
 800152a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <HAL_InitTick+0xec>)
 800152e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001532:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001534:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <HAL_InitTick+0xec>)
 8001536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001538:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <HAL_InitTick+0xec>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <HAL_InitTick+0xec>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_InitTick+0xec>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800154c:	4817      	ldr	r0, [pc, #92]	; (80015ac <HAL_InitTick+0xec>)
 800154e:	f004 ff19 	bl	8006384 <HAL_TIM_Base_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001558:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800155c:	2b00      	cmp	r3, #0
 800155e:	d11b      	bne.n	8001598 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001560:	4812      	ldr	r0, [pc, #72]	; (80015ac <HAL_InitTick+0xec>)
 8001562:	f004 ff5f 	bl	8006424 <HAL_TIM_Base_Start_IT>
 8001566:	4603      	mov	r3, r0
 8001568:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800156c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001570:	2b00      	cmp	r3, #0
 8001572:	d111      	bne.n	8001598 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001574:	2036      	movs	r0, #54	; 0x36
 8001576:	f001 fc63 	bl	8002e40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d808      	bhi.n	8001592 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	2036      	movs	r0, #54	; 0x36
 8001586:	f001 fc3f 	bl	8002e08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <HAL_InitTick+0xf4>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	e002      	b.n	8001598 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001598:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800159c:	4618      	mov	r0, r3
 800159e:	3738      	adds	r7, #56	; 0x38
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	431bde83 	.word	0x431bde83
 80015ac:	20000530 	.word	0x20000530
 80015b0:	40001000 	.word	0x40001000
 80015b4:	2000004c 	.word	0x2000004c

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <TIM6_DAC_IRQHandler+0x10>)
 80015ea:	f004 ff8b 	bl	8006504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000530 	.word	0x20000530

080015f8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <LTDC_IRQHandler+0x10>)
 80015fe:	f002 ff05 	bl	800440c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000368 	.word	0x20000368

0800160c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <DMA2D_IRQHandler+0x10>)
 8001612:	f001 ff5a 	bl	80034ca <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200002d4 	.word	0x200002d4

08001620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <SystemInit+0x20>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <SystemInit+0x20>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800167c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800164a:	490e      	ldr	r1, [pc, #56]	; (8001684 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001660:	4c0b      	ldr	r4, [pc, #44]	; (8001690 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800166e:	f7ff ffd7 	bl	8001620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001672:	f007 f967 	bl	8008944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001676:	f7fe ff71 	bl	800055c <main>
  bx  lr    
 800167a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800167c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001684:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001688:	0800a4e0 	.word	0x0800a4e0
  ldr r2, =_sbss
 800168c:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001690:	20008924 	.word	0x20008924

08001694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC_IRQHandler>

08001696 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800169a:	f000 fa5d 	bl	8001b58 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800169e:	20ca      	movs	r0, #202	; 0xca
 80016a0:	f000 f95d 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80016a4:	20c3      	movs	r0, #195	; 0xc3
 80016a6:	f000 f967 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80016aa:	2008      	movs	r0, #8
 80016ac:	f000 f964 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80016b0:	2050      	movs	r0, #80	; 0x50
 80016b2:	f000 f961 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80016b6:	20cf      	movs	r0, #207	; 0xcf
 80016b8:	f000 f951 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80016bc:	2000      	movs	r0, #0
 80016be:	f000 f95b 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80016c2:	20c1      	movs	r0, #193	; 0xc1
 80016c4:	f000 f958 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80016c8:	2030      	movs	r0, #48	; 0x30
 80016ca:	f000 f955 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80016ce:	20ed      	movs	r0, #237	; 0xed
 80016d0:	f000 f945 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80016d4:	2064      	movs	r0, #100	; 0x64
 80016d6:	f000 f94f 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80016da:	2003      	movs	r0, #3
 80016dc:	f000 f94c 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80016e0:	2012      	movs	r0, #18
 80016e2:	f000 f949 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80016e6:	2081      	movs	r0, #129	; 0x81
 80016e8:	f000 f946 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80016ec:	20e8      	movs	r0, #232	; 0xe8
 80016ee:	f000 f936 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80016f2:	2085      	movs	r0, #133	; 0x85
 80016f4:	f000 f940 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80016f8:	2000      	movs	r0, #0
 80016fa:	f000 f93d 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80016fe:	2078      	movs	r0, #120	; 0x78
 8001700:	f000 f93a 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001704:	20cb      	movs	r0, #203	; 0xcb
 8001706:	f000 f92a 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800170a:	2039      	movs	r0, #57	; 0x39
 800170c:	f000 f934 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001710:	202c      	movs	r0, #44	; 0x2c
 8001712:	f000 f931 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001716:	2000      	movs	r0, #0
 8001718:	f000 f92e 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800171c:	2034      	movs	r0, #52	; 0x34
 800171e:	f000 f92b 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001722:	2002      	movs	r0, #2
 8001724:	f000 f928 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001728:	20f7      	movs	r0, #247	; 0xf7
 800172a:	f000 f918 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800172e:	2020      	movs	r0, #32
 8001730:	f000 f922 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001734:	20ea      	movs	r0, #234	; 0xea
 8001736:	f000 f912 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800173a:	2000      	movs	r0, #0
 800173c:	f000 f91c 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001740:	2000      	movs	r0, #0
 8001742:	f000 f919 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001746:	20b1      	movs	r0, #177	; 0xb1
 8001748:	f000 f909 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800174c:	2000      	movs	r0, #0
 800174e:	f000 f913 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001752:	201b      	movs	r0, #27
 8001754:	f000 f910 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001758:	20b6      	movs	r0, #182	; 0xb6
 800175a:	f000 f900 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800175e:	200a      	movs	r0, #10
 8001760:	f000 f90a 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001764:	20a2      	movs	r0, #162	; 0xa2
 8001766:	f000 f907 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800176a:	20c0      	movs	r0, #192	; 0xc0
 800176c:	f000 f8f7 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001770:	2010      	movs	r0, #16
 8001772:	f000 f901 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001776:	20c1      	movs	r0, #193	; 0xc1
 8001778:	f000 f8f1 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800177c:	2010      	movs	r0, #16
 800177e:	f000 f8fb 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001782:	20c5      	movs	r0, #197	; 0xc5
 8001784:	f000 f8eb 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001788:	2045      	movs	r0, #69	; 0x45
 800178a:	f000 f8f5 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800178e:	2015      	movs	r0, #21
 8001790:	f000 f8f2 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001794:	20c7      	movs	r0, #199	; 0xc7
 8001796:	f000 f8e2 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800179a:	2090      	movs	r0, #144	; 0x90
 800179c:	f000 f8ec 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80017a0:	2036      	movs	r0, #54	; 0x36
 80017a2:	f000 f8dc 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80017a6:	20c8      	movs	r0, #200	; 0xc8
 80017a8:	f000 f8e6 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80017ac:	20f2      	movs	r0, #242	; 0xf2
 80017ae:	f000 f8d6 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017b2:	2000      	movs	r0, #0
 80017b4:	f000 f8e0 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80017b8:	20b0      	movs	r0, #176	; 0xb0
 80017ba:	f000 f8d0 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80017be:	20c2      	movs	r0, #194	; 0xc2
 80017c0:	f000 f8da 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80017c4:	20b6      	movs	r0, #182	; 0xb6
 80017c6:	f000 f8ca 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80017ca:	200a      	movs	r0, #10
 80017cc:	f000 f8d4 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80017d0:	20a7      	movs	r0, #167	; 0xa7
 80017d2:	f000 f8d1 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80017d6:	2027      	movs	r0, #39	; 0x27
 80017d8:	f000 f8ce 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80017dc:	2004      	movs	r0, #4
 80017de:	f000 f8cb 	bl	8001978 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80017e2:	202a      	movs	r0, #42	; 0x2a
 80017e4:	f000 f8bb 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017e8:	2000      	movs	r0, #0
 80017ea:	f000 f8c5 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017ee:	2000      	movs	r0, #0
 80017f0:	f000 f8c2 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017f4:	2000      	movs	r0, #0
 80017f6:	f000 f8bf 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80017fa:	20ef      	movs	r0, #239	; 0xef
 80017fc:	f000 f8bc 	bl	8001978 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001800:	202b      	movs	r0, #43	; 0x2b
 8001802:	f000 f8ac 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001806:	2000      	movs	r0, #0
 8001808:	f000 f8b6 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800180c:	2000      	movs	r0, #0
 800180e:	f000 f8b3 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001812:	2001      	movs	r0, #1
 8001814:	f000 f8b0 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001818:	203f      	movs	r0, #63	; 0x3f
 800181a:	f000 f8ad 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800181e:	20f6      	movs	r0, #246	; 0xf6
 8001820:	f000 f89d 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001824:	2001      	movs	r0, #1
 8001826:	f000 f8a7 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800182a:	2000      	movs	r0, #0
 800182c:	f000 f8a4 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001830:	2006      	movs	r0, #6
 8001832:	f000 f8a1 	bl	8001978 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001836:	202c      	movs	r0, #44	; 0x2c
 8001838:	f000 f891 	bl	800195e <ili9341_WriteReg>
  LCD_Delay(200);
 800183c:	20c8      	movs	r0, #200	; 0xc8
 800183e:	f000 fa79 	bl	8001d34 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001842:	2026      	movs	r0, #38	; 0x26
 8001844:	f000 f88b 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001848:	2001      	movs	r0, #1
 800184a:	f000 f895 	bl	8001978 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800184e:	20e0      	movs	r0, #224	; 0xe0
 8001850:	f000 f885 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001854:	200f      	movs	r0, #15
 8001856:	f000 f88f 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800185a:	2029      	movs	r0, #41	; 0x29
 800185c:	f000 f88c 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001860:	2024      	movs	r0, #36	; 0x24
 8001862:	f000 f889 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001866:	200c      	movs	r0, #12
 8001868:	f000 f886 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800186c:	200e      	movs	r0, #14
 800186e:	f000 f883 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001872:	2009      	movs	r0, #9
 8001874:	f000 f880 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001878:	204e      	movs	r0, #78	; 0x4e
 800187a:	f000 f87d 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800187e:	2078      	movs	r0, #120	; 0x78
 8001880:	f000 f87a 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001884:	203c      	movs	r0, #60	; 0x3c
 8001886:	f000 f877 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800188a:	2009      	movs	r0, #9
 800188c:	f000 f874 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001890:	2013      	movs	r0, #19
 8001892:	f000 f871 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001896:	2005      	movs	r0, #5
 8001898:	f000 f86e 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800189c:	2017      	movs	r0, #23
 800189e:	f000 f86b 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80018a2:	2011      	movs	r0, #17
 80018a4:	f000 f868 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f000 f865 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80018ae:	20e1      	movs	r0, #225	; 0xe1
 80018b0:	f000 f855 	bl	800195e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018b4:	2000      	movs	r0, #0
 80018b6:	f000 f85f 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80018ba:	2016      	movs	r0, #22
 80018bc:	f000 f85c 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80018c0:	201b      	movs	r0, #27
 80018c2:	f000 f859 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80018c6:	2004      	movs	r0, #4
 80018c8:	f000 f856 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80018cc:	2011      	movs	r0, #17
 80018ce:	f000 f853 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80018d2:	2007      	movs	r0, #7
 80018d4:	f000 f850 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80018d8:	2031      	movs	r0, #49	; 0x31
 80018da:	f000 f84d 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80018de:	2033      	movs	r0, #51	; 0x33
 80018e0:	f000 f84a 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80018e4:	2042      	movs	r0, #66	; 0x42
 80018e6:	f000 f847 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80018ea:	2005      	movs	r0, #5
 80018ec:	f000 f844 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80018f0:	200c      	movs	r0, #12
 80018f2:	f000 f841 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80018f6:	200a      	movs	r0, #10
 80018f8:	f000 f83e 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80018fc:	2028      	movs	r0, #40	; 0x28
 80018fe:	f000 f83b 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001902:	202f      	movs	r0, #47	; 0x2f
 8001904:	f000 f838 	bl	8001978 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001908:	200f      	movs	r0, #15
 800190a:	f000 f835 	bl	8001978 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800190e:	2011      	movs	r0, #17
 8001910:	f000 f825 	bl	800195e <ili9341_WriteReg>
  LCD_Delay(200);
 8001914:	20c8      	movs	r0, #200	; 0xc8
 8001916:	f000 fa0d 	bl	8001d34 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800191a:	2029      	movs	r0, #41	; 0x29
 800191c:	f000 f81f 	bl	800195e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001920:	202c      	movs	r0, #44	; 0x2c
 8001922:	f000 f81c 	bl	800195e <ili9341_WriteReg>
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}

0800192a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800192e:	f000 f913 	bl	8001b58 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001932:	2103      	movs	r1, #3
 8001934:	20d3      	movs	r0, #211	; 0xd3
 8001936:	f000 f82c 	bl	8001992 <ili9341_ReadData>
 800193a:	4603      	mov	r3, r0
 800193c:	b29b      	uxth	r3, r3
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}

08001942 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001946:	2029      	movs	r0, #41	; 0x29
 8001948:	f000 f809 	bl	800195e <ili9341_WriteReg>
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001954:	2028      	movs	r0, #40	; 0x28
 8001956:	f000 f802 	bl	800195e <ili9341_WriteReg>
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}

0800195e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f98e 	bl	8001c8c <LCD_IO_WriteReg>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f95f 	bl	8001c48 <LCD_IO_WriteData>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	460a      	mov	r2, r1
 800199c:	80fb      	strh	r3, [r7, #6]
 800199e:	4613      	mov	r3, r2
 80019a0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80019a2:	797a      	ldrb	r2, [r7, #5]
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 f991 	bl	8001cd0 <LCD_IO_ReadData>
 80019ae:	4603      	mov	r3, r0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80019bc:	23f0      	movs	r3, #240	; 0xf0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80019cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80019e0:	4819      	ldr	r0, [pc, #100]	; (8001a48 <SPIx_Init+0x6c>)
 80019e2:	f004 fb90 	bl	8006106 <HAL_SPI_GetState>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d12b      	bne.n	8001a44 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <SPIx_Init+0x6c>)
 80019ee:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <SPIx_Init+0x70>)
 80019f0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <SPIx_Init+0x6c>)
 80019f4:	2218      	movs	r2, #24
 80019f6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <SPIx_Init+0x6c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <SPIx_Init+0x6c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <SPIx_Init+0x6c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <SPIx_Init+0x6c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <SPIx_Init+0x6c>)
 8001a12:	2207      	movs	r2, #7
 8001a14:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <SPIx_Init+0x6c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <SPIx_Init+0x6c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <SPIx_Init+0x6c>)
 8001a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a28:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <SPIx_Init+0x6c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <SPIx_Init+0x6c>)
 8001a32:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a36:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <SPIx_Init+0x6c>)
 8001a3a:	f000 f853 	bl	8001ae4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001a3e:	4802      	ldr	r0, [pc, #8]	; (8001a48 <SPIx_Init+0x6c>)
 8001a40:	f003 fec1 	bl	80057c6 <HAL_SPI_Init>
  } 
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000578 	.word	0x20000578
 8001a4c:	40015000 	.word	0x40015000

08001a50 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <SPIx_Read+0x38>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f107 0108 	add.w	r1, r7, #8
 8001a6a:	4808      	ldr	r0, [pc, #32]	; (8001a8c <SPIx_Read+0x3c>)
 8001a6c:	f004 f898 	bl	8005ba0 <HAL_SPI_Receive>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001a7a:	f000 f827 	bl	8001acc <SPIx_Error>
  }
  
  return readvalue;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	2000003c 	.word	0x2000003c
 8001a8c:	20000578 	.word	0x20000578

08001a90 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <SPIx_Write+0x34>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	1db9      	adds	r1, r7, #6
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <SPIx_Write+0x38>)
 8001aa8:	f003 ff3e 	bl	8005928 <HAL_SPI_Transmit>
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001ab6:	f000 f809 	bl	8001acc <SPIx_Error>
  }
}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000003c 	.word	0x2000003c
 8001ac8:	20000578 	.word	0x20000578

08001acc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001ad0:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <SPIx_Error+0x14>)
 8001ad2:	f003 ff01 	bl	80058d8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001ad6:	f7ff ff81 	bl	80019dc <SPIx_Init>
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000578 	.word	0x20000578

08001ae4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <SPIx_MspInit+0x6c>)
 8001af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af4:	4a16      	ldr	r2, [pc, #88]	; (8001b50 <SPIx_MspInit+0x6c>)
 8001af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001afa:	6453      	str	r3, [r2, #68]	; 0x44
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <SPIx_MspInit+0x6c>)
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <SPIx_MspInit+0x6c>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <SPIx_MspInit+0x6c>)
 8001b12:	f043 0320 	orr.w	r3, r3, #32
 8001b16:	6313      	str	r3, [r2, #48]	; 0x30
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <SPIx_MspInit+0x6c>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	f003 0320 	and.w	r3, r3, #32
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001b24:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001b32:	2301      	movs	r3, #1
 8001b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001b36:	2305      	movs	r3, #5
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <SPIx_MspInit+0x70>)
 8001b42:	f001 ff01 	bl	8003948 <HAL_GPIO_Init>
}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	; 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40021400 	.word	0x40021400

08001b58 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001b5e:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <LCD_IO_Init+0xe0>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d164      	bne.n	8001c30 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001b66:	4b34      	ldr	r3, [pc, #208]	; (8001c38 <LCD_IO_Init+0xe0>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <LCD_IO_Init+0xe4>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4a31      	ldr	r2, [pc, #196]	; (8001c3c <LCD_IO_Init+0xe4>)
 8001b76:	f043 0308 	orr.w	r3, r3, #8
 8001b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7c:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <LCD_IO_Init+0xe4>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4827      	ldr	r0, [pc, #156]	; (8001c40 <LCD_IO_Init+0xe8>)
 8001ba2:	f001 fed1 	bl	8003948 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <LCD_IO_Init+0xe4>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a23      	ldr	r2, [pc, #140]	; (8001c3c <LCD_IO_Init+0xe4>)
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <LCD_IO_Init+0xe4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4819      	ldr	r0, [pc, #100]	; (8001c40 <LCD_IO_Init+0xe8>)
 8001bdc:	f001 feb4 	bl	8003948 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <LCD_IO_Init+0xe4>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <LCD_IO_Init+0xe4>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <LCD_IO_Init+0xe4>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c00:	2301      	movs	r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	4619      	mov	r1, r3
 8001c12:	480c      	ldr	r0, [pc, #48]	; (8001c44 <LCD_IO_Init+0xec>)
 8001c14:	f001 fe98 	bl	8003948 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	4809      	ldr	r0, [pc, #36]	; (8001c44 <LCD_IO_Init+0xec>)
 8001c1e:	f002 f94b 	bl	8003eb8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001c22:	2201      	movs	r2, #1
 8001c24:	2104      	movs	r1, #4
 8001c26:	4807      	ldr	r0, [pc, #28]	; (8001c44 <LCD_IO_Init+0xec>)
 8001c28:	f002 f946 	bl	8003eb8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001c2c:	f7ff fed6 	bl	80019dc <SPIx_Init>
  }
}
 8001c30:	bf00      	nop
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200005d0 	.word	0x200005d0
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020c00 	.word	0x40020c00
 8001c44:	40020800 	.word	0x40020800

08001c48 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001c52:	2201      	movs	r2, #1
 8001c54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c58:	480a      	ldr	r0, [pc, #40]	; (8001c84 <LCD_IO_WriteData+0x3c>)
 8001c5a:	f002 f92d 	bl	8003eb8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2104      	movs	r1, #4
 8001c62:	4809      	ldr	r0, [pc, #36]	; (8001c88 <LCD_IO_WriteData+0x40>)
 8001c64:	f002 f928 	bl	8003eb8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff10 	bl	8001a90 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001c70:	2201      	movs	r2, #1
 8001c72:	2104      	movs	r1, #4
 8001c74:	4804      	ldr	r0, [pc, #16]	; (8001c88 <LCD_IO_WriteData+0x40>)
 8001c76:	f002 f91f 	bl	8003eb8 <HAL_GPIO_WritePin>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40020c00 	.word	0x40020c00
 8001c88:	40020800 	.word	0x40020800

08001c8c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c9c:	480a      	ldr	r0, [pc, #40]	; (8001cc8 <LCD_IO_WriteReg+0x3c>)
 8001c9e:	f002 f90b 	bl	8003eb8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2104      	movs	r1, #4
 8001ca6:	4809      	ldr	r0, [pc, #36]	; (8001ccc <LCD_IO_WriteReg+0x40>)
 8001ca8:	f002 f906 	bl	8003eb8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff feed 	bl	8001a90 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	2104      	movs	r1, #4
 8001cba:	4804      	ldr	r0, [pc, #16]	; (8001ccc <LCD_IO_WriteReg+0x40>)
 8001cbc:	f002 f8fc 	bl	8003eb8 <HAL_GPIO_WritePin>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40020c00 	.word	0x40020c00
 8001ccc:	40020800 	.word	0x40020800

08001cd0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460a      	mov	r2, r1
 8001cda:	80fb      	strh	r3, [r7, #6]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	4810      	ldr	r0, [pc, #64]	; (8001d2c <LCD_IO_ReadData+0x5c>)
 8001cea:	f002 f8e5 	bl	8003eb8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf4:	480e      	ldr	r0, [pc, #56]	; (8001d30 <LCD_IO_ReadData+0x60>)
 8001cf6:	f002 f8df 	bl	8003eb8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fec7 	bl	8001a90 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001d02:	797b      	ldrb	r3, [r7, #5]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fea3 	bl	8001a50 <SPIx_Read>
 8001d0a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d12:	4807      	ldr	r0, [pc, #28]	; (8001d30 <LCD_IO_ReadData+0x60>)
 8001d14:	f002 f8d0 	bl	8003eb8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d18:	2201      	movs	r2, #1
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	4803      	ldr	r0, [pc, #12]	; (8001d2c <LCD_IO_ReadData+0x5c>)
 8001d1e:	f002 f8cb 	bl	8003eb8 <HAL_GPIO_WritePin>
  
  return readvalue;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40020800 	.word	0x40020800
 8001d30:	40020c00 	.word	0x40020c00

08001d34 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 ff87 	bl	8002c50 <HAL_Delay>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001d52:	4a2e      	ldr	r2, [pc, #184]	; (8001e0c <BSP_LCD_Init+0xc0>)
 8001d54:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001d56:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001d58:	2209      	movs	r2, #9
 8001d5a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001d62:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001d64:	221d      	movs	r2, #29
 8001d66:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001d70:	f240 120d 	movw	r2, #269	; 0x10d
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001d78:	f240 1243 	movw	r2, #323	; 0x143
 8001d7c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001d7e:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001d80:	f240 1217 	movw	r2, #279	; 0x117
 8001d84:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001d88:	f240 1247 	movw	r2, #327	; 0x147
 8001d8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001da6:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <BSP_LCD_Init+0xc4>)
 8001da8:	2208      	movs	r2, #8
 8001daa:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001dac:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <BSP_LCD_Init+0xc4>)
 8001dae:	22c0      	movs	r2, #192	; 0xc0
 8001db0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001db2:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <BSP_LCD_Init+0xc4>)
 8001db4:	2204      	movs	r2, #4
 8001db6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <BSP_LCD_Init+0xc4>)
 8001dba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dbe:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001dc0:	4813      	ldr	r0, [pc, #76]	; (8001e10 <BSP_LCD_Init+0xc4>)
 8001dc2:	f003 faaf 	bl	8005324 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8001dde:	f000 fb3d 	bl	800245c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001de2:	4809      	ldr	r0, [pc, #36]	; (8001e08 <BSP_LCD_Init+0xbc>)
 8001de4:	f002 fa42 	bl	800426c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <BSP_LCD_Init+0xc8>)
 8001dea:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <BSP_LCD_Init+0xcc>)
 8001dec:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <BSP_LCD_Init+0xc8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001df6:	f000 fd1f 	bl	8002838 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001dfa:	4808      	ldr	r0, [pc, #32]	; (8001e1c <BSP_LCD_Init+0xd0>)
 8001dfc:	f000 f8ce 	bl	8001f9c <BSP_LCD_SetFont>

  return LCD_OK;
 8001e00:	2300      	movs	r3, #0
}  
 8001e02:	4618      	mov	r0, r3
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200005d4 	.word	0x200005d4
 8001e0c:	40016800 	.word	0x40016800
 8001e10:	200006bc 	.word	0x200006bc
 8001e14:	20000708 	.word	0x20000708
 8001e18:	20000004 	.word	0x20000004
 8001e1c:	20000040 	.word	0x20000040

08001e20 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <BSP_LCD_GetXSize+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	4798      	blx	r3
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000708 	.word	0x20000708

08001e38 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <BSP_LCD_GetYSize+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	4798      	blx	r3
 8001e44:	4603      	mov	r3, r0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000708 	.word	0x20000708

08001e50 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b090      	sub	sp, #64	; 0x40
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001e60:	f7ff ffde 	bl	8001e20 <BSP_LCD_GetXSize>
 8001e64:	4603      	mov	r3, r0
 8001e66:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001e6c:	f7ff ffe4 	bl	8001e38 <BSP_LCD_GetYSize>
 8001e70:	4603      	mov	r3, r0
 8001e72:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001e7c:	23ff      	movs	r3, #255	; 0xff
 8001e7e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001e96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001e9c:	2307      	movs	r3, #7
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001ea0:	f7ff ffbe 	bl	8001e20 <BSP_LCD_GetXSize>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001ea8:	f7ff ffc6 	bl	8001e38 <BSP_LCD_GetYSize>
 8001eac:	4603      	mov	r3, r0
 8001eae:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001eb0:	88fa      	ldrh	r2, [r7, #6]
 8001eb2:	f107 030c 	add.w	r3, r7, #12
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4814      	ldr	r0, [pc, #80]	; (8001f0c <BSP_LCD_LayerDefaultInit+0xbc>)
 8001eba:	f002 fb69 	bl	8004590 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001ebe:	88fa      	ldrh	r2, [r7, #6]
 8001ec0:	4913      	ldr	r1, [pc, #76]	; (8001f10 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	3304      	adds	r3, #4
 8001ece:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001ed4:	88fa      	ldrh	r2, [r7, #6]
 8001ed6:	490e      	ldr	r1, [pc, #56]	; (8001f10 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3308      	adds	r3, #8
 8001ee4:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001ee6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001ee8:	88fa      	ldrh	r2, [r7, #6]
 8001eea:	4909      	ldr	r1, [pc, #36]	; (8001f10 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001efa:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001efc:	4803      	ldr	r0, [pc, #12]	; (8001f0c <BSP_LCD_LayerDefaultInit+0xbc>)
 8001efe:	f002 fb85 	bl	800460c <HAL_LTDC_EnableDither>
}
 8001f02:	bf00      	nop
 8001f04:	3740      	adds	r7, #64	; 0x40
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200005d4 	.word	0x200005d4
 8001f10:	200006f0 	.word	0x200006f0
 8001f14:	20000040 	.word	0x20000040

08001f18 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <BSP_LCD_SelectLayer+0x1c>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6013      	str	r3, [r2, #0]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	200006ec 	.word	0x200006ec

08001f38 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <BSP_LCD_SetTextColor+0x28>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4907      	ldr	r1, [pc, #28]	; (8001f64 <BSP_LCD_SetTextColor+0x2c>)
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	601a      	str	r2, [r3, #0]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	200006ec 	.word	0x200006ec
 8001f64:	200006f0 	.word	0x200006f0

08001f68 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <BSP_LCD_SetBackColor+0x2c>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4908      	ldr	r1, [pc, #32]	; (8001f98 <BSP_LCD_SetBackColor+0x30>)
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	3304      	adds	r3, #4
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	601a      	str	r2, [r3, #0]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	200006ec 	.word	0x200006ec
 8001f98:	200006f0 	.word	0x200006f0

08001f9c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <BSP_LCD_SetFont+0x2c>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4908      	ldr	r1, [pc, #32]	; (8001fcc <BSP_LCD_SetFont+0x30>)
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	3308      	adds	r3, #8
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	601a      	str	r2, [r3, #0]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	200006ec 	.word	0x200006ec
 8001fcc:	200006f0 	.word	0x200006f0

08001fd0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <BSP_LCD_Clear+0x48>)
 8001fda:	681c      	ldr	r4, [r3, #0]
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <BSP_LCD_Clear+0x48>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0e      	ldr	r2, [pc, #56]	; (800201c <BSP_LCD_Clear+0x4c>)
 8001fe2:	2134      	movs	r1, #52	; 0x34
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	335c      	adds	r3, #92	; 0x5c
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461e      	mov	r6, r3
 8001ff0:	f7ff ff16 	bl	8001e20 <BSP_LCD_GetXSize>
 8001ff4:	4605      	mov	r5, r0
 8001ff6:	f7ff ff1f 	bl	8001e38 <BSP_LCD_GetYSize>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	2300      	movs	r3, #0
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	462a      	mov	r2, r5
 8002008:	4631      	mov	r1, r6
 800200a:	4620      	mov	r0, r4
 800200c:	f000 fbdc 	bl	80027c8 <FillBuffer>
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002018:	200006ec 	.word	0x200006ec
 800201c:	200005d4 	.word	0x200005d4

08002020 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
 800202a:	460b      	mov	r3, r1
 800202c:	80bb      	strh	r3, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002032:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <BSP_LCD_DisplayChar+0x80>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	491b      	ldr	r1, [pc, #108]	; (80020a4 <BSP_LCD_DisplayChar+0x84>)
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	3308      	adds	r3, #8
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6819      	ldr	r1, [r3, #0]
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <BSP_LCD_DisplayChar+0x80>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4c14      	ldr	r4, [pc, #80]	; (80020a4 <BSP_LCD_DisplayChar+0x84>)
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4423      	add	r3, r4
 800205e:	3308      	adds	r3, #8
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002064:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <BSP_LCD_DisplayChar+0x80>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4c0d      	ldr	r4, [pc, #52]	; (80020a4 <BSP_LCD_DisplayChar+0x84>)
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4423      	add	r3, r4
 8002078:	3308      	adds	r3, #8
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	889b      	ldrh	r3, [r3, #4]
 800207e:	3307      	adds	r3, #7
 8002080:	2b00      	cmp	r3, #0
 8002082:	da00      	bge.n	8002086 <BSP_LCD_DisplayChar+0x66>
 8002084:	3307      	adds	r3, #7
 8002086:	10db      	asrs	r3, r3, #3
 8002088:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800208c:	18ca      	adds	r2, r1, r3
 800208e:	88b9      	ldrh	r1, [r7, #4]
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fade 	bl	8002654 <DrawChar>
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}
 80020a0:	200006ec 	.word	0x200006ec
 80020a4:	200006f0 	.word	0x200006f0

080020a8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80020a8:	b5b0      	push	{r4, r5, r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60ba      	str	r2, [r7, #8]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	81fb      	strh	r3, [r7, #14]
 80020b6:	460b      	mov	r3, r1
 80020b8:	81bb      	strh	r3, [r7, #12]
 80020ba:	4613      	mov	r3, r2
 80020bc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80020be:	2301      	movs	r3, #1
 80020c0:	83fb      	strh	r3, [r7, #30]
 80020c2:	2300      	movs	r3, #0
 80020c4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80020d2:	e002      	b.n	80020da <BSP_LCD_DisplayStringAt+0x32>
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	3301      	adds	r3, #1
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	617a      	str	r2, [r7, #20]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f6      	bne.n	80020d4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80020e6:	f7ff fe9b 	bl	8001e20 <BSP_LCD_GetXSize>
 80020ea:	4601      	mov	r1, r0
 80020ec:	4b4b      	ldr	r3, [pc, #300]	; (800221c <BSP_LCD_DisplayStringAt+0x174>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	484b      	ldr	r0, [pc, #300]	; (8002220 <BSP_LCD_DisplayStringAt+0x178>)
 80020f2:	4613      	mov	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4403      	add	r3, r0
 80020fc:	3308      	adds	r3, #8
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	889b      	ldrh	r3, [r3, #4]
 8002102:	fbb1 f3f3 	udiv	r3, r1, r3
 8002106:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d01c      	beq.n	8002148 <BSP_LCD_DisplayStringAt+0xa0>
 800210e:	2b03      	cmp	r3, #3
 8002110:	dc33      	bgt.n	800217a <BSP_LCD_DisplayStringAt+0xd2>
 8002112:	2b01      	cmp	r3, #1
 8002114:	d002      	beq.n	800211c <BSP_LCD_DisplayStringAt+0x74>
 8002116:	2b02      	cmp	r3, #2
 8002118:	d019      	beq.n	800214e <BSP_LCD_DisplayStringAt+0xa6>
 800211a:	e02e      	b.n	800217a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	1ad1      	subs	r1, r2, r3
 8002122:	4b3e      	ldr	r3, [pc, #248]	; (800221c <BSP_LCD_DisplayStringAt+0x174>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	483e      	ldr	r0, [pc, #248]	; (8002220 <BSP_LCD_DisplayStringAt+0x178>)
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4403      	add	r3, r0
 8002132:	3308      	adds	r3, #8
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	889b      	ldrh	r3, [r3, #4]
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	89fb      	ldrh	r3, [r7, #14]
 8002142:	4413      	add	r3, r2
 8002144:	83fb      	strh	r3, [r7, #30]
      break;
 8002146:	e01b      	b.n	8002180 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002148:	89fb      	ldrh	r3, [r7, #14]
 800214a:	83fb      	strh	r3, [r7, #30]
      break;
 800214c:	e018      	b.n	8002180 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	b299      	uxth	r1, r3
 8002156:	4b31      	ldr	r3, [pc, #196]	; (800221c <BSP_LCD_DisplayStringAt+0x174>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4831      	ldr	r0, [pc, #196]	; (8002220 <BSP_LCD_DisplayStringAt+0x178>)
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4403      	add	r3, r0
 8002166:	3308      	adds	r3, #8
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	889b      	ldrh	r3, [r3, #4]
 800216c:	fb11 f303 	smulbb	r3, r1, r3
 8002170:	b29a      	uxth	r2, r3
 8002172:	89fb      	ldrh	r3, [r7, #14]
 8002174:	4413      	add	r3, r2
 8002176:	83fb      	strh	r3, [r7, #30]
      break;
 8002178:	e002      	b.n	8002180 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800217a:	89fb      	ldrh	r3, [r7, #14]
 800217c:	83fb      	strh	r3, [r7, #30]
      break;
 800217e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002180:	e01a      	b.n	80021b8 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	781a      	ldrb	r2, [r3, #0]
 8002186:	89b9      	ldrh	r1, [r7, #12]
 8002188:	8bfb      	ldrh	r3, [r7, #30]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff48 	bl	8002020 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002190:	4b22      	ldr	r3, [pc, #136]	; (800221c <BSP_LCD_DisplayStringAt+0x174>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4922      	ldr	r1, [pc, #136]	; (8002220 <BSP_LCD_DisplayStringAt+0x178>)
 8002196:	4613      	mov	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	3308      	adds	r3, #8
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	889a      	ldrh	r2, [r3, #4]
 80021a6:	8bfb      	ldrh	r3, [r7, #30]
 80021a8:	4413      	add	r3, r2
 80021aa:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	3301      	adds	r3, #1
 80021b0:	60bb      	str	r3, [r7, #8]
    i++;
 80021b2:	8bbb      	ldrh	r3, [r7, #28]
 80021b4:	3301      	adds	r3, #1
 80021b6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bf14      	ite	ne
 80021c0:	2301      	movne	r3, #1
 80021c2:	2300      	moveq	r3, #0
 80021c4:	b2dc      	uxtb	r4, r3
 80021c6:	f7ff fe2b 	bl	8001e20 <BSP_LCD_GetXSize>
 80021ca:	8bb9      	ldrh	r1, [r7, #28]
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <BSP_LCD_DisplayStringAt+0x174>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4d13      	ldr	r5, [pc, #76]	; (8002220 <BSP_LCD_DisplayStringAt+0x178>)
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	442b      	add	r3, r5
 80021dc:	3308      	adds	r3, #8
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	889b      	ldrh	r3, [r3, #4]
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	1ac3      	subs	r3, r0, r3
 80021e8:	b299      	uxth	r1, r3
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <BSP_LCD_DisplayStringAt+0x174>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	480c      	ldr	r0, [pc, #48]	; (8002220 <BSP_LCD_DisplayStringAt+0x178>)
 80021f0:	4613      	mov	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4403      	add	r3, r0
 80021fa:	3308      	adds	r3, #8
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	889b      	ldrh	r3, [r3, #4]
 8002200:	4299      	cmp	r1, r3
 8002202:	bf2c      	ite	cs
 8002204:	2301      	movcs	r3, #1
 8002206:	2300      	movcc	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	4023      	ands	r3, r4
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1b7      	bne.n	8002182 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002212:	bf00      	nop
 8002214:	bf00      	nop
 8002216:	3720      	adds	r7, #32
 8002218:	46bd      	mov	sp, r7
 800221a:	bdb0      	pop	{r4, r5, r7, pc}
 800221c:	200006ec 	.word	0x200006ec
 8002220:	200006f0 	.word	0x200006f0

08002224 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002224:	b5b0      	push	{r4, r5, r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af02      	add	r7, sp, #8
 800222a:	4603      	mov	r3, r0
 800222c:	80fb      	strh	r3, [r7, #6]
 800222e:	460b      	mov	r3, r1
 8002230:	80bb      	strh	r3, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800223a:	4b16      	ldr	r3, [pc, #88]	; (8002294 <BSP_LCD_DrawHLine+0x70>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a16      	ldr	r2, [pc, #88]	; (8002298 <BSP_LCD_DrawHLine+0x74>)
 8002240:	2134      	movs	r1, #52	; 0x34
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	335c      	adds	r3, #92	; 0x5c
 800224a:	681c      	ldr	r4, [r3, #0]
 800224c:	f7ff fde8 	bl	8001e20 <BSP_LCD_GetXSize>
 8002250:	4602      	mov	r2, r0
 8002252:	88bb      	ldrh	r3, [r7, #4]
 8002254:	fb03 f202 	mul.w	r2, r3, r2
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4423      	add	r3, r4
 8002260:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <BSP_LCD_DrawHLine+0x70>)
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	68f9      	ldr	r1, [r7, #12]
 8002268:	887c      	ldrh	r4, [r7, #2]
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <BSP_LCD_DrawHLine+0x70>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4d0b      	ldr	r5, [pc, #44]	; (800229c <BSP_LCD_DrawHLine+0x78>)
 8002270:	4613      	mov	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	442b      	add	r3, r5
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	2300      	movs	r3, #0
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2301      	movs	r3, #1
 8002284:	4622      	mov	r2, r4
 8002286:	f000 fa9f 	bl	80027c8 <FillBuffer>
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bdb0      	pop	{r4, r5, r7, pc}
 8002292:	bf00      	nop
 8002294:	200006ec 	.word	0x200006ec
 8002298:	200005d4 	.word	0x200005d4
 800229c:	200006f0 	.word	0x200006f0

080022a0 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80022a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
 80022aa:	460b      	mov	r3, r1
 80022ac:	80bb      	strh	r3, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80022b6:	4b18      	ldr	r3, [pc, #96]	; (8002318 <BSP_LCD_DrawVLine+0x78>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a18      	ldr	r2, [pc, #96]	; (800231c <BSP_LCD_DrawVLine+0x7c>)
 80022bc:	2134      	movs	r1, #52	; 0x34
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	335c      	adds	r3, #92	; 0x5c
 80022c6:	681c      	ldr	r4, [r3, #0]
 80022c8:	f7ff fdaa 	bl	8001e20 <BSP_LCD_GetXSize>
 80022cc:	4602      	mov	r2, r0
 80022ce:	88bb      	ldrh	r3, [r7, #4]
 80022d0:	fb03 f202 	mul.w	r2, r3, r2
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4423      	add	r3, r4
 80022dc:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <BSP_LCD_DrawVLine+0x78>)
 80022e0:	681c      	ldr	r4, [r3, #0]
 80022e2:	68fd      	ldr	r5, [r7, #12]
 80022e4:	887e      	ldrh	r6, [r7, #2]
 80022e6:	f7ff fd9b 	bl	8001e20 <BSP_LCD_GetXSize>
 80022ea:	4603      	mov	r3, r0
 80022ec:	1e59      	subs	r1, r3, #1
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <BSP_LCD_DrawVLine+0x78>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	480b      	ldr	r0, [pc, #44]	; (8002320 <BSP_LCD_DrawVLine+0x80>)
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4403      	add	r3, r0
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	9100      	str	r1, [sp, #0]
 8002304:	4633      	mov	r3, r6
 8002306:	2201      	movs	r2, #1
 8002308:	4629      	mov	r1, r5
 800230a:	4620      	mov	r0, r4
 800230c:	f000 fa5c 	bl	80027c8 <FillBuffer>
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002318:	200006ec 	.word	0x200006ec
 800231c:	200005d4 	.word	0x200005d4
 8002320:	200006f0 	.word	0x200006f0

08002324 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4604      	mov	r4, r0
 800232c:	4608      	mov	r0, r1
 800232e:	4611      	mov	r1, r2
 8002330:	461a      	mov	r2, r3
 8002332:	4623      	mov	r3, r4
 8002334:	80fb      	strh	r3, [r7, #6]
 8002336:	4603      	mov	r3, r0
 8002338:	80bb      	strh	r3, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	807b      	strh	r3, [r7, #2]
 800233e:	4613      	mov	r3, r2
 8002340:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8002342:	887a      	ldrh	r2, [r7, #2]
 8002344:	88b9      	ldrh	r1, [r7, #4]
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff6b 	bl	8002224 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 800234e:	88ba      	ldrh	r2, [r7, #4]
 8002350:	883b      	ldrh	r3, [r7, #0]
 8002352:	4413      	add	r3, r2
 8002354:	b299      	uxth	r1, r3
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff ff62 	bl	8002224 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8002360:	883a      	ldrh	r2, [r7, #0]
 8002362:	88b9      	ldrh	r1, [r7, #4]
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff9a 	bl	80022a0 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 800236c:	88fa      	ldrh	r2, [r7, #6]
 800236e:	887b      	ldrh	r3, [r7, #2]
 8002370:	4413      	add	r3, r2
 8002372:	b29b      	uxth	r3, r3
 8002374:	883a      	ldrh	r2, [r7, #0]
 8002376:	88b9      	ldrh	r1, [r7, #4]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff91 	bl	80022a0 <BSP_LCD_DrawVLine>
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bd90      	pop	{r4, r7, pc}
	...

08002388 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af02      	add	r7, sp, #8
 8002390:	4604      	mov	r4, r0
 8002392:	4608      	mov	r0, r1
 8002394:	4611      	mov	r1, r2
 8002396:	461a      	mov	r2, r3
 8002398:	4623      	mov	r3, r4
 800239a:	80fb      	strh	r3, [r7, #6]
 800239c:	4603      	mov	r3, r0
 800239e:	80bb      	strh	r3, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
 80023a4:	4613      	mov	r3, r2
 80023a6:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80023ac:	4b20      	ldr	r3, [pc, #128]	; (8002430 <BSP_LCD_FillRect+0xa8>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4920      	ldr	r1, [pc, #128]	; (8002434 <BSP_LCD_FillRect+0xac>)
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fdba 	bl	8001f38 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <BSP_LCD_FillRect+0xa8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1b      	ldr	r2, [pc, #108]	; (8002438 <BSP_LCD_FillRect+0xb0>)
 80023ca:	2134      	movs	r1, #52	; 0x34
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	335c      	adds	r3, #92	; 0x5c
 80023d4:	681c      	ldr	r4, [r3, #0]
 80023d6:	f7ff fd23 	bl	8001e20 <BSP_LCD_GetXSize>
 80023da:	4602      	mov	r2, r0
 80023dc:	88bb      	ldrh	r3, [r7, #4]
 80023de:	fb03 f202 	mul.w	r2, r3, r2
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4423      	add	r3, r4
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <BSP_LCD_FillRect+0xa8>)
 80023ee:	681c      	ldr	r4, [r3, #0]
 80023f0:	68fd      	ldr	r5, [r7, #12]
 80023f2:	887e      	ldrh	r6, [r7, #2]
 80023f4:	f8b7 8000 	ldrh.w	r8, [r7]
 80023f8:	f7ff fd12 	bl	8001e20 <BSP_LCD_GetXSize>
 80023fc:	4602      	mov	r2, r0
 80023fe:	887b      	ldrh	r3, [r7, #2]
 8002400:	1ad1      	subs	r1, r2, r3
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <BSP_LCD_FillRect+0xa8>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	480b      	ldr	r0, [pc, #44]	; (8002434 <BSP_LCD_FillRect+0xac>)
 8002408:	4613      	mov	r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4403      	add	r3, r0
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	9100      	str	r1, [sp, #0]
 8002418:	4643      	mov	r3, r8
 800241a:	4632      	mov	r2, r6
 800241c:	4629      	mov	r1, r5
 800241e:	4620      	mov	r0, r4
 8002420:	f000 f9d2 	bl	80027c8 <FillBuffer>
}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800242e:	bf00      	nop
 8002430:	200006ec 	.word	0x200006ec
 8002434:	200006f0 	.word	0x200006f0
 8002438:	200005d4 	.word	0x200005d4

0800243c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <BSP_LCD_DisplayOn+0x1c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800244a:	4b03      	ldr	r3, [pc, #12]	; (8002458 <BSP_LCD_DisplayOn+0x1c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4798      	blx	r3
  }
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000708 	.word	0x20000708

0800245c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08e      	sub	sp, #56	; 0x38
 8002460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	623b      	str	r3, [r7, #32]
 8002466:	4b61      	ldr	r3, [pc, #388]	; (80025ec <BSP_LCD_MspInit+0x190>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4a60      	ldr	r2, [pc, #384]	; (80025ec <BSP_LCD_MspInit+0x190>)
 800246c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002470:	6453      	str	r3, [r2, #68]	; 0x44
 8002472:	4b5e      	ldr	r3, [pc, #376]	; (80025ec <BSP_LCD_MspInit+0x190>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800247a:	623b      	str	r3, [r7, #32]
 800247c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	4b5a      	ldr	r3, [pc, #360]	; (80025ec <BSP_LCD_MspInit+0x190>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a59      	ldr	r2, [pc, #356]	; (80025ec <BSP_LCD_MspInit+0x190>)
 8002488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b57      	ldr	r3, [pc, #348]	; (80025ec <BSP_LCD_MspInit+0x190>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	4b53      	ldr	r3, [pc, #332]	; (80025ec <BSP_LCD_MspInit+0x190>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a52      	ldr	r2, [pc, #328]	; (80025ec <BSP_LCD_MspInit+0x190>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b50      	ldr	r3, [pc, #320]	; (80025ec <BSP_LCD_MspInit+0x190>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	61bb      	str	r3, [r7, #24]
 80024b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <BSP_LCD_MspInit+0x190>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a4b      	ldr	r2, [pc, #300]	; (80025ec <BSP_LCD_MspInit+0x190>)
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b49      	ldr	r3, [pc, #292]	; (80025ec <BSP_LCD_MspInit+0x190>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	4b45      	ldr	r3, [pc, #276]	; (80025ec <BSP_LCD_MspInit+0x190>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a44      	ldr	r2, [pc, #272]	; (80025ec <BSP_LCD_MspInit+0x190>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b42      	ldr	r3, [pc, #264]	; (80025ec <BSP_LCD_MspInit+0x190>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b3e      	ldr	r3, [pc, #248]	; (80025ec <BSP_LCD_MspInit+0x190>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a3d      	ldr	r2, [pc, #244]	; (80025ec <BSP_LCD_MspInit+0x190>)
 80024f8:	f043 0308 	orr.w	r3, r3, #8
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <BSP_LCD_MspInit+0x190>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	4b37      	ldr	r3, [pc, #220]	; (80025ec <BSP_LCD_MspInit+0x190>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a36      	ldr	r2, [pc, #216]	; (80025ec <BSP_LCD_MspInit+0x190>)
 8002514:	f043 0320 	orr.w	r3, r3, #32
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	4b34      	ldr	r3, [pc, #208]	; (80025ec <BSP_LCD_MspInit+0x190>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <BSP_LCD_MspInit+0x190>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a2f      	ldr	r2, [pc, #188]	; (80025ec <BSP_LCD_MspInit+0x190>)
 8002530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <BSP_LCD_MspInit+0x190>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002542:	f641 0358 	movw	r3, #6232	; 0x1858
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002550:	2302      	movs	r3, #2
 8002552:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002554:	230e      	movs	r3, #14
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255c:	4619      	mov	r1, r3
 800255e:	4824      	ldr	r0, [pc, #144]	; (80025f0 <BSP_LCD_MspInit+0x194>)
 8002560:	f001 f9f2 	bl	8003948 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002564:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800256a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800256e:	4619      	mov	r1, r3
 8002570:	4820      	ldr	r0, [pc, #128]	; (80025f4 <BSP_LCD_MspInit+0x198>)
 8002572:	f001 f9e9 	bl	8003948 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002576:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800257c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002580:	4619      	mov	r1, r3
 8002582:	481d      	ldr	r0, [pc, #116]	; (80025f8 <BSP_LCD_MspInit+0x19c>)
 8002584:	f001 f9e0 	bl	8003948 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002588:	2348      	movs	r3, #72	; 0x48
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800258c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002590:	4619      	mov	r1, r3
 8002592:	481a      	ldr	r0, [pc, #104]	; (80025fc <BSP_LCD_MspInit+0x1a0>)
 8002594:	f001 f9d8 	bl	8003948 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800259e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a2:	4619      	mov	r1, r3
 80025a4:	4816      	ldr	r0, [pc, #88]	; (8002600 <BSP_LCD_MspInit+0x1a4>)
 80025a6:	f001 f9cf 	bl	8003948 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80025aa:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80025b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b4:	4619      	mov	r1, r3
 80025b6:	4813      	ldr	r0, [pc, #76]	; (8002604 <BSP_LCD_MspInit+0x1a8>)
 80025b8:	f001 f9c6 	bl	8003948 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80025bc:	2303      	movs	r3, #3
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80025c0:	2309      	movs	r3, #9
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80025c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c8:	4619      	mov	r1, r3
 80025ca:	480a      	ldr	r0, [pc, #40]	; (80025f4 <BSP_LCD_MspInit+0x198>)
 80025cc:	f001 f9bc 	bl	8003948 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80025d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80025d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025da:	4619      	mov	r1, r3
 80025dc:	4809      	ldr	r0, [pc, #36]	; (8002604 <BSP_LCD_MspInit+0x1a8>)
 80025de:	f001 f9b3 	bl	8003948 <HAL_GPIO_Init>
}
 80025e2:	bf00      	nop
 80025e4:	3738      	adds	r7, #56	; 0x38
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40020000 	.word	0x40020000
 80025f4:	40020400 	.word	0x40020400
 80025f8:	40020800 	.word	0x40020800
 80025fc:	40020c00 	.word	0x40020c00
 8002600:	40021400 	.word	0x40021400
 8002604:	40021800 	.word	0x40021800

08002608 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002608:	b5b0      	push	{r4, r5, r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	603a      	str	r2, [r7, #0]
 8002612:	80fb      	strh	r3, [r7, #6]
 8002614:	460b      	mov	r3, r1
 8002616:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <BSP_LCD_DrawPixel+0x44>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0c      	ldr	r2, [pc, #48]	; (8002650 <BSP_LCD_DrawPixel+0x48>)
 800261e:	2134      	movs	r1, #52	; 0x34
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	335c      	adds	r3, #92	; 0x5c
 8002628:	681c      	ldr	r4, [r3, #0]
 800262a:	88bd      	ldrh	r5, [r7, #4]
 800262c:	f7ff fbf8 	bl	8001e20 <BSP_LCD_GetXSize>
 8002630:	4603      	mov	r3, r0
 8002632:	fb03 f205 	mul.w	r2, r3, r5
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4423      	add	r3, r4
 800263e:	461a      	mov	r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6013      	str	r3, [r2, #0]
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bdb0      	pop	{r4, r5, r7, pc}
 800264c:	200006ec 	.word	0x200006ec
 8002650:	200005d4 	.word	0x200005d4

08002654 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	603a      	str	r2, [r7, #0]
 800265e:	80fb      	strh	r3, [r7, #6]
 8002660:	460b      	mov	r3, r1
 8002662:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	2300      	movs	r3, #0
 800266a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002670:	4b53      	ldr	r3, [pc, #332]	; (80027c0 <DrawChar+0x16c>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4953      	ldr	r1, [pc, #332]	; (80027c4 <DrawChar+0x170>)
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	3308      	adds	r3, #8
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	88db      	ldrh	r3, [r3, #6]
 8002686:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002688:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <DrawChar+0x16c>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	494d      	ldr	r1, [pc, #308]	; (80027c4 <DrawChar+0x170>)
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	3308      	adds	r3, #8
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	889b      	ldrh	r3, [r3, #4]
 800269e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80026a0:	8a3b      	ldrh	r3, [r7, #16]
 80026a2:	3307      	adds	r3, #7
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	da00      	bge.n	80026aa <DrawChar+0x56>
 80026a8:	3307      	adds	r3, #7
 80026aa:	10db      	asrs	r3, r3, #3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	8a3b      	ldrh	r3, [r7, #16]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	e076      	b.n	80027ae <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80026c0:	8a3b      	ldrh	r3, [r7, #16]
 80026c2:	3307      	adds	r3, #7
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	da00      	bge.n	80026ca <DrawChar+0x76>
 80026c8:	3307      	adds	r3, #7
 80026ca:	10db      	asrs	r3, r3, #3
 80026cc:	461a      	mov	r2, r3
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80026da:	8a3b      	ldrh	r3, [r7, #16]
 80026dc:	3307      	adds	r3, #7
 80026de:	2b00      	cmp	r3, #0
 80026e0:	da00      	bge.n	80026e4 <DrawChar+0x90>
 80026e2:	3307      	adds	r3, #7
 80026e4:	10db      	asrs	r3, r3, #3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d002      	beq.n	80026f0 <DrawChar+0x9c>
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d004      	beq.n	80026f8 <DrawChar+0xa4>
 80026ee:	e00c      	b.n	800270a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	617b      	str	r3, [r7, #20]
      break;
 80026f6:	e016      	b.n	8002726 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	3201      	adds	r2, #1
 8002702:	7812      	ldrb	r2, [r2, #0]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
      break;
 8002708:	e00d      	b.n	8002726 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	041a      	lsls	r2, r3, #16
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	3301      	adds	r3, #1
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	4313      	orrs	r3, r2
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	3202      	adds	r2, #2
 800271e:	7812      	ldrb	r2, [r2, #0]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
      break;
 8002724:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	e036      	b.n	800279a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800272c:	8a3a      	ldrh	r2, [r7, #16]
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	1ad2      	subs	r2, r2, r3
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	4413      	add	r3, r2
 8002736:	3b01      	subs	r3, #1
 8002738:	2201      	movs	r2, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	461a      	mov	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d012      	beq.n	800276e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	b29a      	uxth	r2, r3
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	4413      	add	r3, r2
 8002750:	b298      	uxth	r0, r3
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <DrawChar+0x16c>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	491b      	ldr	r1, [pc, #108]	; (80027c4 <DrawChar+0x170>)
 8002758:	4613      	mov	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	88bb      	ldrh	r3, [r7, #4]
 8002766:	4619      	mov	r1, r3
 8002768:	f7ff ff4e 	bl	8002608 <BSP_LCD_DrawPixel>
 800276c:	e012      	b.n	8002794 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	b29a      	uxth	r2, r3
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	4413      	add	r3, r2
 8002776:	b298      	uxth	r0, r3
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <DrawChar+0x16c>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4911      	ldr	r1, [pc, #68]	; (80027c4 <DrawChar+0x170>)
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	3304      	adds	r3, #4
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	88bb      	ldrh	r3, [r7, #4]
 800278e:	4619      	mov	r1, r3
 8002790:	f7ff ff3a 	bl	8002608 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	3301      	adds	r3, #1
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	8a3b      	ldrh	r3, [r7, #16]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d3c4      	bcc.n	800272c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80027a2:	88bb      	ldrh	r3, [r7, #4]
 80027a4:	3301      	adds	r3, #1
 80027a6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	3301      	adds	r3, #1
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	8a7b      	ldrh	r3, [r7, #18]
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d384      	bcc.n	80026c0 <DrawChar+0x6c>
  }
}
 80027b6:	bf00      	nop
 80027b8:	bf00      	nop
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	200006ec 	.word	0x200006ec
 80027c4:	200006f0 	.word	0x200006f0

080027c8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80027d6:	4b16      	ldr	r3, [pc, #88]	; (8002830 <FillBuffer+0x68>)
 80027d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80027dc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80027de:	4b14      	ldr	r3, [pc, #80]	; (8002830 <FillBuffer+0x68>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80027e4:	4a12      	ldr	r2, [pc, #72]	; (8002830 <FillBuffer+0x68>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80027ea:	4b11      	ldr	r3, [pc, #68]	; (8002830 <FillBuffer+0x68>)
 80027ec:	4a11      	ldr	r2, [pc, #68]	; (8002834 <FillBuffer+0x6c>)
 80027ee:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80027f0:	480f      	ldr	r0, [pc, #60]	; (8002830 <FillBuffer+0x68>)
 80027f2:	f000 fd0d 	bl	8003210 <HAL_DMA2D_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d115      	bne.n	8002828 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80027fc:	68f9      	ldr	r1, [r7, #12]
 80027fe:	480c      	ldr	r0, [pc, #48]	; (8002830 <FillBuffer+0x68>)
 8002800:	f000 ff74 	bl	80036ec <HAL_DMA2D_ConfigLayer>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10e      	bne.n	8002828 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69f9      	ldr	r1, [r7, #28]
 8002814:	4806      	ldr	r0, [pc, #24]	; (8002830 <FillBuffer+0x68>)
 8002816:	f000 fd44 	bl	80032a2 <HAL_DMA2D_Start>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d103      	bne.n	8002828 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002820:	210a      	movs	r1, #10
 8002822:	4803      	ldr	r0, [pc, #12]	; (8002830 <FillBuffer+0x68>)
 8002824:	f000 fd68 	bl	80032f8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	2000067c 	.word	0x2000067c
 8002834:	4002b000 	.word	0x4002b000

08002838 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800283c:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <BSP_SDRAM_Init+0xac>)
 800283e:	4a2a      	ldr	r2, [pc, #168]	; (80028e8 <BSP_SDRAM_Init+0xb0>)
 8002840:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002842:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <BSP_SDRAM_Init+0xb4>)
 8002844:	2202      	movs	r2, #2
 8002846:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002848:	4b28      	ldr	r3, [pc, #160]	; (80028ec <BSP_SDRAM_Init+0xb4>)
 800284a:	2207      	movs	r2, #7
 800284c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800284e:	4b27      	ldr	r3, [pc, #156]	; (80028ec <BSP_SDRAM_Init+0xb4>)
 8002850:	2204      	movs	r2, #4
 8002852:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002854:	4b25      	ldr	r3, [pc, #148]	; (80028ec <BSP_SDRAM_Init+0xb4>)
 8002856:	2207      	movs	r2, #7
 8002858:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <BSP_SDRAM_Init+0xb4>)
 800285c:	2202      	movs	r2, #2
 800285e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <BSP_SDRAM_Init+0xb4>)
 8002862:	2202      	movs	r2, #2
 8002864:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002866:	4b21      	ldr	r3, [pc, #132]	; (80028ec <BSP_SDRAM_Init+0xb4>)
 8002868:	2202      	movs	r2, #2
 800286a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800286c:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <BSP_SDRAM_Init+0xac>)
 800286e:	2201      	movs	r2, #1
 8002870:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002872:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <BSP_SDRAM_Init+0xac>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002878:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <BSP_SDRAM_Init+0xac>)
 800287a:	2204      	movs	r2, #4
 800287c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800287e:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <BSP_SDRAM_Init+0xac>)
 8002880:	2210      	movs	r2, #16
 8002882:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002884:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <BSP_SDRAM_Init+0xac>)
 8002886:	2240      	movs	r2, #64	; 0x40
 8002888:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800288a:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <BSP_SDRAM_Init+0xac>)
 800288c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002890:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002892:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <BSP_SDRAM_Init+0xac>)
 8002894:	2200      	movs	r2, #0
 8002896:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <BSP_SDRAM_Init+0xac>)
 800289a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800289e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <BSP_SDRAM_Init+0xac>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80028a6:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <BSP_SDRAM_Init+0xac>)
 80028a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ac:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80028ae:	2100      	movs	r1, #0
 80028b0:	480c      	ldr	r0, [pc, #48]	; (80028e4 <BSP_SDRAM_Init+0xac>)
 80028b2:	f000 f87f 	bl	80029b4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80028b6:	490d      	ldr	r1, [pc, #52]	; (80028ec <BSP_SDRAM_Init+0xb4>)
 80028b8:	480a      	ldr	r0, [pc, #40]	; (80028e4 <BSP_SDRAM_Init+0xac>)
 80028ba:	f002 fef3 	bl	80056a4 <HAL_SDRAM_Init>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80028c4:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <BSP_SDRAM_Init+0xb8>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e002      	b.n	80028d2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <BSP_SDRAM_Init+0xb8>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80028d2:	f240 506a 	movw	r0, #1386	; 0x56a
 80028d6:	f000 f80d 	bl	80028f4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <BSP_SDRAM_Init+0xb8>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	2000070c 	.word	0x2000070c
 80028e8:	a0000140 	.word	0xa0000140
 80028ec:	20000740 	.word	0x20000740
 80028f0:	20000048 	.word	0x20000048

080028f4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002900:	4b2a      	ldr	r3, [pc, #168]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002902:	2201      	movs	r2, #1
 8002904:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002906:	4b29      	ldr	r3, [pc, #164]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002908:	2208      	movs	r2, #8
 800290a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800290c:	4b27      	ldr	r3, [pc, #156]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800290e:	2201      	movs	r2, #1
 8002910:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002912:	4b26      	ldr	r3, [pc, #152]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002914:	2200      	movs	r2, #0
 8002916:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800291c:	4923      	ldr	r1, [pc, #140]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800291e:	4824      	ldr	r0, [pc, #144]	; (80029b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002920:	f002 fef4 	bl	800570c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002924:	2001      	movs	r0, #1
 8002926:	f000 f993 	bl	8002c50 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800292a:	4b20      	ldr	r3, [pc, #128]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800292c:	2202      	movs	r2, #2
 800292e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002930:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002932:	2208      	movs	r2, #8
 8002934:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002936:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002938:	2201      	movs	r2, #1
 800293a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800293c:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002946:	4919      	ldr	r1, [pc, #100]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002948:	4819      	ldr	r0, [pc, #100]	; (80029b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800294a:	f002 fedf 	bl	800570c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800294e:	4b17      	ldr	r3, [pc, #92]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002950:	2203      	movs	r2, #3
 8002952:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002954:	4b15      	ldr	r3, [pc, #84]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002956:	2208      	movs	r2, #8
 8002958:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800295c:	2204      	movs	r2, #4
 800295e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002962:	2200      	movs	r2, #0
 8002964:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800296a:	4910      	ldr	r1, [pc, #64]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800296c:	4810      	ldr	r0, [pc, #64]	; (80029b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800296e:	f002 fecd 	bl	800570c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002972:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002976:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800297a:	2204      	movs	r2, #4
 800297c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002980:	2208      	movs	r2, #8
 8002982:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002986:	2201      	movs	r2, #1
 8002988:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4a07      	ldr	r2, [pc, #28]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800298e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002994:	4905      	ldr	r1, [pc, #20]	; (80029ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002996:	4806      	ldr	r0, [pc, #24]	; (80029b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002998:	f002 feb8 	bl	800570c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4804      	ldr	r0, [pc, #16]	; (80029b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80029a0:	f002 fee9 	bl	8005776 <HAL_SDRAM_ProgramRefreshRate>
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	2000075c 	.word	0x2000075c
 80029b0:	2000070c 	.word	0x2000070c

080029b4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b090      	sub	sp, #64	; 0x40
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80ec 	beq.w	8002b9e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ca:	4b77      	ldr	r3, [pc, #476]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	4a76      	ldr	r2, [pc, #472]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6393      	str	r3, [r2, #56]	; 0x38
 80029d6:	4b74      	ldr	r3, [pc, #464]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	4b70      	ldr	r3, [pc, #448]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a6f      	ldr	r2, [pc, #444]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 80029ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b6d      	ldr	r3, [pc, #436]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]
 8002a02:	4b69      	ldr	r3, [pc, #420]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a68      	ldr	r2, [pc, #416]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b66      	ldr	r3, [pc, #408]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	623b      	str	r3, [r7, #32]
 8002a18:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	4b62      	ldr	r3, [pc, #392]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	4a61      	ldr	r2, [pc, #388]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a24:	f043 0304 	orr.w	r3, r3, #4
 8002a28:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2a:	4b5f      	ldr	r3, [pc, #380]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	4b5b      	ldr	r3, [pc, #364]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a5a      	ldr	r2, [pc, #360]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a40:	f043 0308 	orr.w	r3, r3, #8
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b58      	ldr	r3, [pc, #352]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	61bb      	str	r3, [r7, #24]
 8002a50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	4b54      	ldr	r3, [pc, #336]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a53      	ldr	r2, [pc, #332]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a5c:	f043 0310 	orr.w	r3, r3, #16
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b51      	ldr	r3, [pc, #324]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	4b4d      	ldr	r3, [pc, #308]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a4c      	ldr	r2, [pc, #304]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a78:	f043 0320 	orr.w	r3, r3, #32
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b46      	ldr	r3, [pc, #280]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	4a45      	ldr	r2, [pc, #276]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a98:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9a:	4b43      	ldr	r3, [pc, #268]	; (8002ba8 <BSP_SDRAM_MspInit+0x1f4>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002ab2:	230c      	movs	r3, #12
 8002ab4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002ab6:	2360      	movs	r3, #96	; 0x60
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002abe:	4619      	mov	r1, r3
 8002ac0:	483a      	ldr	r0, [pc, #232]	; (8002bac <BSP_SDRAM_MspInit+0x1f8>)
 8002ac2:	f000 ff41 	bl	8003948 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4837      	ldr	r0, [pc, #220]	; (8002bb0 <BSP_SDRAM_MspInit+0x1fc>)
 8002ad2:	f000 ff39 	bl	8003948 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002ad6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4834      	ldr	r0, [pc, #208]	; (8002bb4 <BSP_SDRAM_MspInit+0x200>)
 8002ae4:	f000 ff30 	bl	8003948 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002ae8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002aee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af2:	4619      	mov	r1, r3
 8002af4:	4830      	ldr	r0, [pc, #192]	; (8002bb8 <BSP_SDRAM_MspInit+0x204>)
 8002af6:	f000 ff27 	bl	8003948 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002afa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b04:	4619      	mov	r1, r3
 8002b06:	482d      	ldr	r0, [pc, #180]	; (8002bbc <BSP_SDRAM_MspInit+0x208>)
 8002b08:	f000 ff1e 	bl	8003948 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002b0c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002b10:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b16:	4619      	mov	r1, r3
 8002b18:	4829      	ldr	r0, [pc, #164]	; (8002bc0 <BSP_SDRAM_MspInit+0x20c>)
 8002b1a:	f000 ff15 	bl	8003948 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002b1e:	4b29      	ldr	r3, [pc, #164]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002b24:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b26:	2280      	movs	r2, #128	; 0x80
 8002b28:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002b2a:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b30:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b38:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b3a:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b40:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b48:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002b50:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b56:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002b58:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002b5e:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b60:	2203      	movs	r2, #3
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002b64:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002b6a:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002b70:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b72:	4a15      	ldr	r2, [pc, #84]	; (8002bc8 <BSP_SDRAM_MspInit+0x214>)
 8002b74:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b7c:	4a11      	ldr	r2, [pc, #68]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002b82:	4810      	ldr	r0, [pc, #64]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b84:	f000 fa34 	bl	8002ff0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002b88:	480e      	ldr	r0, [pc, #56]	; (8002bc4 <BSP_SDRAM_MspInit+0x210>)
 8002b8a:	f000 f983 	bl	8002e94 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	210f      	movs	r1, #15
 8002b92:	2038      	movs	r0, #56	; 0x38
 8002b94:	f000 f938 	bl	8002e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002b98:	2038      	movs	r0, #56	; 0x38
 8002b9a:	f000 f951 	bl	8002e40 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002b9e:	bf00      	nop
 8002ba0:	3740      	adds	r7, #64	; 0x40
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	40020800 	.word	0x40020800
 8002bb4:	40020c00 	.word	0x40020c00
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40021400 	.word	0x40021400
 8002bc0:	40021800 	.word	0x40021800
 8002bc4:	2000076c 	.word	0x2000076c
 8002bc8:	40026410 	.word	0x40026410

08002bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_Init+0x40>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <HAL_Init+0x40>)
 8002bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_Init+0x40>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <HAL_Init+0x40>)
 8002be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_Init+0x40>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <HAL_Init+0x40>)
 8002bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf4:	2003      	movs	r0, #3
 8002bf6:	f000 f8fc 	bl	8002df2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7fe fc60 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c00:	f7fe f8e2 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023c00 	.word	0x40023c00

08002c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_IncTick+0x20>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_IncTick+0x24>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4413      	add	r3, r2
 8002c20:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <HAL_IncTick+0x24>)
 8002c22:	6013      	str	r3, [r2, #0]
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000050 	.word	0x20000050
 8002c34:	200007cc 	.word	0x200007cc

08002c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c3c:	4b03      	ldr	r3, [pc, #12]	; (8002c4c <HAL_GetTick+0x14>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	200007cc 	.word	0x200007cc

08002c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c58:	f7ff ffee 	bl	8002c38 <HAL_GetTick>
 8002c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d005      	beq.n	8002c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <HAL_Delay+0x44>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c76:	bf00      	nop
 8002c78:	f7ff ffde 	bl	8002c38 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d8f7      	bhi.n	8002c78 <HAL_Delay+0x28>
  {
  }
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000050 	.word	0x20000050

08002c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cca:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	60d3      	str	r3, [r2, #12]
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	f003 0307 	and.w	r3, r3, #7
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	db0b      	blt.n	8002d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	4907      	ldr	r1, [pc, #28]	; (8002d34 <__NVIC_EnableIRQ+0x38>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	e000e100 	.word	0xe000e100

08002d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	6039      	str	r1, [r7, #0]
 8002d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	db0a      	blt.n	8002d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	490c      	ldr	r1, [pc, #48]	; (8002d84 <__NVIC_SetPriority+0x4c>)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	0112      	lsls	r2, r2, #4
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d60:	e00a      	b.n	8002d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4908      	ldr	r1, [pc, #32]	; (8002d88 <__NVIC_SetPriority+0x50>)
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	3b04      	subs	r3, #4
 8002d70:	0112      	lsls	r2, r2, #4
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	440b      	add	r3, r1
 8002d76:	761a      	strb	r2, [r3, #24]
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000e100 	.word	0xe000e100
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b089      	sub	sp, #36	; 0x24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f1c3 0307 	rsb	r3, r3, #7
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	bf28      	it	cs
 8002daa:	2304      	movcs	r3, #4
 8002dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3304      	adds	r3, #4
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d902      	bls.n	8002dbc <NVIC_EncodePriority+0x30>
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3b03      	subs	r3, #3
 8002dba:	e000      	b.n	8002dbe <NVIC_EncodePriority+0x32>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	401a      	ands	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	43d9      	mvns	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	4313      	orrs	r3, r2
         );
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3724      	adds	r7, #36	; 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ff4c 	bl	8002c98 <__NVIC_SetPriorityGrouping>
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e1a:	f7ff ff61 	bl	8002ce0 <__NVIC_GetPriorityGrouping>
 8002e1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	6978      	ldr	r0, [r7, #20]
 8002e26:	f7ff ffb1 	bl	8002d8c <NVIC_EncodePriority>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ff80 	bl	8002d38 <__NVIC_SetPriority>
}
 8002e38:	bf00      	nop
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ff54 	bl	8002cfc <__NVIC_EnableIRQ>
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00e      	b.n	8002e8c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	795b      	ldrb	r3, [r3, #5]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d105      	bne.n	8002e84 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fd ffce 	bl	8000e20 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ea0:	f7ff feca 	bl	8002c38 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e099      	b.n	8002fe4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed0:	e00f      	b.n	8002ef2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ed2:	f7ff feb1 	bl	8002c38 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d908      	bls.n	8002ef2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2203      	movs	r2, #3
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e078      	b.n	8002fe4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e8      	bne.n	8002ed2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4b38      	ldr	r3, [pc, #224]	; (8002fec <HAL_DMA_Init+0x158>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d107      	bne.n	8002f5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	4313      	orrs	r3, r2
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f023 0307 	bic.w	r3, r3, #7
 8002f72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d117      	bne.n	8002fb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00e      	beq.n	8002fb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f8bd 	bl	8003118 <DMA_CheckFifoParam>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2240      	movs	r2, #64	; 0x40
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e016      	b.n	8002fe4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f874 	bl	80030ac <DMA_CalcBaseAndBitshift>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	223f      	movs	r2, #63	; 0x3f
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	f010803f 	.word	0xf010803f

08002ff0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e050      	b.n	80030a4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d101      	bne.n	8003012 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800300e:	2302      	movs	r3, #2
 8003010:	e048      	b.n	80030a4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0201 	bic.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2200      	movs	r2, #0
 8003040:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2200      	movs	r2, #0
 8003048:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2221      	movs	r2, #33	; 0x21
 8003050:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f82a 	bl	80030ac <DMA_CalcBaseAndBitshift>
 8003058:	4603      	mov	r3, r0
 800305a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	223f      	movs	r2, #63	; 0x3f
 8003086:	409a      	lsls	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	3b10      	subs	r3, #16
 80030bc:	4a14      	ldr	r2, [pc, #80]	; (8003110 <DMA_CalcBaseAndBitshift+0x64>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030c6:	4a13      	ldr	r2, [pc, #76]	; (8003114 <DMA_CalcBaseAndBitshift+0x68>)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d909      	bls.n	80030ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	1d1a      	adds	r2, r3, #4
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	659a      	str	r2, [r3, #88]	; 0x58
 80030ec:	e007      	b.n	80030fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030f6:	f023 0303 	bic.w	r3, r3, #3
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	aaaaaaab 	.word	0xaaaaaaab
 8003114:	0800a4c8 	.word	0x0800a4c8

08003118 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d11f      	bne.n	8003172 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d856      	bhi.n	80031e6 <DMA_CheckFifoParam+0xce>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <DMA_CheckFifoParam+0x28>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003151 	.word	0x08003151
 8003144:	08003163 	.word	0x08003163
 8003148:	08003151 	.word	0x08003151
 800314c:	080031e7 	.word	0x080031e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d046      	beq.n	80031ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003160:	e043      	b.n	80031ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800316a:	d140      	bne.n	80031ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003170:	e03d      	b.n	80031ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317a:	d121      	bne.n	80031c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d837      	bhi.n	80031f2 <DMA_CheckFifoParam+0xda>
 8003182:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <DMA_CheckFifoParam+0x70>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	08003199 	.word	0x08003199
 800318c:	0800319f 	.word	0x0800319f
 8003190:	08003199 	.word	0x08003199
 8003194:	080031b1 	.word	0x080031b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
      break;
 800319c:	e030      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d025      	beq.n	80031f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ae:	e022      	b.n	80031f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031b8:	d11f      	bne.n	80031fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031be:	e01c      	b.n	80031fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d903      	bls.n	80031ce <DMA_CheckFifoParam+0xb6>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d003      	beq.n	80031d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031cc:	e018      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
      break;
 80031d2:	e015      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00e      	beq.n	80031fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
      break;
 80031e4:	e00b      	b.n	80031fe <DMA_CheckFifoParam+0xe6>
      break;
 80031e6:	bf00      	nop
 80031e8:	e00a      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031ea:	bf00      	nop
 80031ec:	e008      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031ee:	bf00      	nop
 80031f0:	e006      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031f2:	bf00      	nop
 80031f4:	e004      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031f6:	bf00      	nop
 80031f8:	e002      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;   
 80031fa:	bf00      	nop
 80031fc:	e000      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003200:	7bfb      	ldrb	r3, [r7, #15]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop

08003210 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e03b      	b.n	800329a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fd fe14 	bl	8000e64 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003260:	f023 0107 	bic.w	r1, r3, #7
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800327a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68d1      	ldr	r1, [r2, #12]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	430b      	orrs	r3, r1
 8003288:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af02      	add	r7, sp, #8
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_DMA2D_Start+0x1c>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e018      	b.n	80032f0 <HAL_DMA2D_Start+0x4e>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2202      	movs	r2, #2
 80032ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 fa99 	bl	8003810 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0201 	orr.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d056      	beq.n	80033c2 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003314:	f7ff fc90 	bl	8002c38 <HAL_GetTick>
 8003318:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800331a:	e04b      	b.n	80033b4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800332a:	2b00      	cmp	r3, #0
 800332c:	d023      	beq.n	8003376 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333c:	f043 0202 	orr.w	r2, r3, #2
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d005      	beq.n	800335a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003352:	f043 0201 	orr.w	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2221      	movs	r2, #33	; 0x21
 8003360:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2204      	movs	r2, #4
 8003366:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e0a5      	b.n	80034c2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d01a      	beq.n	80033b4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800337e:	f7ff fc5b 	bl	8002c38 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d302      	bcc.n	8003394 <HAL_DMA2D_PollForTransfer+0x9c>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10f      	bne.n	80033b4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	f043 0220 	orr.w	r2, r3, #32
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2203      	movs	r2, #3
 80033a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e086      	b.n	80034c2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0ac      	beq.n	800331c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d061      	beq.n	80034a8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80033e4:	f7ff fc28 	bl	8002c38 <HAL_GetTick>
 80033e8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80033ea:	e056      	b.n	800349a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d02e      	beq.n	800345c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340c:	f043 0204 	orr.w	r2, r3, #4
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003422:	f043 0202 	orr.w	r2, r3, #2
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	f043 0201 	orr.w	r2, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2229      	movs	r2, #41	; 0x29
 8003446:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2204      	movs	r2, #4
 800344c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e032      	b.n	80034c2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d01a      	beq.n	800349a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003464:	f7ff fbe8 	bl	8002c38 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d302      	bcc.n	800347a <HAL_DMA2D_PollForTransfer+0x182>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347e:	f043 0220 	orr.w	r2, r3, #32
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2203      	movs	r2, #3
 800348a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e013      	b.n	80034c2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0a1      	beq.n	80033ec <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2212      	movs	r2, #18
 80034ae:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d026      	beq.n	800353a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d021      	beq.n	800353a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003504:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350a:	f043 0201 	orr.w	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2201      	movs	r2, #1
 8003518:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2204      	movs	r2, #4
 800351e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d026      	beq.n	8003592 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d021      	beq.n	8003592 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800355c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2220      	movs	r2, #32
 8003564:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	f043 0202 	orr.w	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2204      	movs	r2, #4
 8003576:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d026      	beq.n	80035ea <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d021      	beq.n	80035ea <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2208      	movs	r2, #8
 80035bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c2:	f043 0204 	orr.w	r2, r3, #4
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2204      	movs	r2, #4
 80035ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d013      	beq.n	800361c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00e      	beq.n	800361c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2204      	movs	r2, #4
 8003614:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f853 	bl	80036c2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d024      	beq.n	8003670 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01f      	beq.n	8003670 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800363e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2202      	movs	r2, #2
 8003646:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d01f      	beq.n	80036ba <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01a      	beq.n	80036ba <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003692:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2210      	movs	r2, #16
 800369a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f80e 	bl	80036d6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_DMA2D_ConfigLayer+0x20>
 8003708:	2302      	movs	r3, #2
 800370a:	e079      	b.n	8003800 <HAL_DMA2D_ConfigLayer+0x114>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	3318      	adds	r3, #24
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	041b      	lsls	r3, r3, #16
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003736:	4b35      	ldr	r3, [pc, #212]	; (800380c <HAL_DMA2D_ConfigLayer+0x120>)
 8003738:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b0a      	cmp	r3, #10
 8003740:	d003      	beq.n	800374a <HAL_DMA2D_ConfigLayer+0x5e>
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b09      	cmp	r3, #9
 8003748:	d107      	bne.n	800375a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	e005      	b.n	8003766 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	061b      	lsls	r3, r3, #24
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d120      	bne.n	80037ae <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	43db      	mvns	r3, r3
 8003776:	ea02 0103 	and.w	r1, r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	430a      	orrs	r2, r1
 8003782:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b0a      	cmp	r3, #10
 8003794:	d003      	beq.n	800379e <HAL_DMA2D_ConfigLayer+0xb2>
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b09      	cmp	r3, #9
 800379c:	d127      	bne.n	80037ee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28
 80037ac:	e01f      	b.n	80037ee <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	ea02 0103 	and.w	r1, r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b0a      	cmp	r3, #10
 80037d6:	d003      	beq.n	80037e0 <HAL_DMA2D_ConfigLayer+0xf4>
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b09      	cmp	r3, #9
 80037de:	d106      	bne.n	80037ee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80037ec:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	ff03000f 	.word	0xff03000f

08003810 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003810:	b480      	push	{r7}
 8003812:	b08b      	sub	sp, #44	; 0x2c
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	041a      	lsls	r2, r3, #16
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	431a      	orrs	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003848:	d174      	bne.n	8003934 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003850:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003858:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003860:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d108      	bne.n	8003882 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	431a      	orrs	r2, r3
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	4313      	orrs	r3, r2
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
 8003880:	e053      	b.n	800392a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d106      	bne.n	8003898 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	4313      	orrs	r3, r2
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
 8003896:	e048      	b.n	800392a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d111      	bne.n	80038c4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	0cdb      	lsrs	r3, r3, #19
 80038a4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	0a9b      	lsrs	r3, r3, #10
 80038aa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	08db      	lsrs	r3, r3, #3
 80038b0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	02db      	lsls	r3, r3, #11
 80038ba:	4313      	orrs	r3, r2
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	4313      	orrs	r3, r2
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
 80038c2:	e032      	b.n	800392a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d117      	bne.n	80038fc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	0fdb      	lsrs	r3, r3, #31
 80038d0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	0cdb      	lsrs	r3, r3, #19
 80038d6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	0adb      	lsrs	r3, r3, #11
 80038dc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	08db      	lsrs	r3, r3, #3
 80038e2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	029b      	lsls	r3, r3, #10
 80038ec:	431a      	orrs	r2, r3
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	03db      	lsls	r3, r3, #15
 80038f2:	4313      	orrs	r3, r2
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
 80038fa:	e016      	b.n	800392a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	0f1b      	lsrs	r3, r3, #28
 8003900:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	0d1b      	lsrs	r3, r3, #20
 8003906:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	0b1b      	lsrs	r3, r3, #12
 800390c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	011a      	lsls	r2, r3, #4
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	431a      	orrs	r2, r3
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	031b      	lsls	r3, r3, #12
 8003922:	4313      	orrs	r3, r2
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003930:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003932:	e003      	b.n	800393c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	60da      	str	r2, [r3, #12]
}
 800393c:	bf00      	nop
 800393e:	372c      	adds	r7, #44	; 0x2c
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003948:	b480      	push	{r7}
 800394a:	b089      	sub	sp, #36	; 0x24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800395a:	2300      	movs	r3, #0
 800395c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	e177      	b.n	8003c54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003964:	2201      	movs	r2, #1
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	429a      	cmp	r2, r3
 800397e:	f040 8166 	bne.w	8003c4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d005      	beq.n	800399a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003996:	2b02      	cmp	r3, #2
 8003998:	d130      	bne.n	80039fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	2203      	movs	r2, #3
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4013      	ands	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039d0:	2201      	movs	r2, #1
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 0201 	and.w	r2, r3, #1
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d017      	beq.n	8003a38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	2203      	movs	r2, #3
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d123      	bne.n	8003a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	08da      	lsrs	r2, r3, #3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3208      	adds	r2, #8
 8003a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	220f      	movs	r2, #15
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	08da      	lsrs	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3208      	adds	r2, #8
 8003a86:	69b9      	ldr	r1, [r7, #24]
 8003a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	2203      	movs	r2, #3
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0203 	and.w	r2, r3, #3
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80c0 	beq.w	8003c4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	4b66      	ldr	r3, [pc, #408]	; (8003c6c <HAL_GPIO_Init+0x324>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	4a65      	ldr	r2, [pc, #404]	; (8003c6c <HAL_GPIO_Init+0x324>)
 8003ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003adc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ade:	4b63      	ldr	r3, [pc, #396]	; (8003c6c <HAL_GPIO_Init+0x324>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aea:	4a61      	ldr	r2, [pc, #388]	; (8003c70 <HAL_GPIO_Init+0x328>)
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	089b      	lsrs	r3, r3, #2
 8003af0:	3302      	adds	r3, #2
 8003af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	220f      	movs	r2, #15
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a58      	ldr	r2, [pc, #352]	; (8003c74 <HAL_GPIO_Init+0x32c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d037      	beq.n	8003b86 <HAL_GPIO_Init+0x23e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a57      	ldr	r2, [pc, #348]	; (8003c78 <HAL_GPIO_Init+0x330>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d031      	beq.n	8003b82 <HAL_GPIO_Init+0x23a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a56      	ldr	r2, [pc, #344]	; (8003c7c <HAL_GPIO_Init+0x334>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d02b      	beq.n	8003b7e <HAL_GPIO_Init+0x236>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a55      	ldr	r2, [pc, #340]	; (8003c80 <HAL_GPIO_Init+0x338>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d025      	beq.n	8003b7a <HAL_GPIO_Init+0x232>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a54      	ldr	r2, [pc, #336]	; (8003c84 <HAL_GPIO_Init+0x33c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d01f      	beq.n	8003b76 <HAL_GPIO_Init+0x22e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a53      	ldr	r2, [pc, #332]	; (8003c88 <HAL_GPIO_Init+0x340>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d019      	beq.n	8003b72 <HAL_GPIO_Init+0x22a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a52      	ldr	r2, [pc, #328]	; (8003c8c <HAL_GPIO_Init+0x344>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_GPIO_Init+0x226>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a51      	ldr	r2, [pc, #324]	; (8003c90 <HAL_GPIO_Init+0x348>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00d      	beq.n	8003b6a <HAL_GPIO_Init+0x222>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a50      	ldr	r2, [pc, #320]	; (8003c94 <HAL_GPIO_Init+0x34c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d007      	beq.n	8003b66 <HAL_GPIO_Init+0x21e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a4f      	ldr	r2, [pc, #316]	; (8003c98 <HAL_GPIO_Init+0x350>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d101      	bne.n	8003b62 <HAL_GPIO_Init+0x21a>
 8003b5e:	2309      	movs	r3, #9
 8003b60:	e012      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b62:	230a      	movs	r3, #10
 8003b64:	e010      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b66:	2308      	movs	r3, #8
 8003b68:	e00e      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b6a:	2307      	movs	r3, #7
 8003b6c:	e00c      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b6e:	2306      	movs	r3, #6
 8003b70:	e00a      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b72:	2305      	movs	r3, #5
 8003b74:	e008      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b76:	2304      	movs	r3, #4
 8003b78:	e006      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e004      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e002      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <HAL_GPIO_Init+0x240>
 8003b86:	2300      	movs	r3, #0
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	f002 0203 	and.w	r2, r2, #3
 8003b8e:	0092      	lsls	r2, r2, #2
 8003b90:	4093      	lsls	r3, r2
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b98:	4935      	ldr	r1, [pc, #212]	; (8003c70 <HAL_GPIO_Init+0x328>)
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	089b      	lsrs	r3, r3, #2
 8003b9e:	3302      	adds	r3, #2
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ba6:	4b3d      	ldr	r3, [pc, #244]	; (8003c9c <HAL_GPIO_Init+0x354>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bca:	4a34      	ldr	r2, [pc, #208]	; (8003c9c <HAL_GPIO_Init+0x354>)
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bd0:	4b32      	ldr	r3, [pc, #200]	; (8003c9c <HAL_GPIO_Init+0x354>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bf4:	4a29      	ldr	r2, [pc, #164]	; (8003c9c <HAL_GPIO_Init+0x354>)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bfa:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <HAL_GPIO_Init+0x354>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c1e:	4a1f      	ldr	r2, [pc, #124]	; (8003c9c <HAL_GPIO_Init+0x354>)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c24:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_GPIO_Init+0x354>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c48:	4a14      	ldr	r2, [pc, #80]	; (8003c9c <HAL_GPIO_Init+0x354>)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	3301      	adds	r3, #1
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2b0f      	cmp	r3, #15
 8003c58:	f67f ae84 	bls.w	8003964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	3724      	adds	r7, #36	; 0x24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40013800 	.word	0x40013800
 8003c74:	40020000 	.word	0x40020000
 8003c78:	40020400 	.word	0x40020400
 8003c7c:	40020800 	.word	0x40020800
 8003c80:	40020c00 	.word	0x40020c00
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40021400 	.word	0x40021400
 8003c8c:	40021800 	.word	0x40021800
 8003c90:	40021c00 	.word	0x40021c00
 8003c94:	40022000 	.word	0x40022000
 8003c98:	40022400 	.word	0x40022400
 8003c9c:	40013c00 	.word	0x40013c00

08003ca0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	e0d9      	b.n	8003e70 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	f040 80c9 	bne.w	8003e6a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003cd8:	4a6b      	ldr	r2, [pc, #428]	; (8003e88 <HAL_GPIO_DeInit+0x1e8>)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	089b      	lsrs	r3, r3, #2
 8003cde:	3302      	adds	r3, #2
 8003ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	220f      	movs	r2, #15
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a63      	ldr	r2, [pc, #396]	; (8003e8c <HAL_GPIO_DeInit+0x1ec>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d037      	beq.n	8003d72 <HAL_GPIO_DeInit+0xd2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a62      	ldr	r2, [pc, #392]	; (8003e90 <HAL_GPIO_DeInit+0x1f0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d031      	beq.n	8003d6e <HAL_GPIO_DeInit+0xce>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a61      	ldr	r2, [pc, #388]	; (8003e94 <HAL_GPIO_DeInit+0x1f4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d02b      	beq.n	8003d6a <HAL_GPIO_DeInit+0xca>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a60      	ldr	r2, [pc, #384]	; (8003e98 <HAL_GPIO_DeInit+0x1f8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d025      	beq.n	8003d66 <HAL_GPIO_DeInit+0xc6>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a5f      	ldr	r2, [pc, #380]	; (8003e9c <HAL_GPIO_DeInit+0x1fc>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d01f      	beq.n	8003d62 <HAL_GPIO_DeInit+0xc2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a5e      	ldr	r2, [pc, #376]	; (8003ea0 <HAL_GPIO_DeInit+0x200>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d019      	beq.n	8003d5e <HAL_GPIO_DeInit+0xbe>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a5d      	ldr	r2, [pc, #372]	; (8003ea4 <HAL_GPIO_DeInit+0x204>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_GPIO_DeInit+0xba>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a5c      	ldr	r2, [pc, #368]	; (8003ea8 <HAL_GPIO_DeInit+0x208>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00d      	beq.n	8003d56 <HAL_GPIO_DeInit+0xb6>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a5b      	ldr	r2, [pc, #364]	; (8003eac <HAL_GPIO_DeInit+0x20c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <HAL_GPIO_DeInit+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a5a      	ldr	r2, [pc, #360]	; (8003eb0 <HAL_GPIO_DeInit+0x210>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <HAL_GPIO_DeInit+0xae>
 8003d4a:	2309      	movs	r3, #9
 8003d4c:	e012      	b.n	8003d74 <HAL_GPIO_DeInit+0xd4>
 8003d4e:	230a      	movs	r3, #10
 8003d50:	e010      	b.n	8003d74 <HAL_GPIO_DeInit+0xd4>
 8003d52:	2308      	movs	r3, #8
 8003d54:	e00e      	b.n	8003d74 <HAL_GPIO_DeInit+0xd4>
 8003d56:	2307      	movs	r3, #7
 8003d58:	e00c      	b.n	8003d74 <HAL_GPIO_DeInit+0xd4>
 8003d5a:	2306      	movs	r3, #6
 8003d5c:	e00a      	b.n	8003d74 <HAL_GPIO_DeInit+0xd4>
 8003d5e:	2305      	movs	r3, #5
 8003d60:	e008      	b.n	8003d74 <HAL_GPIO_DeInit+0xd4>
 8003d62:	2304      	movs	r3, #4
 8003d64:	e006      	b.n	8003d74 <HAL_GPIO_DeInit+0xd4>
 8003d66:	2303      	movs	r3, #3
 8003d68:	e004      	b.n	8003d74 <HAL_GPIO_DeInit+0xd4>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e002      	b.n	8003d74 <HAL_GPIO_DeInit+0xd4>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <HAL_GPIO_DeInit+0xd4>
 8003d72:	2300      	movs	r3, #0
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	f002 0203 	and.w	r2, r2, #3
 8003d7a:	0092      	lsls	r2, r2, #2
 8003d7c:	4093      	lsls	r3, r2
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d132      	bne.n	8003dea <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003d84:	4b4b      	ldr	r3, [pc, #300]	; (8003eb4 <HAL_GPIO_DeInit+0x214>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	4949      	ldr	r1, [pc, #292]	; (8003eb4 <HAL_GPIO_DeInit+0x214>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003d92:	4b48      	ldr	r3, [pc, #288]	; (8003eb4 <HAL_GPIO_DeInit+0x214>)
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	4946      	ldr	r1, [pc, #280]	; (8003eb4 <HAL_GPIO_DeInit+0x214>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003da0:	4b44      	ldr	r3, [pc, #272]	; (8003eb4 <HAL_GPIO_DeInit+0x214>)
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	43db      	mvns	r3, r3
 8003da8:	4942      	ldr	r1, [pc, #264]	; (8003eb4 <HAL_GPIO_DeInit+0x214>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003dae:	4b41      	ldr	r3, [pc, #260]	; (8003eb4 <HAL_GPIO_DeInit+0x214>)
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	43db      	mvns	r3, r3
 8003db6:	493f      	ldr	r1, [pc, #252]	; (8003eb4 <HAL_GPIO_DeInit+0x214>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	220f      	movs	r2, #15
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003dcc:	4a2e      	ldr	r2, [pc, #184]	; (8003e88 <HAL_GPIO_DeInit+0x1e8>)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	089b      	lsrs	r3, r3, #2
 8003dd2:	3302      	adds	r3, #2
 8003dd4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	43da      	mvns	r2, r3
 8003ddc:	482a      	ldr	r0, [pc, #168]	; (8003e88 <HAL_GPIO_DeInit+0x1e8>)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	089b      	lsrs	r3, r3, #2
 8003de2:	400a      	ands	r2, r1
 8003de4:	3302      	adds	r3, #2
 8003de6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	2103      	movs	r1, #3
 8003df4:	fa01 f303 	lsl.w	r3, r1, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	08da      	lsrs	r2, r3, #3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3208      	adds	r2, #8
 8003e08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	220f      	movs	r2, #15
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	08d2      	lsrs	r2, r2, #3
 8003e20:	4019      	ands	r1, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3208      	adds	r2, #8
 8003e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	2103      	movs	r1, #3
 8003e34:	fa01 f303 	lsl.w	r3, r1, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	2101      	movs	r1, #1
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	401a      	ands	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	2103      	movs	r1, #3
 8003e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	401a      	ands	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2b0f      	cmp	r3, #15
 8003e74:	f67f af22 	bls.w	8003cbc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40013800 	.word	0x40013800
 8003e8c:	40020000 	.word	0x40020000
 8003e90:	40020400 	.word	0x40020400
 8003e94:	40020800 	.word	0x40020800
 8003e98:	40020c00 	.word	0x40020c00
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	40021400 	.word	0x40021400
 8003ea4:	40021800 	.word	0x40021800
 8003ea8:	40021c00 	.word	0x40021c00
 8003eac:	40022000 	.word	0x40022000
 8003eb0:	40022400 	.word	0x40022400
 8003eb4:	40013c00 	.word	0x40013c00

08003eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	807b      	strh	r3, [r7, #2]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ec8:	787b      	ldrb	r3, [r7, #1]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ece:	887a      	ldrh	r2, [r7, #2]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ed4:	e003      	b.n	8003ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ed6:	887b      	ldrh	r3, [r7, #2]
 8003ed8:	041a      	lsls	r2, r3, #16
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	619a      	str	r2, [r3, #24]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e12b      	b.n	8004156 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fc ffce 	bl	8000eb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2224      	movs	r2, #36	; 0x24
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f50:	f001 f98e 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8003f54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4a81      	ldr	r2, [pc, #516]	; (8004160 <HAL_I2C_Init+0x274>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d807      	bhi.n	8003f70 <HAL_I2C_Init+0x84>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a80      	ldr	r2, [pc, #512]	; (8004164 <HAL_I2C_Init+0x278>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	bf94      	ite	ls
 8003f68:	2301      	movls	r3, #1
 8003f6a:	2300      	movhi	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	e006      	b.n	8003f7e <HAL_I2C_Init+0x92>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4a7d      	ldr	r2, [pc, #500]	; (8004168 <HAL_I2C_Init+0x27c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	bf94      	ite	ls
 8003f78:	2301      	movls	r3, #1
 8003f7a:	2300      	movhi	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e0e7      	b.n	8004156 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4a78      	ldr	r2, [pc, #480]	; (800416c <HAL_I2C_Init+0x280>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	0c9b      	lsrs	r3, r3, #18
 8003f90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4a6a      	ldr	r2, [pc, #424]	; (8004160 <HAL_I2C_Init+0x274>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d802      	bhi.n	8003fc0 <HAL_I2C_Init+0xd4>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	e009      	b.n	8003fd4 <HAL_I2C_Init+0xe8>
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fc6:	fb02 f303 	mul.w	r3, r2, r3
 8003fca:	4a69      	ldr	r2, [pc, #420]	; (8004170 <HAL_I2C_Init+0x284>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	099b      	lsrs	r3, r3, #6
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fe6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	495c      	ldr	r1, [pc, #368]	; (8004160 <HAL_I2C_Init+0x274>)
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	d819      	bhi.n	8004028 <HAL_I2C_Init+0x13c>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1e59      	subs	r1, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004002:	1c59      	adds	r1, r3, #1
 8004004:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004008:	400b      	ands	r3, r1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_I2C_Init+0x138>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1e59      	subs	r1, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	fbb1 f3f3 	udiv	r3, r1, r3
 800401c:	3301      	adds	r3, #1
 800401e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004022:	e051      	b.n	80040c8 <HAL_I2C_Init+0x1dc>
 8004024:	2304      	movs	r3, #4
 8004026:	e04f      	b.n	80040c8 <HAL_I2C_Init+0x1dc>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d111      	bne.n	8004054 <HAL_I2C_Init+0x168>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1e58      	subs	r0, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	440b      	add	r3, r1
 800403e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004042:	3301      	adds	r3, #1
 8004044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004048:	2b00      	cmp	r3, #0
 800404a:	bf0c      	ite	eq
 800404c:	2301      	moveq	r3, #1
 800404e:	2300      	movne	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e012      	b.n	800407a <HAL_I2C_Init+0x18e>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	1e58      	subs	r0, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6859      	ldr	r1, [r3, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	0099      	lsls	r1, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	fbb0 f3f3 	udiv	r3, r0, r3
 800406a:	3301      	adds	r3, #1
 800406c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004070:	2b00      	cmp	r3, #0
 8004072:	bf0c      	ite	eq
 8004074:	2301      	moveq	r3, #1
 8004076:	2300      	movne	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_I2C_Init+0x196>
 800407e:	2301      	movs	r3, #1
 8004080:	e022      	b.n	80040c8 <HAL_I2C_Init+0x1dc>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10e      	bne.n	80040a8 <HAL_I2C_Init+0x1bc>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1e58      	subs	r0, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6859      	ldr	r1, [r3, #4]
 8004092:	460b      	mov	r3, r1
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	440b      	add	r3, r1
 8004098:	fbb0 f3f3 	udiv	r3, r0, r3
 800409c:	3301      	adds	r3, #1
 800409e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a6:	e00f      	b.n	80040c8 <HAL_I2C_Init+0x1dc>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	1e58      	subs	r0, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6859      	ldr	r1, [r3, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	0099      	lsls	r1, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80040be:	3301      	adds	r3, #1
 80040c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	6809      	ldr	r1, [r1, #0]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69da      	ldr	r2, [r3, #28]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6911      	ldr	r1, [r2, #16]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68d2      	ldr	r2, [r2, #12]
 8004102:	4311      	orrs	r1, r2
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	430b      	orrs	r3, r1
 800410a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0201 	orr.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	000186a0 	.word	0x000186a0
 8004164:	001e847f 	.word	0x001e847f
 8004168:	003d08ff 	.word	0x003d08ff
 800416c:	431bde83 	.word	0x431bde83
 8004170:	10624dd3 	.word	0x10624dd3

08004174 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b20      	cmp	r3, #32
 8004188:	d129      	bne.n	80041de <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2224      	movs	r2, #36	; 0x24
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0210 	bic.w	r2, r2, #16
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e000      	b.n	80041e0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80041de:	2302      	movs	r3, #2
  }
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b20      	cmp	r3, #32
 8004204:	d12a      	bne.n	800425c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2224      	movs	r2, #36	; 0x24
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0201 	bic.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004226:	89fb      	ldrh	r3, [r7, #14]
 8004228:	f023 030f 	bic.w	r3, r3, #15
 800422c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	b29a      	uxth	r2, r3
 8004232:	89fb      	ldrh	r3, [r7, #14]
 8004234:	4313      	orrs	r3, r2
 8004236:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	89fa      	ldrh	r2, [r7, #14]
 800423e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e0bf      	b.n	80043fe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fc fe78 	bl	8000f88 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80042ae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6999      	ldr	r1, [r3, #24]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042c4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6899      	ldr	r1, [r3, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4b4a      	ldr	r3, [pc, #296]	; (8004408 <HAL_LTDC_Init+0x19c>)
 80042e0:	400b      	ands	r3, r1
 80042e2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	041b      	lsls	r3, r3, #16
 80042ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6899      	ldr	r1, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68d9      	ldr	r1, [r3, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4b3e      	ldr	r3, [pc, #248]	; (8004408 <HAL_LTDC_Init+0x19c>)
 800430e:	400b      	ands	r3, r1
 8004310:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68d9      	ldr	r1, [r3, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6919      	ldr	r1, [r3, #16]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b33      	ldr	r3, [pc, #204]	; (8004408 <HAL_LTDC_Init+0x19c>)
 800433c:	400b      	ands	r3, r1
 800433e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6919      	ldr	r1, [r3, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6959      	ldr	r1, [r3, #20]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b27      	ldr	r3, [pc, #156]	; (8004408 <HAL_LTDC_Init+0x19c>)
 800436a:	400b      	ands	r3, r1
 800436c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	041b      	lsls	r3, r3, #16
 8004374:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6959      	ldr	r1, [r3, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004392:	021b      	lsls	r3, r3, #8
 8004394:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800439c:	041b      	lsls	r3, r3, #16
 800439e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80043ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0206 	orr.w	r2, r2, #6
 80043da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	f000f800 	.word	0xf000f800

0800440c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004422:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d023      	beq.n	8004476 <HAL_LTDC_IRQHandler+0x6a>
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01e      	beq.n	8004476 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0204 	bic.w	r2, r2, #4
 8004446:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2204      	movs	r2, #4
 800444e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004456:	f043 0201 	orr.w	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2204      	movs	r2, #4
 8004464:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f86f 	bl	8004554 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d023      	beq.n	80044c8 <HAL_LTDC_IRQHandler+0xbc>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d01e      	beq.n	80044c8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0202 	bic.w	r2, r2, #2
 8004498:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2202      	movs	r2, #2
 80044a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044a8:	f043 0202 	orr.w	r2, r3, #2
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2204      	movs	r2, #4
 80044b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f846 	bl	8004554 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01b      	beq.n	800450a <HAL_LTDC_IRQHandler+0xfe>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d016      	beq.n	800450a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0201 	bic.w	r2, r2, #1
 80044ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2201      	movs	r2, #1
 80044f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f82f 	bl	8004568 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01b      	beq.n	800454c <HAL_LTDC_IRQHandler+0x140>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d016      	beq.n	800454c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0208 	bic.w	r2, r2, #8
 800452c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2208      	movs	r2, #8
 8004534:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f818 	bl	800457c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800454c:	bf00      	nop
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004590:	b5b0      	push	{r4, r5, r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_LTDC_ConfigLayer+0x1a>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e02c      	b.n	8004604 <HAL_LTDC_ConfigLayer+0x74>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2202      	movs	r2, #2
 80045b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2134      	movs	r1, #52	; 0x34
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	4413      	add	r3, r2
 80045c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4614      	mov	r4, r2
 80045ce:	461d      	mov	r5, r3
 80045d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f83b 	bl	8004660 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2201      	movs	r2, #1
 80045f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bdb0      	pop	{r4, r5, r7, pc}

0800460c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_LTDC_EnableDither+0x16>
 800461e:	2302      	movs	r3, #2
 8004620:	e016      	b.n	8004650 <HAL_LTDC_EnableDither+0x44>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2202      	movs	r2, #2
 800462e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004632:	4b0a      	ldr	r3, [pc, #40]	; (800465c <HAL_LTDC_EnableDither+0x50>)
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	4a09      	ldr	r2, [pc, #36]	; (800465c <HAL_LTDC_EnableDither+0x50>)
 8004638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800463c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	40016800 	.word	0x40016800

08004660 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	; 0x24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	0c1b      	lsrs	r3, r3, #16
 8004678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467c:	4413      	add	r3, r2
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	01db      	lsls	r3, r3, #7
 800468c:	4413      	add	r3, r2
 800468e:	3384      	adds	r3, #132	; 0x84
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	4611      	mov	r1, r2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	01d2      	lsls	r2, r2, #7
 800469c:	440a      	add	r2, r1
 800469e:	3284      	adds	r2, #132	; 0x84
 80046a0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80046a4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80046b6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80046b8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4619      	mov	r1, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	01db      	lsls	r3, r3, #7
 80046c4:	440b      	add	r3, r1
 80046c6:	3384      	adds	r3, #132	; 0x84
 80046c8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80046ce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046de:	4413      	add	r3, r2
 80046e0:	041b      	lsls	r3, r3, #16
 80046e2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	01db      	lsls	r3, r3, #7
 80046ee:	4413      	add	r3, r2
 80046f0:	3384      	adds	r3, #132	; 0x84
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	4611      	mov	r1, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	01d2      	lsls	r2, r2, #7
 80046fe:	440a      	add	r2, r1
 8004700:	3284      	adds	r2, #132	; 0x84
 8004702:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004706:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004716:	4413      	add	r3, r2
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4619      	mov	r1, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	01db      	lsls	r3, r3, #7
 8004724:	440b      	add	r3, r1
 8004726:	3384      	adds	r3, #132	; 0x84
 8004728:	4619      	mov	r1, r3
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	4313      	orrs	r3, r2
 800472e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	01db      	lsls	r3, r3, #7
 800473a:	4413      	add	r3, r2
 800473c:	3384      	adds	r3, #132	; 0x84
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	4611      	mov	r1, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	01d2      	lsls	r2, r2, #7
 800474a:	440a      	add	r2, r1
 800474c:	3284      	adds	r2, #132	; 0x84
 800474e:	f023 0307 	bic.w	r3, r3, #7
 8004752:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	01db      	lsls	r3, r3, #7
 800475e:	4413      	add	r3, r2
 8004760:	3384      	adds	r3, #132	; 0x84
 8004762:	461a      	mov	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800477a:	041b      	lsls	r3, r3, #16
 800477c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	061b      	lsls	r3, r3, #24
 8004784:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	01db      	lsls	r3, r3, #7
 8004790:	4413      	add	r3, r2
 8004792:	3384      	adds	r3, #132	; 0x84
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	01db      	lsls	r3, r3, #7
 80047a0:	4413      	add	r3, r2
 80047a2:	3384      	adds	r3, #132	; 0x84
 80047a4:	461a      	mov	r2, r3
 80047a6:	2300      	movs	r3, #0
 80047a8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047b0:	461a      	mov	r2, r3
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	431a      	orrs	r2, r3
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	431a      	orrs	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4619      	mov	r1, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	01db      	lsls	r3, r3, #7
 80047c4:	440b      	add	r3, r1
 80047c6:	3384      	adds	r3, #132	; 0x84
 80047c8:	4619      	mov	r1, r3
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	01db      	lsls	r3, r3, #7
 80047da:	4413      	add	r3, r2
 80047dc:	3384      	adds	r3, #132	; 0x84
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	4611      	mov	r1, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	01d2      	lsls	r2, r2, #7
 80047ea:	440a      	add	r2, r1
 80047ec:	3284      	adds	r2, #132	; 0x84
 80047ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047f2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	01db      	lsls	r3, r3, #7
 80047fe:	4413      	add	r3, r2
 8004800:	3384      	adds	r3, #132	; 0x84
 8004802:	461a      	mov	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	01db      	lsls	r3, r3, #7
 8004814:	4413      	add	r3, r2
 8004816:	3384      	adds	r3, #132	; 0x84
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	4611      	mov	r1, r2
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	01d2      	lsls	r2, r2, #7
 8004824:	440a      	add	r2, r1
 8004826:	3284      	adds	r2, #132	; 0x84
 8004828:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800482c:	f023 0307 	bic.w	r3, r3, #7
 8004830:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	69da      	ldr	r2, [r3, #28]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	68f9      	ldr	r1, [r7, #12]
 800483c:	6809      	ldr	r1, [r1, #0]
 800483e:	4608      	mov	r0, r1
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	01c9      	lsls	r1, r1, #7
 8004844:	4401      	add	r1, r0
 8004846:	3184      	adds	r1, #132	; 0x84
 8004848:	4313      	orrs	r3, r2
 800484a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	01db      	lsls	r3, r3, #7
 8004856:	4413      	add	r3, r2
 8004858:	3384      	adds	r3, #132	; 0x84
 800485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	01db      	lsls	r3, r3, #7
 8004866:	4413      	add	r3, r2
 8004868:	3384      	adds	r3, #132	; 0x84
 800486a:	461a      	mov	r2, r3
 800486c:	2300      	movs	r3, #0
 800486e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	01db      	lsls	r3, r3, #7
 800487a:	4413      	add	r3, r2
 800487c:	3384      	adds	r3, #132	; 0x84
 800487e:	461a      	mov	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d102      	bne.n	8004894 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800488e:	2304      	movs	r3, #4
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	e01b      	b.n	80048cc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d102      	bne.n	80048a2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800489c:	2303      	movs	r3, #3
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	e014      	b.n	80048cc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d00b      	beq.n	80048c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d007      	beq.n	80048c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d003      	beq.n	80048c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80048be:	2b07      	cmp	r3, #7
 80048c0:	d102      	bne.n	80048c8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80048c2:	2302      	movs	r3, #2
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	e001      	b.n	80048cc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80048c8:	2301      	movs	r3, #1
 80048ca:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	01db      	lsls	r3, r3, #7
 80048d6:	4413      	add	r3, r2
 80048d8:	3384      	adds	r3, #132	; 0x84
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	4611      	mov	r1, r2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	01d2      	lsls	r2, r2, #7
 80048e6:	440a      	add	r2, r1
 80048e8:	3284      	adds	r2, #132	; 0x84
 80048ea:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80048ee:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	fb02 f303 	mul.w	r3, r2, r3
 80048fa:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	1acb      	subs	r3, r1, r3
 8004906:	69f9      	ldr	r1, [r7, #28]
 8004908:	fb01 f303 	mul.w	r3, r1, r3
 800490c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800490e:	68f9      	ldr	r1, [r7, #12]
 8004910:	6809      	ldr	r1, [r1, #0]
 8004912:	4608      	mov	r0, r1
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	01c9      	lsls	r1, r1, #7
 8004918:	4401      	add	r1, r0
 800491a:	3184      	adds	r1, #132	; 0x84
 800491c:	4313      	orrs	r3, r2
 800491e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	01db      	lsls	r3, r3, #7
 800492a:	4413      	add	r3, r2
 800492c:	3384      	adds	r3, #132	; 0x84
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	4611      	mov	r1, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	01d2      	lsls	r2, r2, #7
 800493a:	440a      	add	r2, r1
 800493c:	3284      	adds	r2, #132	; 0x84
 800493e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004942:	f023 0307 	bic.w	r3, r3, #7
 8004946:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	01db      	lsls	r3, r3, #7
 8004952:	4413      	add	r3, r2
 8004954:	3384      	adds	r3, #132	; 0x84
 8004956:	461a      	mov	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	01db      	lsls	r3, r3, #7
 8004968:	4413      	add	r3, r2
 800496a:	3384      	adds	r3, #132	; 0x84
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	4611      	mov	r1, r2
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	01d2      	lsls	r2, r2, #7
 8004978:	440a      	add	r2, r1
 800497a:	3284      	adds	r2, #132	; 0x84
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6013      	str	r3, [r2, #0]
}
 8004982:	bf00      	nop
 8004984:	3724      	adds	r7, #36	; 0x24
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e267      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d075      	beq.n	8004a9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ae:	4b88      	ldr	r3, [pc, #544]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d00c      	beq.n	80049d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ba:	4b85      	ldr	r3, [pc, #532]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d112      	bne.n	80049ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049c6:	4b82      	ldr	r3, [pc, #520]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d2:	d10b      	bne.n	80049ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d4:	4b7e      	ldr	r3, [pc, #504]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d05b      	beq.n	8004a98 <HAL_RCC_OscConfig+0x108>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d157      	bne.n	8004a98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e242      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f4:	d106      	bne.n	8004a04 <HAL_RCC_OscConfig+0x74>
 80049f6:	4b76      	ldr	r3, [pc, #472]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a75      	ldr	r2, [pc, #468]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	e01d      	b.n	8004a40 <HAL_RCC_OscConfig+0xb0>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a0c:	d10c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x98>
 8004a0e:	4b70      	ldr	r3, [pc, #448]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a6f      	ldr	r2, [pc, #444]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	4b6d      	ldr	r3, [pc, #436]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a6c      	ldr	r2, [pc, #432]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	e00b      	b.n	8004a40 <HAL_RCC_OscConfig+0xb0>
 8004a28:	4b69      	ldr	r3, [pc, #420]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a68      	ldr	r2, [pc, #416]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	4b66      	ldr	r3, [pc, #408]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a65      	ldr	r2, [pc, #404]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d013      	beq.n	8004a70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fe f8f6 	bl	8002c38 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a50:	f7fe f8f2 	bl	8002c38 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b64      	cmp	r3, #100	; 0x64
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e207      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a62:	4b5b      	ldr	r3, [pc, #364]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0xc0>
 8004a6e:	e014      	b.n	8004a9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a70:	f7fe f8e2 	bl	8002c38 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a78:	f7fe f8de 	bl	8002c38 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b64      	cmp	r3, #100	; 0x64
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e1f3      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a8a:	4b51      	ldr	r3, [pc, #324]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0xe8>
 8004a96:	e000      	b.n	8004a9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d063      	beq.n	8004b6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aa6:	4b4a      	ldr	r3, [pc, #296]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00b      	beq.n	8004aca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ab2:	4b47      	ldr	r3, [pc, #284]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d11c      	bne.n	8004af8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004abe:	4b44      	ldr	r3, [pc, #272]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d116      	bne.n	8004af8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aca:	4b41      	ldr	r3, [pc, #260]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x152>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d001      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e1c7      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae2:	4b3b      	ldr	r3, [pc, #236]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	4937      	ldr	r1, [pc, #220]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004af6:	e03a      	b.n	8004b6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d020      	beq.n	8004b42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b00:	4b34      	ldr	r3, [pc, #208]	; (8004bd4 <HAL_RCC_OscConfig+0x244>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b06:	f7fe f897 	bl	8002c38 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b0e:	f7fe f893 	bl	8002c38 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e1a8      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b20:	4b2b      	ldr	r3, [pc, #172]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f0      	beq.n	8004b0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2c:	4b28      	ldr	r3, [pc, #160]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	4925      	ldr	r1, [pc, #148]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	600b      	str	r3, [r1, #0]
 8004b40:	e015      	b.n	8004b6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b42:	4b24      	ldr	r3, [pc, #144]	; (8004bd4 <HAL_RCC_OscConfig+0x244>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fe f876 	bl	8002c38 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b50:	f7fe f872 	bl	8002c38 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e187      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b62:	4b1b      	ldr	r3, [pc, #108]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d036      	beq.n	8004be8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d016      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <HAL_RCC_OscConfig+0x248>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b88:	f7fe f856 	bl	8002c38 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b90:	f7fe f852 	bl	8002c38 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e167      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0x200>
 8004bae:	e01b      	b.n	8004be8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bb0:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <HAL_RCC_OscConfig+0x248>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bb6:	f7fe f83f 	bl	8002c38 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bbc:	e00e      	b.n	8004bdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bbe:	f7fe f83b 	bl	8002c38 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d907      	bls.n	8004bdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e150      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	42470000 	.word	0x42470000
 8004bd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bdc:	4b88      	ldr	r3, [pc, #544]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1ea      	bne.n	8004bbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 8097 	beq.w	8004d24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfa:	4b81      	ldr	r3, [pc, #516]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10f      	bne.n	8004c26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	4b7d      	ldr	r3, [pc, #500]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	4a7c      	ldr	r2, [pc, #496]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c14:	6413      	str	r3, [r2, #64]	; 0x40
 8004c16:	4b7a      	ldr	r3, [pc, #488]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c22:	2301      	movs	r3, #1
 8004c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c26:	4b77      	ldr	r3, [pc, #476]	; (8004e04 <HAL_RCC_OscConfig+0x474>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d118      	bne.n	8004c64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c32:	4b74      	ldr	r3, [pc, #464]	; (8004e04 <HAL_RCC_OscConfig+0x474>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a73      	ldr	r2, [pc, #460]	; (8004e04 <HAL_RCC_OscConfig+0x474>)
 8004c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3e:	f7fd fffb 	bl	8002c38 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c46:	f7fd fff7 	bl	8002c38 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e10c      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c58:	4b6a      	ldr	r3, [pc, #424]	; (8004e04 <HAL_RCC_OscConfig+0x474>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0f0      	beq.n	8004c46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d106      	bne.n	8004c7a <HAL_RCC_OscConfig+0x2ea>
 8004c6c:	4b64      	ldr	r3, [pc, #400]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	4a63      	ldr	r2, [pc, #396]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	6713      	str	r3, [r2, #112]	; 0x70
 8004c78:	e01c      	b.n	8004cb4 <HAL_RCC_OscConfig+0x324>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b05      	cmp	r3, #5
 8004c80:	d10c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x30c>
 8004c82:	4b5f      	ldr	r3, [pc, #380]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c86:	4a5e      	ldr	r2, [pc, #376]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c88:	f043 0304 	orr.w	r3, r3, #4
 8004c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c8e:	4b5c      	ldr	r3, [pc, #368]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	4a5b      	ldr	r2, [pc, #364]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c94:	f043 0301 	orr.w	r3, r3, #1
 8004c98:	6713      	str	r3, [r2, #112]	; 0x70
 8004c9a:	e00b      	b.n	8004cb4 <HAL_RCC_OscConfig+0x324>
 8004c9c:	4b58      	ldr	r3, [pc, #352]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca0:	4a57      	ldr	r2, [pc, #348]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	f023 0301 	bic.w	r3, r3, #1
 8004ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca8:	4b55      	ldr	r3, [pc, #340]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	4a54      	ldr	r2, [pc, #336]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004cae:	f023 0304 	bic.w	r3, r3, #4
 8004cb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d015      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbc:	f7fd ffbc 	bl	8002c38 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc2:	e00a      	b.n	8004cda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cc4:	f7fd ffb8 	bl	8002c38 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e0cb      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cda:	4b49      	ldr	r3, [pc, #292]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0ee      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x334>
 8004ce6:	e014      	b.n	8004d12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce8:	f7fd ffa6 	bl	8002c38 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cee:	e00a      	b.n	8004d06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf0:	f7fd ffa2 	bl	8002c38 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e0b5      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d06:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1ee      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d105      	bne.n	8004d24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d18:	4b39      	ldr	r3, [pc, #228]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	4a38      	ldr	r2, [pc, #224]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80a1 	beq.w	8004e70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d2e:	4b34      	ldr	r3, [pc, #208]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d05c      	beq.n	8004df4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d141      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d42:	4b31      	ldr	r3, [pc, #196]	; (8004e08 <HAL_RCC_OscConfig+0x478>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d48:	f7fd ff76 	bl	8002c38 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d50:	f7fd ff72 	bl	8002c38 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e087      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d62:	4b27      	ldr	r3, [pc, #156]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69da      	ldr	r2, [r3, #28]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	019b      	lsls	r3, r3, #6
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	3b01      	subs	r3, #1
 8004d88:	041b      	lsls	r3, r3, #16
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	061b      	lsls	r3, r3, #24
 8004d92:	491b      	ldr	r1, [pc, #108]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d98:	4b1b      	ldr	r3, [pc, #108]	; (8004e08 <HAL_RCC_OscConfig+0x478>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9e:	f7fd ff4b 	bl	8002c38 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da6:	f7fd ff47 	bl	8002c38 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e05c      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db8:	4b11      	ldr	r3, [pc, #68]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f0      	beq.n	8004da6 <HAL_RCC_OscConfig+0x416>
 8004dc4:	e054      	b.n	8004e70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc6:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <HAL_RCC_OscConfig+0x478>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dcc:	f7fd ff34 	bl	8002c38 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd4:	f7fd ff30 	bl	8002c38 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e045      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de6:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x444>
 8004df2:	e03d      	b.n	8004e70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d107      	bne.n	8004e0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e038      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
 8004e00:	40023800 	.word	0x40023800
 8004e04:	40007000 	.word	0x40007000
 8004e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <HAL_RCC_OscConfig+0x4ec>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d028      	beq.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d121      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d11a      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d111      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	085b      	lsrs	r3, r3, #1
 8004e54:	3b01      	subs	r3, #1
 8004e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d107      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40023800 	.word	0x40023800

08004e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0cc      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e94:	4b68      	ldr	r3, [pc, #416]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d90c      	bls.n	8004ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea2:	4b65      	ldr	r3, [pc, #404]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eaa:	4b63      	ldr	r3, [pc, #396]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0b8      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d020      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ed4:	4b59      	ldr	r3, [pc, #356]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4a58      	ldr	r2, [pc, #352]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004eec:	4b53      	ldr	r3, [pc, #332]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4a52      	ldr	r2, [pc, #328]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef8:	4b50      	ldr	r3, [pc, #320]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	494d      	ldr	r1, [pc, #308]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d044      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d107      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1e:	4b47      	ldr	r3, [pc, #284]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d119      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e07f      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d003      	beq.n	8004f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d107      	bne.n	8004f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3e:	4b3f      	ldr	r3, [pc, #252]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d109      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e06f      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4e:	4b3b      	ldr	r3, [pc, #236]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e067      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f5e:	4b37      	ldr	r3, [pc, #220]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f023 0203 	bic.w	r2, r3, #3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	4934      	ldr	r1, [pc, #208]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f70:	f7fd fe62 	bl	8002c38 <HAL_GetTick>
 8004f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f76:	e00a      	b.n	8004f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f78:	f7fd fe5e 	bl	8002c38 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e04f      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8e:	4b2b      	ldr	r3, [pc, #172]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 020c 	and.w	r2, r3, #12
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d1eb      	bne.n	8004f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b25      	ldr	r3, [pc, #148]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 030f 	and.w	r3, r3, #15
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d20c      	bcs.n	8004fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b22      	ldr	r3, [pc, #136]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	4b20      	ldr	r3, [pc, #128]	; (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e032      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d008      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd4:	4b19      	ldr	r3, [pc, #100]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	4916      	ldr	r1, [pc, #88]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d009      	beq.n	8005006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ff2:	4b12      	ldr	r3, [pc, #72]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	490e      	ldr	r1, [pc, #56]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	4313      	orrs	r3, r2
 8005004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005006:	f000 f821 	bl	800504c <HAL_RCC_GetSysClockFreq>
 800500a:	4602      	mov	r2, r0
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	091b      	lsrs	r3, r3, #4
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	490a      	ldr	r1, [pc, #40]	; (8005040 <HAL_RCC_ClockConfig+0x1c0>)
 8005018:	5ccb      	ldrb	r3, [r1, r3]
 800501a:	fa22 f303 	lsr.w	r3, r2, r3
 800501e:	4a09      	ldr	r2, [pc, #36]	; (8005044 <HAL_RCC_ClockConfig+0x1c4>)
 8005020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005022:	4b09      	ldr	r3, [pc, #36]	; (8005048 <HAL_RCC_ClockConfig+0x1c8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7fc fa4a 	bl	80014c0 <HAL_InitTick>

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40023c00 	.word	0x40023c00
 800503c:	40023800 	.word	0x40023800
 8005040:	080089f8 	.word	0x080089f8
 8005044:	20000000 	.word	0x20000000
 8005048:	2000004c 	.word	0x2000004c

0800504c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800504c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005050:	b094      	sub	sp, #80	; 0x50
 8005052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	647b      	str	r3, [r7, #68]	; 0x44
 8005058:	2300      	movs	r3, #0
 800505a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800505c:	2300      	movs	r3, #0
 800505e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005064:	4b79      	ldr	r3, [pc, #484]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 030c 	and.w	r3, r3, #12
 800506c:	2b08      	cmp	r3, #8
 800506e:	d00d      	beq.n	800508c <HAL_RCC_GetSysClockFreq+0x40>
 8005070:	2b08      	cmp	r3, #8
 8005072:	f200 80e1 	bhi.w	8005238 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <HAL_RCC_GetSysClockFreq+0x34>
 800507a:	2b04      	cmp	r3, #4
 800507c:	d003      	beq.n	8005086 <HAL_RCC_GetSysClockFreq+0x3a>
 800507e:	e0db      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005080:	4b73      	ldr	r3, [pc, #460]	; (8005250 <HAL_RCC_GetSysClockFreq+0x204>)
 8005082:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005084:	e0db      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005086:	4b73      	ldr	r3, [pc, #460]	; (8005254 <HAL_RCC_GetSysClockFreq+0x208>)
 8005088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800508a:	e0d8      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800508c:	4b6f      	ldr	r3, [pc, #444]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005094:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005096:	4b6d      	ldr	r3, [pc, #436]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d063      	beq.n	800516a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a2:	4b6a      	ldr	r3, [pc, #424]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	099b      	lsrs	r3, r3, #6
 80050a8:	2200      	movs	r2, #0
 80050aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b4:	633b      	str	r3, [r7, #48]	; 0x30
 80050b6:	2300      	movs	r3, #0
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050be:	4622      	mov	r2, r4
 80050c0:	462b      	mov	r3, r5
 80050c2:	f04f 0000 	mov.w	r0, #0
 80050c6:	f04f 0100 	mov.w	r1, #0
 80050ca:	0159      	lsls	r1, r3, #5
 80050cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d0:	0150      	lsls	r0, r2, #5
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4621      	mov	r1, r4
 80050d8:	1a51      	subs	r1, r2, r1
 80050da:	6139      	str	r1, [r7, #16]
 80050dc:	4629      	mov	r1, r5
 80050de:	eb63 0301 	sbc.w	r3, r3, r1
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050f0:	4659      	mov	r1, fp
 80050f2:	018b      	lsls	r3, r1, #6
 80050f4:	4651      	mov	r1, sl
 80050f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050fa:	4651      	mov	r1, sl
 80050fc:	018a      	lsls	r2, r1, #6
 80050fe:	4651      	mov	r1, sl
 8005100:	ebb2 0801 	subs.w	r8, r2, r1
 8005104:	4659      	mov	r1, fp
 8005106:	eb63 0901 	sbc.w	r9, r3, r1
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800511a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800511e:	4690      	mov	r8, r2
 8005120:	4699      	mov	r9, r3
 8005122:	4623      	mov	r3, r4
 8005124:	eb18 0303 	adds.w	r3, r8, r3
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	462b      	mov	r3, r5
 800512c:	eb49 0303 	adc.w	r3, r9, r3
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800513e:	4629      	mov	r1, r5
 8005140:	024b      	lsls	r3, r1, #9
 8005142:	4621      	mov	r1, r4
 8005144:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005148:	4621      	mov	r1, r4
 800514a:	024a      	lsls	r2, r1, #9
 800514c:	4610      	mov	r0, r2
 800514e:	4619      	mov	r1, r3
 8005150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005152:	2200      	movs	r2, #0
 8005154:	62bb      	str	r3, [r7, #40]	; 0x28
 8005156:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005158:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800515c:	f7fb f848 	bl	80001f0 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4613      	mov	r3, r2
 8005166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005168:	e058      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800516a:	4b38      	ldr	r3, [pc, #224]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	099b      	lsrs	r3, r3, #6
 8005170:	2200      	movs	r2, #0
 8005172:	4618      	mov	r0, r3
 8005174:	4611      	mov	r1, r2
 8005176:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800517a:	623b      	str	r3, [r7, #32]
 800517c:	2300      	movs	r3, #0
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
 8005180:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005184:	4642      	mov	r2, r8
 8005186:	464b      	mov	r3, r9
 8005188:	f04f 0000 	mov.w	r0, #0
 800518c:	f04f 0100 	mov.w	r1, #0
 8005190:	0159      	lsls	r1, r3, #5
 8005192:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005196:	0150      	lsls	r0, r2, #5
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4641      	mov	r1, r8
 800519e:	ebb2 0a01 	subs.w	sl, r2, r1
 80051a2:	4649      	mov	r1, r9
 80051a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051bc:	ebb2 040a 	subs.w	r4, r2, sl
 80051c0:	eb63 050b 	sbc.w	r5, r3, fp
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	00eb      	lsls	r3, r5, #3
 80051ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051d2:	00e2      	lsls	r2, r4, #3
 80051d4:	4614      	mov	r4, r2
 80051d6:	461d      	mov	r5, r3
 80051d8:	4643      	mov	r3, r8
 80051da:	18e3      	adds	r3, r4, r3
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	464b      	mov	r3, r9
 80051e0:	eb45 0303 	adc.w	r3, r5, r3
 80051e4:	607b      	str	r3, [r7, #4]
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051f2:	4629      	mov	r1, r5
 80051f4:	028b      	lsls	r3, r1, #10
 80051f6:	4621      	mov	r1, r4
 80051f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051fc:	4621      	mov	r1, r4
 80051fe:	028a      	lsls	r2, r1, #10
 8005200:	4610      	mov	r0, r2
 8005202:	4619      	mov	r1, r3
 8005204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005206:	2200      	movs	r2, #0
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	61fa      	str	r2, [r7, #28]
 800520c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005210:	f7fa ffee 	bl	80001f0 <__aeabi_uldivmod>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4613      	mov	r3, r2
 800521a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800521c:	4b0b      	ldr	r3, [pc, #44]	; (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	3301      	adds	r3, #1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800522c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800522e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005230:	fbb2 f3f3 	udiv	r3, r2, r3
 8005234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005236:	e002      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005238:	4b05      	ldr	r3, [pc, #20]	; (8005250 <HAL_RCC_GetSysClockFreq+0x204>)
 800523a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800523c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800523e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005240:	4618      	mov	r0, r3
 8005242:	3750      	adds	r7, #80	; 0x50
 8005244:	46bd      	mov	sp, r7
 8005246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524a:	bf00      	nop
 800524c:	40023800 	.word	0x40023800
 8005250:	00f42400 	.word	0x00f42400
 8005254:	007a1200 	.word	0x007a1200

08005258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <HAL_RCC_GetHCLKFreq+0x14>)
 800525e:	681b      	ldr	r3, [r3, #0]
}
 8005260:	4618      	mov	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20000000 	.word	0x20000000

08005270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005274:	f7ff fff0 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b05      	ldr	r3, [pc, #20]	; (8005290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	0a9b      	lsrs	r3, r3, #10
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4903      	ldr	r1, [pc, #12]	; (8005294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40023800 	.word	0x40023800
 8005294:	08008a08 	.word	0x08008a08

08005298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800529c:	f7ff ffdc 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 80052a0:	4602      	mov	r2, r0
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	0b5b      	lsrs	r3, r3, #13
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	4903      	ldr	r1, [pc, #12]	; (80052bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ae:	5ccb      	ldrb	r3, [r1, r3]
 80052b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40023800 	.word	0x40023800
 80052bc:	08008a08 	.word	0x08008a08

080052c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	220f      	movs	r2, #15
 80052ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052d0:	4b12      	ldr	r3, [pc, #72]	; (800531c <HAL_RCC_GetClockConfig+0x5c>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 0203 	and.w	r2, r3, #3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052dc:	4b0f      	ldr	r3, [pc, #60]	; (800531c <HAL_RCC_GetClockConfig+0x5c>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052e8:	4b0c      	ldr	r3, [pc, #48]	; (800531c <HAL_RCC_GetClockConfig+0x5c>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80052f4:	4b09      	ldr	r3, [pc, #36]	; (800531c <HAL_RCC_GetClockConfig+0x5c>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	08db      	lsrs	r3, r3, #3
 80052fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005302:	4b07      	ldr	r3, [pc, #28]	; (8005320 <HAL_RCC_GetClockConfig+0x60>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 020f 	and.w	r2, r3, #15
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	601a      	str	r2, [r3, #0]
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40023800 	.word	0x40023800
 8005320:	40023c00 	.word	0x40023c00

08005324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10b      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005348:	2b00      	cmp	r3, #0
 800534a:	d105      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005354:	2b00      	cmp	r3, #0
 8005356:	d075      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005358:	4b91      	ldr	r3, [pc, #580]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800535e:	f7fd fc6b 	bl	8002c38 <HAL_GetTick>
 8005362:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005364:	e008      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005366:	f7fd fc67 	bl	8002c38 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e189      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005378:	4b8a      	ldr	r3, [pc, #552]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f0      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	019a      	lsls	r2, r3, #6
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	071b      	lsls	r3, r3, #28
 800539c:	4981      	ldr	r1, [pc, #516]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01f      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053b0:	4b7c      	ldr	r3, [pc, #496]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b6:	0f1b      	lsrs	r3, r3, #28
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	019a      	lsls	r2, r3, #6
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	061b      	lsls	r3, r3, #24
 80053ca:	431a      	orrs	r2, r3
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	071b      	lsls	r3, r3, #28
 80053d0:	4974      	ldr	r1, [pc, #464]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053d8:	4b72      	ldr	r3, [pc, #456]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053de:	f023 021f 	bic.w	r2, r3, #31
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	496e      	ldr	r1, [pc, #440]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00d      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	019a      	lsls	r2, r3, #6
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	061b      	lsls	r3, r3, #24
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	071b      	lsls	r3, r3, #28
 8005410:	4964      	ldr	r1, [pc, #400]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005412:	4313      	orrs	r3, r2
 8005414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005418:	4b61      	ldr	r3, [pc, #388]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800541a:	2201      	movs	r2, #1
 800541c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800541e:	f7fd fc0b 	bl	8002c38 <HAL_GetTick>
 8005422:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005424:	e008      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005426:	f7fd fc07 	bl	8002c38 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e129      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005438:	4b5a      	ldr	r3, [pc, #360]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0f0      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d105      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005458:	2b00      	cmp	r3, #0
 800545a:	d079      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800545c:	4b52      	ldr	r3, [pc, #328]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005462:	f7fd fbe9 	bl	8002c38 <HAL_GetTick>
 8005466:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005468:	e008      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800546a:	f7fd fbe5 	bl	8002c38 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e107      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800547c:	4b49      	ldr	r3, [pc, #292]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005488:	d0ef      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	d020      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005496:	4b43      	ldr	r3, [pc, #268]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549c:	0f1b      	lsrs	r3, r3, #28
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	019a      	lsls	r2, r3, #6
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	061b      	lsls	r3, r3, #24
 80054b0:	431a      	orrs	r2, r3
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	071b      	lsls	r3, r3, #28
 80054b6:	493b      	ldr	r1, [pc, #236]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054be:	4b39      	ldr	r3, [pc, #228]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	4934      	ldr	r1, [pc, #208]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01e      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054e4:	4b2f      	ldr	r3, [pc, #188]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ea:	0e1b      	lsrs	r3, r3, #24
 80054ec:	f003 030f 	and.w	r3, r3, #15
 80054f0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	019a      	lsls	r2, r3, #6
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	061b      	lsls	r3, r3, #24
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	071b      	lsls	r3, r3, #28
 8005504:	4927      	ldr	r1, [pc, #156]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800550c:	4b25      	ldr	r3, [pc, #148]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800550e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005512:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	4922      	ldr	r1, [pc, #136]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005522:	4b21      	ldr	r3, [pc, #132]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005524:	2201      	movs	r2, #1
 8005526:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005528:	f7fd fb86 	bl	8002c38 <HAL_GetTick>
 800552c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005530:	f7fd fb82 	bl	8002c38 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e0a4      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005542:	4b18      	ldr	r3, [pc, #96]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800554a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800554e:	d1ef      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 808b 	beq.w	8005674 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	4a0f      	ldr	r2, [pc, #60]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556c:	6413      	str	r3, [r2, #64]	; 0x40
 800556e:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800557a:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a0b      	ldr	r2, [pc, #44]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005584:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005586:	f7fd fb57 	bl	8002c38 <HAL_GetTick>
 800558a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800558c:	e010      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800558e:	f7fd fb53 	bl	8002c38 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d909      	bls.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e075      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80055a0:	42470068 	.word	0x42470068
 80055a4:	40023800 	.word	0x40023800
 80055a8:	42470070 	.word	0x42470070
 80055ac:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055b0:	4b38      	ldr	r3, [pc, #224]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d0e8      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055bc:	4b36      	ldr	r3, [pc, #216]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d02f      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d028      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055da:	4b2f      	ldr	r3, [pc, #188]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055e4:	4b2d      	ldr	r3, [pc, #180]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055ea:	4b2c      	ldr	r3, [pc, #176]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80055f0:	4a29      	ldr	r2, [pc, #164]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055f6:	4b28      	ldr	r3, [pc, #160]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d114      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005602:	f7fd fb19 	bl	8002c38 <HAL_GetTick>
 8005606:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005608:	e00a      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800560a:	f7fd fb15 	bl	8002c38 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	f241 3288 	movw	r2, #5000	; 0x1388
 8005618:	4293      	cmp	r3, r2
 800561a:	d901      	bls.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e035      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005620:	4b1d      	ldr	r3, [pc, #116]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0ee      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005638:	d10d      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800563a:	4b17      	ldr	r3, [pc, #92]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800564a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800564e:	4912      	ldr	r1, [pc, #72]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005650:	4313      	orrs	r3, r2
 8005652:	608b      	str	r3, [r1, #8]
 8005654:	e005      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005656:	4b10      	ldr	r3, [pc, #64]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	4a0f      	ldr	r2, [pc, #60]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800565c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005660:	6093      	str	r3, [r2, #8]
 8005662:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005664:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800566e:	490a      	ldr	r1, [pc, #40]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005670:	4313      	orrs	r3, r2
 8005672:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005686:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005688:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40007000 	.word	0x40007000
 8005698:	40023800 	.word	0x40023800
 800569c:	42470e40 	.word	0x42470e40
 80056a0:	424711e0 	.word	0x424711e0

080056a4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e025      	b.n	8005704 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d106      	bne.n	80056d2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7fb feed 	bl	80014ac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2202      	movs	r2, #2
 80056d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f001 fd91 	bl	800720c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	461a      	mov	r2, r3
 80056f4:	6839      	ldr	r1, [r7, #0]
 80056f6:	f001 fde6 	bl	80072c6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800571e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005720:	7dfb      	ldrb	r3, [r7, #23]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d101      	bne.n	800572a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8005726:	2302      	movs	r3, #2
 8005728:	e021      	b.n	800576e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800572a:	7dfb      	ldrb	r3, [r7, #23]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d002      	beq.n	8005736 <HAL_SDRAM_SendCommand+0x2a>
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	2b05      	cmp	r3, #5
 8005734:	d118      	bne.n	8005768 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2202      	movs	r2, #2
 800573a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	4618      	mov	r0, r3
 8005748:	f001 fe26 	bl	8007398 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d104      	bne.n	800575e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2205      	movs	r2, #5
 8005758:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800575c:	e006      	b.n	800576c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005766:	e001      	b.n	800576c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d101      	bne.n	8005790 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800578c:	2302      	movs	r3, #2
 800578e:	e016      	b.n	80057be <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b01      	cmp	r3, #1
 800579a:	d10f      	bne.n	80057bc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6839      	ldr	r1, [r7, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f001 fe31 	bl	8007412 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	e000      	b.n	80057be <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e07b      	b.n	80058d0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d108      	bne.n	80057f2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e8:	d009      	beq.n	80057fe <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	61da      	str	r2, [r3, #28]
 80057f0:	e005      	b.n	80057fe <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d106      	bne.n	800581e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7fb fce5 	bl	80011e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2202      	movs	r2, #2
 8005822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005834:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005850:	431a      	orrs	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005882:	ea42 0103 	orr.w	r1, r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	0c1b      	lsrs	r3, r3, #16
 800589c:	f003 0104 	and.w	r1, r3, #4
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	f003 0210 	and.w	r2, r3, #16
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69da      	ldr	r2, [r3, #28]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e01a      	b.n	8005920 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2202      	movs	r2, #2
 80058ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005900:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7fb fcb8 	bl	8001278 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	4613      	mov	r3, r2
 8005936:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_SPI_Transmit+0x22>
 8005946:	2302      	movs	r3, #2
 8005948:	e126      	b.n	8005b98 <HAL_SPI_Transmit+0x270>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005952:	f7fd f971 	bl	8002c38 <HAL_GetTick>
 8005956:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b01      	cmp	r3, #1
 8005966:	d002      	beq.n	800596e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005968:	2302      	movs	r3, #2
 800596a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800596c:	e10b      	b.n	8005b86 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <HAL_SPI_Transmit+0x52>
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d102      	bne.n	8005980 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800597e:	e102      	b.n	8005b86 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2203      	movs	r2, #3
 8005984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	88fa      	ldrh	r2, [r7, #6]
 8005998:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	88fa      	ldrh	r2, [r7, #6]
 800599e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c6:	d10f      	bne.n	80059e8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d007      	beq.n	8005a06 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a0e:	d14b      	bne.n	8005aa8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_SPI_Transmit+0xf6>
 8005a18:	8afb      	ldrh	r3, [r7, #22]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d13e      	bne.n	8005a9c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a22:	881a      	ldrh	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	1c9a      	adds	r2, r3, #2
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a42:	e02b      	b.n	8005a9c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d112      	bne.n	8005a78 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	881a      	ldrh	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	1c9a      	adds	r2, r3, #2
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a76:	e011      	b.n	8005a9c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a78:	f7fd f8de 	bl	8002c38 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d803      	bhi.n	8005a90 <HAL_SPI_Transmit+0x168>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8e:	d102      	bne.n	8005a96 <HAL_SPI_Transmit+0x16e>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d102      	bne.n	8005a9c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a9a:	e074      	b.n	8005b86 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1ce      	bne.n	8005a44 <HAL_SPI_Transmit+0x11c>
 8005aa6:	e04c      	b.n	8005b42 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_SPI_Transmit+0x18e>
 8005ab0:	8afb      	ldrh	r3, [r7, #22]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d140      	bne.n	8005b38 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	330c      	adds	r3, #12
 8005ac0:	7812      	ldrb	r2, [r2, #0]
 8005ac2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005adc:	e02c      	b.n	8005b38 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d113      	bne.n	8005b14 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	330c      	adds	r3, #12
 8005af6:	7812      	ldrb	r2, [r2, #0]
 8005af8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b12:	e011      	b.n	8005b38 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b14:	f7fd f890 	bl	8002c38 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d803      	bhi.n	8005b2c <HAL_SPI_Transmit+0x204>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2a:	d102      	bne.n	8005b32 <HAL_SPI_Transmit+0x20a>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d102      	bne.n	8005b38 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b36:	e026      	b.n	8005b86 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1cd      	bne.n	8005ade <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 fbda 	bl	8006300 <SPI_EndRxTxTransaction>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2220      	movs	r2, #32
 8005b56:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10a      	bne.n	8005b76 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b60:	2300      	movs	r3, #0
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	77fb      	strb	r3, [r7, #31]
 8005b82:	e000      	b.n	8005b86 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005b84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b96:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3720      	adds	r7, #32
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	603b      	str	r3, [r7, #0]
 8005bac:	4613      	mov	r3, r2
 8005bae:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bbc:	d112      	bne.n	8005be4 <HAL_SPI_Receive+0x44>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10e      	bne.n	8005be4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2204      	movs	r2, #4
 8005bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005bce:	88fa      	ldrh	r2, [r7, #6]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 f8f1 	bl	8005dc2 <HAL_SPI_TransmitReceive>
 8005be0:	4603      	mov	r3, r0
 8005be2:	e0ea      	b.n	8005dba <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_SPI_Receive+0x52>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e0e3      	b.n	8005dba <HAL_SPI_Receive+0x21a>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bfa:	f7fd f81d 	bl	8002c38 <HAL_GetTick>
 8005bfe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d002      	beq.n	8005c12 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c10:	e0ca      	b.n	8005da8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <HAL_SPI_Receive+0x7e>
 8005c18:	88fb      	ldrh	r3, [r7, #6]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d102      	bne.n	8005c24 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c22:	e0c1      	b.n	8005da8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2204      	movs	r2, #4
 8005c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	88fa      	ldrh	r2, [r7, #6]
 8005c3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	88fa      	ldrh	r2, [r7, #6]
 8005c42:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c6a:	d10f      	bne.n	8005c8c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c8a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c96:	2b40      	cmp	r3, #64	; 0x40
 8005c98:	d007      	beq.n	8005caa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ca8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d162      	bne.n	8005d78 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005cb2:	e02e      	b.n	8005d12 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d115      	bne.n	8005cee <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f103 020c 	add.w	r2, r3, #12
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	7812      	ldrb	r2, [r2, #0]
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cec:	e011      	b.n	8005d12 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cee:	f7fc ffa3 	bl	8002c38 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d803      	bhi.n	8005d06 <HAL_SPI_Receive+0x166>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d04:	d102      	bne.n	8005d0c <HAL_SPI_Receive+0x16c>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d102      	bne.n	8005d12 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d10:	e04a      	b.n	8005da8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1cb      	bne.n	8005cb4 <HAL_SPI_Receive+0x114>
 8005d1c:	e031      	b.n	8005d82 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d113      	bne.n	8005d54 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	b292      	uxth	r2, r2
 8005d38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	1c9a      	adds	r2, r3, #2
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d52:	e011      	b.n	8005d78 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d54:	f7fc ff70 	bl	8002c38 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d803      	bhi.n	8005d6c <HAL_SPI_Receive+0x1cc>
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6a:	d102      	bne.n	8005d72 <HAL_SPI_Receive+0x1d2>
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d102      	bne.n	8005d78 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d76:	e017      	b.n	8005da8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1cd      	bne.n	8005d1e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	6839      	ldr	r1, [r7, #0]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 fa54 	bl	8006234 <SPI_EndRxTransaction>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2220      	movs	r2, #32
 8005d96:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	75fb      	strb	r3, [r7, #23]
 8005da4:	e000      	b.n	8005da8 <HAL_SPI_Receive+0x208>
  }

error :
 8005da6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b08c      	sub	sp, #48	; 0x30
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	607a      	str	r2, [r7, #4]
 8005dce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d101      	bne.n	8005de8 <HAL_SPI_TransmitReceive+0x26>
 8005de4:	2302      	movs	r3, #2
 8005de6:	e18a      	b.n	80060fe <HAL_SPI_TransmitReceive+0x33c>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005df0:	f7fc ff22 	bl	8002c38 <HAL_GetTick>
 8005df4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e06:	887b      	ldrh	r3, [r7, #2]
 8005e08:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d00f      	beq.n	8005e32 <HAL_SPI_TransmitReceive+0x70>
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e18:	d107      	bne.n	8005e2a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d103      	bne.n	8005e2a <HAL_SPI_TransmitReceive+0x68>
 8005e22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d003      	beq.n	8005e32 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e30:	e15b      	b.n	80060ea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <HAL_SPI_TransmitReceive+0x82>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <HAL_SPI_TransmitReceive+0x82>
 8005e3e:	887b      	ldrh	r3, [r7, #2]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d103      	bne.n	8005e4c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e4a:	e14e      	b.n	80060ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d003      	beq.n	8005e60 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2205      	movs	r2, #5
 8005e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	887a      	ldrh	r2, [r7, #2]
 8005e70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	887a      	ldrh	r2, [r7, #2]
 8005e76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	887a      	ldrh	r2, [r7, #2]
 8005e82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	887a      	ldrh	r2, [r7, #2]
 8005e88:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea0:	2b40      	cmp	r3, #64	; 0x40
 8005ea2:	d007      	beq.n	8005eb4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ebc:	d178      	bne.n	8005fb0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <HAL_SPI_TransmitReceive+0x10a>
 8005ec6:	8b7b      	ldrh	r3, [r7, #26]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d166      	bne.n	8005f9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	881a      	ldrh	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005edc:	1c9a      	adds	r2, r3, #2
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ef0:	e053      	b.n	8005f9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d11b      	bne.n	8005f38 <HAL_SPI_TransmitReceive+0x176>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d016      	beq.n	8005f38 <HAL_SPI_TransmitReceive+0x176>
 8005f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d113      	bne.n	8005f38 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	881a      	ldrh	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	1c9a      	adds	r2, r3, #2
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d119      	bne.n	8005f7a <HAL_SPI_TransmitReceive+0x1b8>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d014      	beq.n	8005f7a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	b292      	uxth	r2, r2
 8005f5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f62:	1c9a      	adds	r2, r3, #2
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f76:	2301      	movs	r3, #1
 8005f78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f7a:	f7fc fe5d 	bl	8002c38 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d807      	bhi.n	8005f9a <HAL_SPI_TransmitReceive+0x1d8>
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d003      	beq.n	8005f9a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005f98:	e0a7      	b.n	80060ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1a6      	bne.n	8005ef2 <HAL_SPI_TransmitReceive+0x130>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1a1      	bne.n	8005ef2 <HAL_SPI_TransmitReceive+0x130>
 8005fae:	e07c      	b.n	80060aa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <HAL_SPI_TransmitReceive+0x1fc>
 8005fb8:	8b7b      	ldrh	r3, [r7, #26]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d16b      	bne.n	8006096 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	330c      	adds	r3, #12
 8005fc8:	7812      	ldrb	r2, [r2, #0]
 8005fca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fe4:	e057      	b.n	8006096 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d11c      	bne.n	800602e <HAL_SPI_TransmitReceive+0x26c>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d017      	beq.n	800602e <HAL_SPI_TransmitReceive+0x26c>
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	2b01      	cmp	r3, #1
 8006002:	d114      	bne.n	800602e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	330c      	adds	r3, #12
 800600e:	7812      	ldrb	r2, [r2, #0]
 8006010:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b01      	subs	r3, #1
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b01      	cmp	r3, #1
 800603a:	d119      	bne.n	8006070 <HAL_SPI_TransmitReceive+0x2ae>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d014      	beq.n	8006070 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800606c:	2301      	movs	r3, #1
 800606e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006070:	f7fc fde2 	bl	8002c38 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800607c:	429a      	cmp	r2, r3
 800607e:	d803      	bhi.n	8006088 <HAL_SPI_TransmitReceive+0x2c6>
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006086:	d102      	bne.n	800608e <HAL_SPI_TransmitReceive+0x2cc>
 8006088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608a:	2b00      	cmp	r3, #0
 800608c:	d103      	bne.n	8006096 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006094:	e029      	b.n	80060ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1a2      	bne.n	8005fe6 <HAL_SPI_TransmitReceive+0x224>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d19d      	bne.n	8005fe6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 f926 	bl	8006300 <SPI_EndRxTxTransaction>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d006      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80060c6:	e010      	b.n	80060ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10b      	bne.n	80060e8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060d0:	2300      	movs	r3, #0
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	e000      	b.n	80060ea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80060e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3730      	adds	r7, #48	; 0x30
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006114:	b2db      	uxtb	r3, r3
}
 8006116:	4618      	mov	r0, r3
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
	...

08006124 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b088      	sub	sp, #32
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	603b      	str	r3, [r7, #0]
 8006130:	4613      	mov	r3, r2
 8006132:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006134:	f7fc fd80 	bl	8002c38 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	1a9b      	subs	r3, r3, r2
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	4413      	add	r3, r2
 8006142:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006144:	f7fc fd78 	bl	8002c38 <HAL_GetTick>
 8006148:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800614a:	4b39      	ldr	r3, [pc, #228]	; (8006230 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	015b      	lsls	r3, r3, #5
 8006150:	0d1b      	lsrs	r3, r3, #20
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	fb02 f303 	mul.w	r3, r2, r3
 8006158:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800615a:	e054      	b.n	8006206 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006162:	d050      	beq.n	8006206 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006164:	f7fc fd68 	bl	8002c38 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	429a      	cmp	r2, r3
 8006172:	d902      	bls.n	800617a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d13d      	bne.n	80061f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006188:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006192:	d111      	bne.n	80061b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619c:	d004      	beq.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a6:	d107      	bne.n	80061b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061c0:	d10f      	bne.n	80061e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e017      	b.n	8006226 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	3b01      	subs	r3, #1
 8006204:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4013      	ands	r3, r2
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	429a      	cmp	r2, r3
 8006214:	bf0c      	ite	eq
 8006216:	2301      	moveq	r3, #1
 8006218:	2300      	movne	r3, #0
 800621a:	b2db      	uxtb	r3, r3
 800621c:	461a      	mov	r2, r3
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	429a      	cmp	r2, r3
 8006222:	d19b      	bne.n	800615c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3720      	adds	r7, #32
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20000000 	.word	0x20000000

08006234 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af02      	add	r7, sp, #8
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006248:	d111      	bne.n	800626e <SPI_EndRxTransaction+0x3a>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006252:	d004      	beq.n	800625e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800625c:	d107      	bne.n	800626e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800626c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006276:	d12a      	bne.n	80062ce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006280:	d012      	beq.n	80062a8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2200      	movs	r2, #0
 800628a:	2180      	movs	r1, #128	; 0x80
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f7ff ff49 	bl	8006124 <SPI_WaitFlagStateUntilTimeout>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d02d      	beq.n	80062f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629c:	f043 0220 	orr.w	r2, r3, #32
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e026      	b.n	80062f6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2200      	movs	r2, #0
 80062b0:	2101      	movs	r1, #1
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f7ff ff36 	bl	8006124 <SPI_WaitFlagStateUntilTimeout>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d01a      	beq.n	80062f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c2:	f043 0220 	orr.w	r2, r3, #32
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e013      	b.n	80062f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2200      	movs	r2, #0
 80062d6:	2101      	movs	r1, #1
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f7ff ff23 	bl	8006124 <SPI_WaitFlagStateUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d007      	beq.n	80062f4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e8:	f043 0220 	orr.w	r2, r3, #32
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e000      	b.n	80062f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
	...

08006300 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b088      	sub	sp, #32
 8006304:	af02      	add	r7, sp, #8
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800630c:	4b1b      	ldr	r3, [pc, #108]	; (800637c <SPI_EndRxTxTransaction+0x7c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a1b      	ldr	r2, [pc, #108]	; (8006380 <SPI_EndRxTxTransaction+0x80>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	0d5b      	lsrs	r3, r3, #21
 8006318:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800631c:	fb02 f303 	mul.w	r3, r2, r3
 8006320:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800632a:	d112      	bne.n	8006352 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2200      	movs	r2, #0
 8006334:	2180      	movs	r1, #128	; 0x80
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7ff fef4 	bl	8006124 <SPI_WaitFlagStateUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d016      	beq.n	8006370 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006346:	f043 0220 	orr.w	r2, r3, #32
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e00f      	b.n	8006372 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00a      	beq.n	800636e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	3b01      	subs	r3, #1
 800635c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006368:	2b80      	cmp	r3, #128	; 0x80
 800636a:	d0f2      	beq.n	8006352 <SPI_EndRxTxTransaction+0x52>
 800636c:	e000      	b.n	8006370 <SPI_EndRxTxTransaction+0x70>
        break;
 800636e:	bf00      	nop
  }

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000000 	.word	0x20000000
 8006380:	165e9f81 	.word	0x165e9f81

08006384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e041      	b.n	800641a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d106      	bne.n	80063b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fa ff82 	bl	80012b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3304      	adds	r3, #4
 80063c0:	4619      	mov	r1, r3
 80063c2:	4610      	mov	r0, r2
 80063c4:	f000 fa96 	bl	80068f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
	...

08006424 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b01      	cmp	r3, #1
 8006436:	d001      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e04e      	b.n	80064da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0201 	orr.w	r2, r2, #1
 8006452:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a23      	ldr	r2, [pc, #140]	; (80064e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d022      	beq.n	80064a4 <HAL_TIM_Base_Start_IT+0x80>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006466:	d01d      	beq.n	80064a4 <HAL_TIM_Base_Start_IT+0x80>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a1f      	ldr	r2, [pc, #124]	; (80064ec <HAL_TIM_Base_Start_IT+0xc8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d018      	beq.n	80064a4 <HAL_TIM_Base_Start_IT+0x80>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1e      	ldr	r2, [pc, #120]	; (80064f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d013      	beq.n	80064a4 <HAL_TIM_Base_Start_IT+0x80>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a1c      	ldr	r2, [pc, #112]	; (80064f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00e      	beq.n	80064a4 <HAL_TIM_Base_Start_IT+0x80>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1b      	ldr	r2, [pc, #108]	; (80064f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d009      	beq.n	80064a4 <HAL_TIM_Base_Start_IT+0x80>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a19      	ldr	r2, [pc, #100]	; (80064fc <HAL_TIM_Base_Start_IT+0xd8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d004      	beq.n	80064a4 <HAL_TIM_Base_Start_IT+0x80>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a18      	ldr	r2, [pc, #96]	; (8006500 <HAL_TIM_Base_Start_IT+0xdc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d111      	bne.n	80064c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b06      	cmp	r3, #6
 80064b4:	d010      	beq.n	80064d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0201 	orr.w	r2, r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c6:	e007      	b.n	80064d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	40010000 	.word	0x40010000
 80064ec:	40000400 	.word	0x40000400
 80064f0:	40000800 	.word	0x40000800
 80064f4:	40000c00 	.word	0x40000c00
 80064f8:	40010400 	.word	0x40010400
 80064fc:	40014000 	.word	0x40014000
 8006500:	40001800 	.word	0x40001800

08006504 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b02      	cmp	r3, #2
 8006518:	d122      	bne.n	8006560 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b02      	cmp	r3, #2
 8006526:	d11b      	bne.n	8006560 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f06f 0202 	mvn.w	r2, #2
 8006530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f9b5 	bl	80068b6 <HAL_TIM_IC_CaptureCallback>
 800654c:	e005      	b.n	800655a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f9a7 	bl	80068a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f9b8 	bl	80068ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	2b04      	cmp	r3, #4
 800656c:	d122      	bne.n	80065b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b04      	cmp	r3, #4
 800657a:	d11b      	bne.n	80065b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0204 	mvn.w	r2, #4
 8006584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2202      	movs	r2, #2
 800658a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f98b 	bl	80068b6 <HAL_TIM_IC_CaptureCallback>
 80065a0:	e005      	b.n	80065ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f97d 	bl	80068a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f98e 	bl	80068ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b08      	cmp	r3, #8
 80065c0:	d122      	bne.n	8006608 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d11b      	bne.n	8006608 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0208 	mvn.w	r2, #8
 80065d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2204      	movs	r2, #4
 80065de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f961 	bl	80068b6 <HAL_TIM_IC_CaptureCallback>
 80065f4:	e005      	b.n	8006602 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f953 	bl	80068a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f964 	bl	80068ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f003 0310 	and.w	r3, r3, #16
 8006612:	2b10      	cmp	r3, #16
 8006614:	d122      	bne.n	800665c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b10      	cmp	r3, #16
 8006622:	d11b      	bne.n	800665c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f06f 0210 	mvn.w	r2, #16
 800662c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2208      	movs	r2, #8
 8006632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f937 	bl	80068b6 <HAL_TIM_IC_CaptureCallback>
 8006648:	e005      	b.n	8006656 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f929 	bl	80068a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f93a 	bl	80068ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b01      	cmp	r3, #1
 8006668:	d10e      	bne.n	8006688 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b01      	cmp	r3, #1
 8006676:	d107      	bne.n	8006688 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0201 	mvn.w	r2, #1
 8006680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fa fb88 	bl	8000d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006692:	2b80      	cmp	r3, #128	; 0x80
 8006694:	d10e      	bne.n	80066b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a0:	2b80      	cmp	r3, #128	; 0x80
 80066a2:	d107      	bne.n	80066b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fae0 	bl	8006c74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066be:	2b40      	cmp	r3, #64	; 0x40
 80066c0:	d10e      	bne.n	80066e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066cc:	2b40      	cmp	r3, #64	; 0x40
 80066ce:	d107      	bne.n	80066e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f8ff 	bl	80068de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	d10e      	bne.n	800670c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f003 0320 	and.w	r3, r3, #32
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d107      	bne.n	800670c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f06f 0220 	mvn.w	r2, #32
 8006704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 faaa 	bl	8006c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800670c:	bf00      	nop
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_TIM_ConfigClockSource+0x1c>
 800672c:	2302      	movs	r3, #2
 800672e:	e0b4      	b.n	800689a <HAL_TIM_ConfigClockSource+0x186>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800674e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006756:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006768:	d03e      	beq.n	80067e8 <HAL_TIM_ConfigClockSource+0xd4>
 800676a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676e:	f200 8087 	bhi.w	8006880 <HAL_TIM_ConfigClockSource+0x16c>
 8006772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006776:	f000 8086 	beq.w	8006886 <HAL_TIM_ConfigClockSource+0x172>
 800677a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677e:	d87f      	bhi.n	8006880 <HAL_TIM_ConfigClockSource+0x16c>
 8006780:	2b70      	cmp	r3, #112	; 0x70
 8006782:	d01a      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0xa6>
 8006784:	2b70      	cmp	r3, #112	; 0x70
 8006786:	d87b      	bhi.n	8006880 <HAL_TIM_ConfigClockSource+0x16c>
 8006788:	2b60      	cmp	r3, #96	; 0x60
 800678a:	d050      	beq.n	800682e <HAL_TIM_ConfigClockSource+0x11a>
 800678c:	2b60      	cmp	r3, #96	; 0x60
 800678e:	d877      	bhi.n	8006880 <HAL_TIM_ConfigClockSource+0x16c>
 8006790:	2b50      	cmp	r3, #80	; 0x50
 8006792:	d03c      	beq.n	800680e <HAL_TIM_ConfigClockSource+0xfa>
 8006794:	2b50      	cmp	r3, #80	; 0x50
 8006796:	d873      	bhi.n	8006880 <HAL_TIM_ConfigClockSource+0x16c>
 8006798:	2b40      	cmp	r3, #64	; 0x40
 800679a:	d058      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x13a>
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	d86f      	bhi.n	8006880 <HAL_TIM_ConfigClockSource+0x16c>
 80067a0:	2b30      	cmp	r3, #48	; 0x30
 80067a2:	d064      	beq.n	800686e <HAL_TIM_ConfigClockSource+0x15a>
 80067a4:	2b30      	cmp	r3, #48	; 0x30
 80067a6:	d86b      	bhi.n	8006880 <HAL_TIM_ConfigClockSource+0x16c>
 80067a8:	2b20      	cmp	r3, #32
 80067aa:	d060      	beq.n	800686e <HAL_TIM_ConfigClockSource+0x15a>
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	d867      	bhi.n	8006880 <HAL_TIM_ConfigClockSource+0x16c>
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d05c      	beq.n	800686e <HAL_TIM_ConfigClockSource+0x15a>
 80067b4:	2b10      	cmp	r3, #16
 80067b6:	d05a      	beq.n	800686e <HAL_TIM_ConfigClockSource+0x15a>
 80067b8:	e062      	b.n	8006880 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6899      	ldr	r1, [r3, #8]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f000 f9ad 	bl	8006b28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	609a      	str	r2, [r3, #8]
      break;
 80067e6:	e04f      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	6899      	ldr	r1, [r3, #8]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f000 f996 	bl	8006b28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800680a:	609a      	str	r2, [r3, #8]
      break;
 800680c:	e03c      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	6859      	ldr	r1, [r3, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	461a      	mov	r2, r3
 800681c:	f000 f90a 	bl	8006a34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2150      	movs	r1, #80	; 0x50
 8006826:	4618      	mov	r0, r3
 8006828:	f000 f963 	bl	8006af2 <TIM_ITRx_SetConfig>
      break;
 800682c:	e02c      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6859      	ldr	r1, [r3, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	461a      	mov	r2, r3
 800683c:	f000 f929 	bl	8006a92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2160      	movs	r1, #96	; 0x60
 8006846:	4618      	mov	r0, r3
 8006848:	f000 f953 	bl	8006af2 <TIM_ITRx_SetConfig>
      break;
 800684c:	e01c      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6859      	ldr	r1, [r3, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	461a      	mov	r2, r3
 800685c:	f000 f8ea 	bl	8006a34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2140      	movs	r1, #64	; 0x40
 8006866:	4618      	mov	r0, r3
 8006868:	f000 f943 	bl	8006af2 <TIM_ITRx_SetConfig>
      break;
 800686c:	e00c      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4619      	mov	r1, r3
 8006878:	4610      	mov	r0, r2
 800687a:	f000 f93a 	bl	8006af2 <TIM_ITRx_SetConfig>
      break;
 800687e:	e003      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	73fb      	strb	r3, [r7, #15]
      break;
 8006884:	e000      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006886:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006898:	7bfb      	ldrb	r3, [r7, #15]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068aa:	bf00      	nop
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068d2:	bf00      	nop
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068de:	b480      	push	{r7}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068e6:	bf00      	nop
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
	...

080068f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a40      	ldr	r2, [pc, #256]	; (8006a08 <TIM_Base_SetConfig+0x114>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d013      	beq.n	8006934 <TIM_Base_SetConfig+0x40>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006912:	d00f      	beq.n	8006934 <TIM_Base_SetConfig+0x40>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a3d      	ldr	r2, [pc, #244]	; (8006a0c <TIM_Base_SetConfig+0x118>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00b      	beq.n	8006934 <TIM_Base_SetConfig+0x40>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a3c      	ldr	r2, [pc, #240]	; (8006a10 <TIM_Base_SetConfig+0x11c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d007      	beq.n	8006934 <TIM_Base_SetConfig+0x40>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a3b      	ldr	r2, [pc, #236]	; (8006a14 <TIM_Base_SetConfig+0x120>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d003      	beq.n	8006934 <TIM_Base_SetConfig+0x40>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a3a      	ldr	r2, [pc, #232]	; (8006a18 <TIM_Base_SetConfig+0x124>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d108      	bne.n	8006946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a2f      	ldr	r2, [pc, #188]	; (8006a08 <TIM_Base_SetConfig+0x114>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d02b      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006954:	d027      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a2c      	ldr	r2, [pc, #176]	; (8006a0c <TIM_Base_SetConfig+0x118>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d023      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a2b      	ldr	r2, [pc, #172]	; (8006a10 <TIM_Base_SetConfig+0x11c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d01f      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a2a      	ldr	r2, [pc, #168]	; (8006a14 <TIM_Base_SetConfig+0x120>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d01b      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a29      	ldr	r2, [pc, #164]	; (8006a18 <TIM_Base_SetConfig+0x124>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d017      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a28      	ldr	r2, [pc, #160]	; (8006a1c <TIM_Base_SetConfig+0x128>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d013      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a27      	ldr	r2, [pc, #156]	; (8006a20 <TIM_Base_SetConfig+0x12c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00f      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a26      	ldr	r2, [pc, #152]	; (8006a24 <TIM_Base_SetConfig+0x130>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00b      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a25      	ldr	r2, [pc, #148]	; (8006a28 <TIM_Base_SetConfig+0x134>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d007      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a24      	ldr	r2, [pc, #144]	; (8006a2c <TIM_Base_SetConfig+0x138>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d003      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a23      	ldr	r2, [pc, #140]	; (8006a30 <TIM_Base_SetConfig+0x13c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d108      	bne.n	80069b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a0a      	ldr	r2, [pc, #40]	; (8006a08 <TIM_Base_SetConfig+0x114>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d003      	beq.n	80069ec <TIM_Base_SetConfig+0xf8>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a0c      	ldr	r2, [pc, #48]	; (8006a18 <TIM_Base_SetConfig+0x124>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d103      	bne.n	80069f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	691a      	ldr	r2, [r3, #16]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	615a      	str	r2, [r3, #20]
}
 80069fa:	bf00      	nop
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	40010000 	.word	0x40010000
 8006a0c:	40000400 	.word	0x40000400
 8006a10:	40000800 	.word	0x40000800
 8006a14:	40000c00 	.word	0x40000c00
 8006a18:	40010400 	.word	0x40010400
 8006a1c:	40014000 	.word	0x40014000
 8006a20:	40014400 	.word	0x40014400
 8006a24:	40014800 	.word	0x40014800
 8006a28:	40001800 	.word	0x40001800
 8006a2c:	40001c00 	.word	0x40001c00
 8006a30:	40002000 	.word	0x40002000

08006a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f023 0201 	bic.w	r2, r3, #1
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f023 030a 	bic.w	r3, r3, #10
 8006a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	621a      	str	r2, [r3, #32]
}
 8006a86:	bf00      	nop
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b087      	sub	sp, #28
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f023 0210 	bic.w	r2, r3, #16
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006abc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	031b      	lsls	r3, r3, #12
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ace:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	011b      	lsls	r3, r3, #4
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	621a      	str	r2, [r3, #32]
}
 8006ae6:	bf00      	nop
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b085      	sub	sp, #20
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f043 0307 	orr.w	r3, r3, #7
 8006b14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	609a      	str	r2, [r3, #8]
}
 8006b1c:	bf00      	nop
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	021a      	lsls	r2, r3, #8
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	609a      	str	r2, [r3, #8]
}
 8006b5c:	bf00      	nop
 8006b5e:	371c      	adds	r7, #28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d101      	bne.n	8006b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e05a      	b.n	8006c36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a21      	ldr	r2, [pc, #132]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d022      	beq.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bcc:	d01d      	beq.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a1d      	ldr	r2, [pc, #116]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d018      	beq.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a1b      	ldr	r2, [pc, #108]	; (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d013      	beq.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a1a      	ldr	r2, [pc, #104]	; (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00e      	beq.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a18      	ldr	r2, [pc, #96]	; (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d009      	beq.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a17      	ldr	r2, [pc, #92]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a15      	ldr	r2, [pc, #84]	; (8006c5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d10c      	bne.n	8006c24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	40010000 	.word	0x40010000
 8006c48:	40000400 	.word	0x40000400
 8006c4c:	40000800 	.word	0x40000800
 8006c50:	40000c00 	.word	0x40000c00
 8006c54:	40010400 	.word	0x40010400
 8006c58:	40014000 	.word	0x40014000
 8006c5c:	40001800 	.word	0x40001800

08006c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e03f      	b.n	8006d1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d106      	bne.n	8006cb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7fa fb22 	bl	80012f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2224      	movs	r2, #36	; 0x24
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f829 	bl	8006d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ce0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	695a      	ldr	r2, [r3, #20]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d28:	b0c0      	sub	sp, #256	; 0x100
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d40:	68d9      	ldr	r1, [r3, #12]
 8006d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	ea40 0301 	orr.w	r3, r0, r1
 8006d4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	431a      	orrs	r2, r3
 8006d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d7c:	f021 010c 	bic.w	r1, r1, #12
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9e:	6999      	ldr	r1, [r3, #24]
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	ea40 0301 	orr.w	r3, r0, r1
 8006daa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	4b8f      	ldr	r3, [pc, #572]	; (8006ff0 <UART_SetConfig+0x2cc>)
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d005      	beq.n	8006dc4 <UART_SetConfig+0xa0>
 8006db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	4b8d      	ldr	r3, [pc, #564]	; (8006ff4 <UART_SetConfig+0x2d0>)
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d104      	bne.n	8006dce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006dc4:	f7fe fa68 	bl	8005298 <HAL_RCC_GetPCLK2Freq>
 8006dc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006dcc:	e003      	b.n	8006dd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dce:	f7fe fa4f 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8006dd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006de0:	f040 810c 	bne.w	8006ffc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006de8:	2200      	movs	r2, #0
 8006dea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006dee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006df2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006df6:	4622      	mov	r2, r4
 8006df8:	462b      	mov	r3, r5
 8006dfa:	1891      	adds	r1, r2, r2
 8006dfc:	65b9      	str	r1, [r7, #88]	; 0x58
 8006dfe:	415b      	adcs	r3, r3
 8006e00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e06:	4621      	mov	r1, r4
 8006e08:	eb12 0801 	adds.w	r8, r2, r1
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	eb43 0901 	adc.w	r9, r3, r1
 8006e12:	f04f 0200 	mov.w	r2, #0
 8006e16:	f04f 0300 	mov.w	r3, #0
 8006e1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e26:	4690      	mov	r8, r2
 8006e28:	4699      	mov	r9, r3
 8006e2a:	4623      	mov	r3, r4
 8006e2c:	eb18 0303 	adds.w	r3, r8, r3
 8006e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e34:	462b      	mov	r3, r5
 8006e36:	eb49 0303 	adc.w	r3, r9, r3
 8006e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e52:	460b      	mov	r3, r1
 8006e54:	18db      	adds	r3, r3, r3
 8006e56:	653b      	str	r3, [r7, #80]	; 0x50
 8006e58:	4613      	mov	r3, r2
 8006e5a:	eb42 0303 	adc.w	r3, r2, r3
 8006e5e:	657b      	str	r3, [r7, #84]	; 0x54
 8006e60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e68:	f7f9 f9c2 	bl	80001f0 <__aeabi_uldivmod>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4b61      	ldr	r3, [pc, #388]	; (8006ff8 <UART_SetConfig+0x2d4>)
 8006e72:	fba3 2302 	umull	r2, r3, r3, r2
 8006e76:	095b      	lsrs	r3, r3, #5
 8006e78:	011c      	lsls	r4, r3, #4
 8006e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e8c:	4642      	mov	r2, r8
 8006e8e:	464b      	mov	r3, r9
 8006e90:	1891      	adds	r1, r2, r2
 8006e92:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e94:	415b      	adcs	r3, r3
 8006e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e9c:	4641      	mov	r1, r8
 8006e9e:	eb12 0a01 	adds.w	sl, r2, r1
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	eb43 0b01 	adc.w	fp, r3, r1
 8006ea8:	f04f 0200 	mov.w	r2, #0
 8006eac:	f04f 0300 	mov.w	r3, #0
 8006eb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006eb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006eb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ebc:	4692      	mov	sl, r2
 8006ebe:	469b      	mov	fp, r3
 8006ec0:	4643      	mov	r3, r8
 8006ec2:	eb1a 0303 	adds.w	r3, sl, r3
 8006ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006eca:	464b      	mov	r3, r9
 8006ecc:	eb4b 0303 	adc.w	r3, fp, r3
 8006ed0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ee0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ee4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ee8:	460b      	mov	r3, r1
 8006eea:	18db      	adds	r3, r3, r3
 8006eec:	643b      	str	r3, [r7, #64]	; 0x40
 8006eee:	4613      	mov	r3, r2
 8006ef0:	eb42 0303 	adc.w	r3, r2, r3
 8006ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ef6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006efa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006efe:	f7f9 f977 	bl	80001f0 <__aeabi_uldivmod>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	4611      	mov	r1, r2
 8006f08:	4b3b      	ldr	r3, [pc, #236]	; (8006ff8 <UART_SetConfig+0x2d4>)
 8006f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f0e:	095b      	lsrs	r3, r3, #5
 8006f10:	2264      	movs	r2, #100	; 0x64
 8006f12:	fb02 f303 	mul.w	r3, r2, r3
 8006f16:	1acb      	subs	r3, r1, r3
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f1e:	4b36      	ldr	r3, [pc, #216]	; (8006ff8 <UART_SetConfig+0x2d4>)
 8006f20:	fba3 2302 	umull	r2, r3, r3, r2
 8006f24:	095b      	lsrs	r3, r3, #5
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f2c:	441c      	add	r4, r3
 8006f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f40:	4642      	mov	r2, r8
 8006f42:	464b      	mov	r3, r9
 8006f44:	1891      	adds	r1, r2, r2
 8006f46:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f48:	415b      	adcs	r3, r3
 8006f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f50:	4641      	mov	r1, r8
 8006f52:	1851      	adds	r1, r2, r1
 8006f54:	6339      	str	r1, [r7, #48]	; 0x30
 8006f56:	4649      	mov	r1, r9
 8006f58:	414b      	adcs	r3, r1
 8006f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f5c:	f04f 0200 	mov.w	r2, #0
 8006f60:	f04f 0300 	mov.w	r3, #0
 8006f64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f68:	4659      	mov	r1, fp
 8006f6a:	00cb      	lsls	r3, r1, #3
 8006f6c:	4651      	mov	r1, sl
 8006f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f72:	4651      	mov	r1, sl
 8006f74:	00ca      	lsls	r2, r1, #3
 8006f76:	4610      	mov	r0, r2
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	4642      	mov	r2, r8
 8006f7e:	189b      	adds	r3, r3, r2
 8006f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f84:	464b      	mov	r3, r9
 8006f86:	460a      	mov	r2, r1
 8006f88:	eb42 0303 	adc.w	r3, r2, r3
 8006f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006fa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	18db      	adds	r3, r3, r3
 8006fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006faa:	4613      	mov	r3, r2
 8006fac:	eb42 0303 	adc.w	r3, r2, r3
 8006fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006fba:	f7f9 f919 	bl	80001f0 <__aeabi_uldivmod>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4b0d      	ldr	r3, [pc, #52]	; (8006ff8 <UART_SetConfig+0x2d4>)
 8006fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fc8:	095b      	lsrs	r3, r3, #5
 8006fca:	2164      	movs	r1, #100	; 0x64
 8006fcc:	fb01 f303 	mul.w	r3, r1, r3
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	3332      	adds	r3, #50	; 0x32
 8006fd6:	4a08      	ldr	r2, [pc, #32]	; (8006ff8 <UART_SetConfig+0x2d4>)
 8006fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fdc:	095b      	lsrs	r3, r3, #5
 8006fde:	f003 0207 	and.w	r2, r3, #7
 8006fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4422      	add	r2, r4
 8006fea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fec:	e105      	b.n	80071fa <UART_SetConfig+0x4d6>
 8006fee:	bf00      	nop
 8006ff0:	40011000 	.word	0x40011000
 8006ff4:	40011400 	.word	0x40011400
 8006ff8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007000:	2200      	movs	r2, #0
 8007002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007006:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800700a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800700e:	4642      	mov	r2, r8
 8007010:	464b      	mov	r3, r9
 8007012:	1891      	adds	r1, r2, r2
 8007014:	6239      	str	r1, [r7, #32]
 8007016:	415b      	adcs	r3, r3
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
 800701a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800701e:	4641      	mov	r1, r8
 8007020:	1854      	adds	r4, r2, r1
 8007022:	4649      	mov	r1, r9
 8007024:	eb43 0501 	adc.w	r5, r3, r1
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	00eb      	lsls	r3, r5, #3
 8007032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007036:	00e2      	lsls	r2, r4, #3
 8007038:	4614      	mov	r4, r2
 800703a:	461d      	mov	r5, r3
 800703c:	4643      	mov	r3, r8
 800703e:	18e3      	adds	r3, r4, r3
 8007040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007044:	464b      	mov	r3, r9
 8007046:	eb45 0303 	adc.w	r3, r5, r3
 800704a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800704e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800705a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800705e:	f04f 0200 	mov.w	r2, #0
 8007062:	f04f 0300 	mov.w	r3, #0
 8007066:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800706a:	4629      	mov	r1, r5
 800706c:	008b      	lsls	r3, r1, #2
 800706e:	4621      	mov	r1, r4
 8007070:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007074:	4621      	mov	r1, r4
 8007076:	008a      	lsls	r2, r1, #2
 8007078:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800707c:	f7f9 f8b8 	bl	80001f0 <__aeabi_uldivmod>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4b60      	ldr	r3, [pc, #384]	; (8007208 <UART_SetConfig+0x4e4>)
 8007086:	fba3 2302 	umull	r2, r3, r3, r2
 800708a:	095b      	lsrs	r3, r3, #5
 800708c:	011c      	lsls	r4, r3, #4
 800708e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007092:	2200      	movs	r2, #0
 8007094:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007098:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800709c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070a0:	4642      	mov	r2, r8
 80070a2:	464b      	mov	r3, r9
 80070a4:	1891      	adds	r1, r2, r2
 80070a6:	61b9      	str	r1, [r7, #24]
 80070a8:	415b      	adcs	r3, r3
 80070aa:	61fb      	str	r3, [r7, #28]
 80070ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070b0:	4641      	mov	r1, r8
 80070b2:	1851      	adds	r1, r2, r1
 80070b4:	6139      	str	r1, [r7, #16]
 80070b6:	4649      	mov	r1, r9
 80070b8:	414b      	adcs	r3, r1
 80070ba:	617b      	str	r3, [r7, #20]
 80070bc:	f04f 0200 	mov.w	r2, #0
 80070c0:	f04f 0300 	mov.w	r3, #0
 80070c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070c8:	4659      	mov	r1, fp
 80070ca:	00cb      	lsls	r3, r1, #3
 80070cc:	4651      	mov	r1, sl
 80070ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070d2:	4651      	mov	r1, sl
 80070d4:	00ca      	lsls	r2, r1, #3
 80070d6:	4610      	mov	r0, r2
 80070d8:	4619      	mov	r1, r3
 80070da:	4603      	mov	r3, r0
 80070dc:	4642      	mov	r2, r8
 80070de:	189b      	adds	r3, r3, r2
 80070e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070e4:	464b      	mov	r3, r9
 80070e6:	460a      	mov	r2, r1
 80070e8:	eb42 0303 	adc.w	r3, r2, r3
 80070ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80070fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80070fc:	f04f 0200 	mov.w	r2, #0
 8007100:	f04f 0300 	mov.w	r3, #0
 8007104:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007108:	4649      	mov	r1, r9
 800710a:	008b      	lsls	r3, r1, #2
 800710c:	4641      	mov	r1, r8
 800710e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007112:	4641      	mov	r1, r8
 8007114:	008a      	lsls	r2, r1, #2
 8007116:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800711a:	f7f9 f869 	bl	80001f0 <__aeabi_uldivmod>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	4b39      	ldr	r3, [pc, #228]	; (8007208 <UART_SetConfig+0x4e4>)
 8007124:	fba3 1302 	umull	r1, r3, r3, r2
 8007128:	095b      	lsrs	r3, r3, #5
 800712a:	2164      	movs	r1, #100	; 0x64
 800712c:	fb01 f303 	mul.w	r3, r1, r3
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	3332      	adds	r3, #50	; 0x32
 8007136:	4a34      	ldr	r2, [pc, #208]	; (8007208 <UART_SetConfig+0x4e4>)
 8007138:	fba2 2303 	umull	r2, r3, r2, r3
 800713c:	095b      	lsrs	r3, r3, #5
 800713e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007142:	441c      	add	r4, r3
 8007144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007148:	2200      	movs	r2, #0
 800714a:	673b      	str	r3, [r7, #112]	; 0x70
 800714c:	677a      	str	r2, [r7, #116]	; 0x74
 800714e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007152:	4642      	mov	r2, r8
 8007154:	464b      	mov	r3, r9
 8007156:	1891      	adds	r1, r2, r2
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	415b      	adcs	r3, r3
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007162:	4641      	mov	r1, r8
 8007164:	1851      	adds	r1, r2, r1
 8007166:	6039      	str	r1, [r7, #0]
 8007168:	4649      	mov	r1, r9
 800716a:	414b      	adcs	r3, r1
 800716c:	607b      	str	r3, [r7, #4]
 800716e:	f04f 0200 	mov.w	r2, #0
 8007172:	f04f 0300 	mov.w	r3, #0
 8007176:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800717a:	4659      	mov	r1, fp
 800717c:	00cb      	lsls	r3, r1, #3
 800717e:	4651      	mov	r1, sl
 8007180:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007184:	4651      	mov	r1, sl
 8007186:	00ca      	lsls	r2, r1, #3
 8007188:	4610      	mov	r0, r2
 800718a:	4619      	mov	r1, r3
 800718c:	4603      	mov	r3, r0
 800718e:	4642      	mov	r2, r8
 8007190:	189b      	adds	r3, r3, r2
 8007192:	66bb      	str	r3, [r7, #104]	; 0x68
 8007194:	464b      	mov	r3, r9
 8007196:	460a      	mov	r2, r1
 8007198:	eb42 0303 	adc.w	r3, r2, r3
 800719c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800719e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	663b      	str	r3, [r7, #96]	; 0x60
 80071a8:	667a      	str	r2, [r7, #100]	; 0x64
 80071aa:	f04f 0200 	mov.w	r2, #0
 80071ae:	f04f 0300 	mov.w	r3, #0
 80071b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80071b6:	4649      	mov	r1, r9
 80071b8:	008b      	lsls	r3, r1, #2
 80071ba:	4641      	mov	r1, r8
 80071bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071c0:	4641      	mov	r1, r8
 80071c2:	008a      	lsls	r2, r1, #2
 80071c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071c8:	f7f9 f812 	bl	80001f0 <__aeabi_uldivmod>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4b0d      	ldr	r3, [pc, #52]	; (8007208 <UART_SetConfig+0x4e4>)
 80071d2:	fba3 1302 	umull	r1, r3, r3, r2
 80071d6:	095b      	lsrs	r3, r3, #5
 80071d8:	2164      	movs	r1, #100	; 0x64
 80071da:	fb01 f303 	mul.w	r3, r1, r3
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	3332      	adds	r3, #50	; 0x32
 80071e4:	4a08      	ldr	r2, [pc, #32]	; (8007208 <UART_SetConfig+0x4e4>)
 80071e6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	f003 020f 	and.w	r2, r3, #15
 80071f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4422      	add	r2, r4
 80071f8:	609a      	str	r2, [r3, #8]
}
 80071fa:	bf00      	nop
 80071fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007200:	46bd      	mov	sp, r7
 8007202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007206:	bf00      	nop
 8007208:	51eb851f 	.word	0x51eb851f

0800720c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d123      	bne.n	8007266 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007226:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	6851      	ldr	r1, [r2, #4]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	6892      	ldr	r2, [r2, #8]
 8007232:	4311      	orrs	r1, r2
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	68d2      	ldr	r2, [r2, #12]
 8007238:	4311      	orrs	r1, r2
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	6912      	ldr	r2, [r2, #16]
 800723e:	4311      	orrs	r1, r2
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	6952      	ldr	r2, [r2, #20]
 8007244:	4311      	orrs	r1, r2
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	6992      	ldr	r2, [r2, #24]
 800724a:	4311      	orrs	r1, r2
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	69d2      	ldr	r2, [r2, #28]
 8007250:	4311      	orrs	r1, r2
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	6a12      	ldr	r2, [r2, #32]
 8007256:	4311      	orrs	r1, r2
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800725c:	430a      	orrs	r2, r1
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	e028      	b.n	80072b8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	69d9      	ldr	r1, [r3, #28]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	4319      	orrs	r1, r3
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	430b      	orrs	r3, r1
 800727e:	431a      	orrs	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800728c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	6851      	ldr	r1, [r2, #4]
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	6892      	ldr	r2, [r2, #8]
 8007298:	4311      	orrs	r1, r2
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	68d2      	ldr	r2, [r2, #12]
 800729e:	4311      	orrs	r1, r2
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	6912      	ldr	r2, [r2, #16]
 80072a4:	4311      	orrs	r1, r2
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	6952      	ldr	r2, [r2, #20]
 80072aa:	4311      	orrs	r1, r2
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	6992      	ldr	r2, [r2, #24]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	431a      	orrs	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b085      	sub	sp, #20
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d128      	bne.n	800732a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	1e59      	subs	r1, r3, #1
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	4319      	orrs	r1, r3
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	021b      	lsls	r3, r3, #8
 80072f8:	4319      	orrs	r1, r3
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	3b01      	subs	r3, #1
 8007300:	031b      	lsls	r3, r3, #12
 8007302:	4319      	orrs	r1, r3
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	3b01      	subs	r3, #1
 800730a:	041b      	lsls	r3, r3, #16
 800730c:	4319      	orrs	r1, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	3b01      	subs	r3, #1
 8007314:	051b      	lsls	r3, r3, #20
 8007316:	4319      	orrs	r1, r3
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	3b01      	subs	r3, #1
 800731e:	061b      	lsls	r3, r3, #24
 8007320:	430b      	orrs	r3, r1
 8007322:	431a      	orrs	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	609a      	str	r2, [r3, #8]
 8007328:	e02f      	b.n	800738a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007332:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	68d2      	ldr	r2, [r2, #12]
 800733a:	3a01      	subs	r2, #1
 800733c:	0311      	lsls	r1, r2, #12
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	6952      	ldr	r2, [r2, #20]
 8007342:	3a01      	subs	r2, #1
 8007344:	0512      	lsls	r2, r2, #20
 8007346:	430a      	orrs	r2, r1
 8007348:	431a      	orrs	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	1e59      	subs	r1, r3, #1
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	3b01      	subs	r3, #1
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	4319      	orrs	r1, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	3b01      	subs	r3, #1
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	4319      	orrs	r1, r3
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	3b01      	subs	r3, #1
 8007376:	041b      	lsls	r3, r3, #16
 8007378:	4319      	orrs	r1, r3
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	3b01      	subs	r3, #1
 8007380:	061b      	lsls	r3, r3, #24
 8007382:	430b      	orrs	r3, r1
 8007384:	431a      	orrs	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	0d9b      	lsrs	r3, r3, #22
 80073ae:	059b      	lsls	r3, r3, #22
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	6811      	ldr	r1, [r2, #0]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	6852      	ldr	r2, [r2, #4]
 80073b8:	4311      	orrs	r1, r2
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	6892      	ldr	r2, [r2, #8]
 80073be:	3a01      	subs	r2, #1
 80073c0:	0152      	lsls	r2, r2, #5
 80073c2:	4311      	orrs	r1, r2
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	68d2      	ldr	r2, [r2, #12]
 80073c8:	0252      	lsls	r2, r2, #9
 80073ca:	430a      	orrs	r2, r1
 80073cc:	431a      	orrs	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80073d2:	f7fb fc31 	bl	8002c38 <HAL_GetTick>
 80073d6:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80073d8:	e010      	b.n	80073fc <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e0:	d00c      	beq.n	80073fc <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d007      	beq.n	80073f8 <FMC_SDRAM_SendCommand+0x60>
 80073e8:	f7fb fc26 	bl	8002c38 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d201      	bcs.n	80073fc <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e006      	b.n	800740a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	f003 0320 	and.w	r3, r3, #32
 8007404:	2b20      	cmp	r3, #32
 8007406:	d0e8      	beq.n	80073da <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007424:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	0052      	lsls	r2, r2, #1
 800742c:	431a      	orrs	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800744a:	2300      	movs	r3, #0
 800744c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800744e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007452:	2b84      	cmp	r3, #132	; 0x84
 8007454:	d005      	beq.n	8007462 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007456:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	4413      	add	r3, r2
 800745e:	3303      	adds	r3, #3
 8007460:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007462:	68fb      	ldr	r3, [r7, #12]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007474:	f000 faea 	bl	8007a4c <vTaskStartScheduler>
  
  return osOK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	bd80      	pop	{r7, pc}

0800747e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800747e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007480:	b089      	sub	sp, #36	; 0x24
 8007482:	af04      	add	r7, sp, #16
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d020      	beq.n	80074d2 <osThreadCreate+0x54>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d01c      	beq.n	80074d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685c      	ldr	r4, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681d      	ldr	r5, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	691e      	ldr	r6, [r3, #16]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff ffc8 	bl	8007440 <makeFreeRtosPriority>
 80074b0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074ba:	9202      	str	r2, [sp, #8]
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	9100      	str	r1, [sp, #0]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	4632      	mov	r2, r6
 80074c4:	4629      	mov	r1, r5
 80074c6:	4620      	mov	r0, r4
 80074c8:	f000 f8ed 	bl	80076a6 <xTaskCreateStatic>
 80074cc:	4603      	mov	r3, r0
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	e01c      	b.n	800750c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685c      	ldr	r4, [r3, #4]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074de:	b29e      	uxth	r6, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff ffaa 	bl	8007440 <makeFreeRtosPriority>
 80074ec:	4602      	mov	r2, r0
 80074ee:	f107 030c 	add.w	r3, r7, #12
 80074f2:	9301      	str	r3, [sp, #4]
 80074f4:	9200      	str	r2, [sp, #0]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	4632      	mov	r2, r6
 80074fa:	4629      	mov	r1, r5
 80074fc:	4620      	mov	r0, r4
 80074fe:	f000 f92f 	bl	8007760 <xTaskCreate>
 8007502:	4603      	mov	r3, r0
 8007504:	2b01      	cmp	r3, #1
 8007506:	d001      	beq.n	800750c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007508:	2300      	movs	r3, #0
 800750a:	e000      	b.n	800750e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800750c:	68fb      	ldr	r3, [r7, #12]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007516 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <osDelay+0x16>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	e000      	b.n	800752e <osDelay+0x18>
 800752c:	2301      	movs	r3, #1
 800752e:	4618      	mov	r0, r3
 8007530:	f000 fa58 	bl	80079e4 <vTaskDelay>
  
  return osOK;
 8007534:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800753e:	b480      	push	{r7}
 8007540:	b083      	sub	sp, #12
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f103 0208 	add.w	r2, r3, #8
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f04f 32ff 	mov.w	r2, #4294967295
 8007556:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f103 0208 	add.w	r2, r3, #8
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f103 0208 	add.w	r2, r3, #8
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	689a      	ldr	r2, [r3, #8]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	601a      	str	r2, [r3, #0]
}
 80075d4:	bf00      	nop
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f6:	d103      	bne.n	8007600 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	60fb      	str	r3, [r7, #12]
 80075fe:	e00c      	b.n	800761a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3308      	adds	r3, #8
 8007604:	60fb      	str	r3, [r7, #12]
 8007606:	e002      	b.n	800760e <vListInsert+0x2e>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	429a      	cmp	r2, r3
 8007618:	d2f6      	bcs.n	8007608 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	601a      	str	r2, [r3, #0]
}
 8007646:	bf00      	nop
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007652:	b480      	push	{r7}
 8007654:	b085      	sub	sp, #20
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6892      	ldr	r2, [r2, #8]
 8007668:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	6852      	ldr	r2, [r2, #4]
 8007672:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	429a      	cmp	r2, r3
 800767c:	d103      	bne.n	8007686 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689a      	ldr	r2, [r3, #8]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	1e5a      	subs	r2, r3, #1
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b08e      	sub	sp, #56	; 0x38
 80076aa:	af04      	add	r7, sp, #16
 80076ac:	60f8      	str	r0, [r7, #12]
 80076ae:	60b9      	str	r1, [r7, #8]
 80076b0:	607a      	str	r2, [r7, #4]
 80076b2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80076b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10a      	bne.n	80076d0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80076cc:	bf00      	nop
 80076ce:	e7fe      	b.n	80076ce <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80076d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10a      	bne.n	80076ec <xTaskCreateStatic+0x46>
	__asm volatile
 80076d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	61fb      	str	r3, [r7, #28]
}
 80076e8:	bf00      	nop
 80076ea:	e7fe      	b.n	80076ea <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076ec:	2358      	movs	r3, #88	; 0x58
 80076ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	2b58      	cmp	r3, #88	; 0x58
 80076f4:	d00a      	beq.n	800770c <xTaskCreateStatic+0x66>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	61bb      	str	r3, [r7, #24]
}
 8007708:	bf00      	nop
 800770a:	e7fe      	b.n	800770a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800770c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800770e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007710:	2b00      	cmp	r3, #0
 8007712:	d01e      	beq.n	8007752 <xTaskCreateStatic+0xac>
 8007714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007716:	2b00      	cmp	r3, #0
 8007718:	d01b      	beq.n	8007752 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800771a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007722:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	2202      	movs	r2, #2
 8007728:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800772c:	2300      	movs	r3, #0
 800772e:	9303      	str	r3, [sp, #12]
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	9302      	str	r3, [sp, #8]
 8007734:	f107 0314 	add.w	r3, r7, #20
 8007738:	9301      	str	r3, [sp, #4]
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	68b9      	ldr	r1, [r7, #8]
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 f850 	bl	80077ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800774a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800774c:	f000 f8e0 	bl	8007910 <prvAddNewTaskToReadyList>
 8007750:	e001      	b.n	8007756 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007752:	2300      	movs	r3, #0
 8007754:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007756:	697b      	ldr	r3, [r7, #20]
	}
 8007758:	4618      	mov	r0, r3
 800775a:	3728      	adds	r7, #40	; 0x28
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08c      	sub	sp, #48	; 0x30
 8007764:	af04      	add	r7, sp, #16
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	4613      	mov	r3, r2
 800776e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007770:	88fb      	ldrh	r3, [r7, #6]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fef7 	bl	8008568 <pvPortMalloc>
 800777a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00e      	beq.n	80077a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007782:	2058      	movs	r0, #88	; 0x58
 8007784:	f000 fef0 	bl	8008568 <pvPortMalloc>
 8007788:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	631a      	str	r2, [r3, #48]	; 0x30
 8007796:	e005      	b.n	80077a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007798:	6978      	ldr	r0, [r7, #20]
 800779a:	f000 ffb5 	bl	8008708 <vPortFree>
 800779e:	e001      	b.n	80077a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80077a0:	2300      	movs	r3, #0
 80077a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d017      	beq.n	80077da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80077b2:	88fa      	ldrh	r2, [r7, #6]
 80077b4:	2300      	movs	r3, #0
 80077b6:	9303      	str	r3, [sp, #12]
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	9302      	str	r3, [sp, #8]
 80077bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077be:	9301      	str	r3, [sp, #4]
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f80e 	bl	80077ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077ce:	69f8      	ldr	r0, [r7, #28]
 80077d0:	f000 f89e 	bl	8007910 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077d4:	2301      	movs	r3, #1
 80077d6:	61bb      	str	r3, [r7, #24]
 80077d8:	e002      	b.n	80077e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077da:	f04f 33ff 	mov.w	r3, #4294967295
 80077de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077e0:	69bb      	ldr	r3, [r7, #24]
	}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3720      	adds	r7, #32
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b088      	sub	sp, #32
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	607a      	str	r2, [r7, #4]
 80077f6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80077f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	461a      	mov	r2, r3
 8007802:	21a5      	movs	r1, #165	; 0xa5
 8007804:	f001 f8c2 	bl	800898c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007812:	3b01      	subs	r3, #1
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	f023 0307 	bic.w	r3, r3, #7
 8007820:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	f003 0307 	and.w	r3, r3, #7
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <prvInitialiseNewTask+0x58>
	__asm volatile
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	617b      	str	r3, [r7, #20]
}
 800783e:	bf00      	nop
 8007840:	e7fe      	b.n	8007840 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d01f      	beq.n	8007888 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007848:	2300      	movs	r3, #0
 800784a:	61fb      	str	r3, [r7, #28]
 800784c:	e012      	b.n	8007874 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	4413      	add	r3, r2
 8007854:	7819      	ldrb	r1, [r3, #0]
 8007856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	4413      	add	r3, r2
 800785c:	3334      	adds	r3, #52	; 0x34
 800785e:	460a      	mov	r2, r1
 8007860:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	4413      	add	r3, r2
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d006      	beq.n	800787c <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	3301      	adds	r3, #1
 8007872:	61fb      	str	r3, [r7, #28]
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	2b0f      	cmp	r3, #15
 8007878:	d9e9      	bls.n	800784e <prvInitialiseNewTask+0x64>
 800787a:	e000      	b.n	800787e <prvInitialiseNewTask+0x94>
			{
				break;
 800787c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007886:	e003      	b.n	8007890 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	2b06      	cmp	r3, #6
 8007894:	d901      	bls.n	800789a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007896:	2306      	movs	r3, #6
 8007898:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800789e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80078a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078a4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	2200      	movs	r2, #0
 80078aa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80078ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ae:	3304      	adds	r3, #4
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff fe64 	bl	800757e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b8:	3318      	adds	r3, #24
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7ff fe5f 	bl	800757e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	f1c3 0207 	rsb	r2, r3, #7
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	2200      	movs	r2, #0
 80078da:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	2200      	movs	r2, #0
 80078e0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	68f9      	ldr	r1, [r7, #12]
 80078ee:	69b8      	ldr	r0, [r7, #24]
 80078f0:	f000 fc2c 	bl	800814c <pxPortInitialiseStack>
 80078f4:	4602      	mov	r2, r0
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80078fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007906:	bf00      	nop
 8007908:	3720      	adds	r7, #32
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
	...

08007910 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007918:	f000 fd44 	bl	80083a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800791c:	4b2a      	ldr	r3, [pc, #168]	; (80079c8 <prvAddNewTaskToReadyList+0xb8>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3301      	adds	r3, #1
 8007922:	4a29      	ldr	r2, [pc, #164]	; (80079c8 <prvAddNewTaskToReadyList+0xb8>)
 8007924:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007926:	4b29      	ldr	r3, [pc, #164]	; (80079cc <prvAddNewTaskToReadyList+0xbc>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d109      	bne.n	8007942 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800792e:	4a27      	ldr	r2, [pc, #156]	; (80079cc <prvAddNewTaskToReadyList+0xbc>)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007934:	4b24      	ldr	r3, [pc, #144]	; (80079c8 <prvAddNewTaskToReadyList+0xb8>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d110      	bne.n	800795e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800793c:	f000 fae2 	bl	8007f04 <prvInitialiseTaskLists>
 8007940:	e00d      	b.n	800795e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007942:	4b23      	ldr	r3, [pc, #140]	; (80079d0 <prvAddNewTaskToReadyList+0xc0>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d109      	bne.n	800795e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800794a:	4b20      	ldr	r3, [pc, #128]	; (80079cc <prvAddNewTaskToReadyList+0xbc>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007954:	429a      	cmp	r2, r3
 8007956:	d802      	bhi.n	800795e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007958:	4a1c      	ldr	r2, [pc, #112]	; (80079cc <prvAddNewTaskToReadyList+0xbc>)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800795e:	4b1d      	ldr	r3, [pc, #116]	; (80079d4 <prvAddNewTaskToReadyList+0xc4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3301      	adds	r3, #1
 8007964:	4a1b      	ldr	r2, [pc, #108]	; (80079d4 <prvAddNewTaskToReadyList+0xc4>)
 8007966:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	2201      	movs	r2, #1
 800796e:	409a      	lsls	r2, r3
 8007970:	4b19      	ldr	r3, [pc, #100]	; (80079d8 <prvAddNewTaskToReadyList+0xc8>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4313      	orrs	r3, r2
 8007976:	4a18      	ldr	r2, [pc, #96]	; (80079d8 <prvAddNewTaskToReadyList+0xc8>)
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4a15      	ldr	r2, [pc, #84]	; (80079dc <prvAddNewTaskToReadyList+0xcc>)
 8007988:	441a      	add	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	3304      	adds	r3, #4
 800798e:	4619      	mov	r1, r3
 8007990:	4610      	mov	r0, r2
 8007992:	f7ff fe01 	bl	8007598 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007996:	f000 fd35 	bl	8008404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800799a:	4b0d      	ldr	r3, [pc, #52]	; (80079d0 <prvAddNewTaskToReadyList+0xc0>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00e      	beq.n	80079c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80079a2:	4b0a      	ldr	r3, [pc, #40]	; (80079cc <prvAddNewTaskToReadyList+0xbc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d207      	bcs.n	80079c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80079b0:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <prvAddNewTaskToReadyList+0xd0>)
 80079b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079c0:	bf00      	nop
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	200008d0 	.word	0x200008d0
 80079cc:	200007d0 	.word	0x200007d0
 80079d0:	200008dc 	.word	0x200008dc
 80079d4:	200008ec 	.word	0x200008ec
 80079d8:	200008d8 	.word	0x200008d8
 80079dc:	200007d4 	.word	0x200007d4
 80079e0:	e000ed04 	.word	0xe000ed04

080079e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d017      	beq.n	8007a26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079f6:	4b13      	ldr	r3, [pc, #76]	; (8007a44 <vTaskDelay+0x60>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <vTaskDelay+0x30>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	60bb      	str	r3, [r7, #8]
}
 8007a10:	bf00      	nop
 8007a12:	e7fe      	b.n	8007a12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a14:	f000 f87a 	bl	8007b0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a18:	2100      	movs	r1, #0
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fb30 	bl	8008080 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a20:	f000 f882 	bl	8007b28 <xTaskResumeAll>
 8007a24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d107      	bne.n	8007a3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007a2c:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <vTaskDelay+0x64>)
 8007a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a3c:	bf00      	nop
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	200008f8 	.word	0x200008f8
 8007a48:	e000ed04 	.word	0xe000ed04

08007a4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08a      	sub	sp, #40	; 0x28
 8007a50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a5a:	463a      	mov	r2, r7
 8007a5c:	1d39      	adds	r1, r7, #4
 8007a5e:	f107 0308 	add.w	r3, r7, #8
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7f8 fd60 	bl	8000528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	9202      	str	r2, [sp, #8]
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	2300      	movs	r3, #0
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	2300      	movs	r3, #0
 8007a78:	460a      	mov	r2, r1
 8007a7a:	491e      	ldr	r1, [pc, #120]	; (8007af4 <vTaskStartScheduler+0xa8>)
 8007a7c:	481e      	ldr	r0, [pc, #120]	; (8007af8 <vTaskStartScheduler+0xac>)
 8007a7e:	f7ff fe12 	bl	80076a6 <xTaskCreateStatic>
 8007a82:	4603      	mov	r3, r0
 8007a84:	4a1d      	ldr	r2, [pc, #116]	; (8007afc <vTaskStartScheduler+0xb0>)
 8007a86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a88:	4b1c      	ldr	r3, [pc, #112]	; (8007afc <vTaskStartScheduler+0xb0>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a90:	2301      	movs	r3, #1
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	e001      	b.n	8007a9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a96:	2300      	movs	r3, #0
 8007a98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d116      	bne.n	8007ace <vTaskStartScheduler+0x82>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	613b      	str	r3, [r7, #16]
}
 8007ab2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ab4:	4b12      	ldr	r3, [pc, #72]	; (8007b00 <vTaskStartScheduler+0xb4>)
 8007ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007abc:	4b11      	ldr	r3, [pc, #68]	; (8007b04 <vTaskStartScheduler+0xb8>)
 8007abe:	2201      	movs	r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ac2:	4b11      	ldr	r3, [pc, #68]	; (8007b08 <vTaskStartScheduler+0xbc>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ac8:	f000 fbca 	bl	8008260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007acc:	e00e      	b.n	8007aec <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad4:	d10a      	bne.n	8007aec <vTaskStartScheduler+0xa0>
	__asm volatile
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	60fb      	str	r3, [r7, #12]
}
 8007ae8:	bf00      	nop
 8007aea:	e7fe      	b.n	8007aea <vTaskStartScheduler+0x9e>
}
 8007aec:	bf00      	nop
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	080089f0 	.word	0x080089f0
 8007af8:	08007ed1 	.word	0x08007ed1
 8007afc:	200008f4 	.word	0x200008f4
 8007b00:	200008f0 	.word	0x200008f0
 8007b04:	200008dc 	.word	0x200008dc
 8007b08:	200008d4 	.word	0x200008d4

08007b0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b10:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <vTaskSuspendAll+0x18>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3301      	adds	r3, #1
 8007b16:	4a03      	ldr	r2, [pc, #12]	; (8007b24 <vTaskSuspendAll+0x18>)
 8007b18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b1a:	bf00      	nop
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	200008f8 	.word	0x200008f8

08007b28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b36:	4b41      	ldr	r3, [pc, #260]	; (8007c3c <xTaskResumeAll+0x114>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10a      	bne.n	8007b54 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	603b      	str	r3, [r7, #0]
}
 8007b50:	bf00      	nop
 8007b52:	e7fe      	b.n	8007b52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b54:	f000 fc26 	bl	80083a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b58:	4b38      	ldr	r3, [pc, #224]	; (8007c3c <xTaskResumeAll+0x114>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	4a37      	ldr	r2, [pc, #220]	; (8007c3c <xTaskResumeAll+0x114>)
 8007b60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b62:	4b36      	ldr	r3, [pc, #216]	; (8007c3c <xTaskResumeAll+0x114>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d161      	bne.n	8007c2e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b6a:	4b35      	ldr	r3, [pc, #212]	; (8007c40 <xTaskResumeAll+0x118>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d05d      	beq.n	8007c2e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b72:	e02e      	b.n	8007bd2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b74:	4b33      	ldr	r3, [pc, #204]	; (8007c44 <xTaskResumeAll+0x11c>)
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3318      	adds	r3, #24
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff fd66 	bl	8007652 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3304      	adds	r3, #4
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7ff fd61 	bl	8007652 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b94:	2201      	movs	r2, #1
 8007b96:	409a      	lsls	r2, r3
 8007b98:	4b2b      	ldr	r3, [pc, #172]	; (8007c48 <xTaskResumeAll+0x120>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	4a2a      	ldr	r2, [pc, #168]	; (8007c48 <xTaskResumeAll+0x120>)
 8007ba0:	6013      	str	r3, [r2, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4a27      	ldr	r2, [pc, #156]	; (8007c4c <xTaskResumeAll+0x124>)
 8007bb0:	441a      	add	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4610      	mov	r0, r2
 8007bba:	f7ff fced 	bl	8007598 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc2:	4b23      	ldr	r3, [pc, #140]	; (8007c50 <xTaskResumeAll+0x128>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d302      	bcc.n	8007bd2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007bcc:	4b21      	ldr	r3, [pc, #132]	; (8007c54 <xTaskResumeAll+0x12c>)
 8007bce:	2201      	movs	r2, #1
 8007bd0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bd2:	4b1c      	ldr	r3, [pc, #112]	; (8007c44 <xTaskResumeAll+0x11c>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1cc      	bne.n	8007b74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007be0:	f000 fa2e 	bl	8008040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007be4:	4b1c      	ldr	r3, [pc, #112]	; (8007c58 <xTaskResumeAll+0x130>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d010      	beq.n	8007c12 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bf0:	f000 f836 	bl	8007c60 <xTaskIncrementTick>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007bfa:	4b16      	ldr	r3, [pc, #88]	; (8007c54 <xTaskResumeAll+0x12c>)
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	3b01      	subs	r3, #1
 8007c04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1f1      	bne.n	8007bf0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007c0c:	4b12      	ldr	r3, [pc, #72]	; (8007c58 <xTaskResumeAll+0x130>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c12:	4b10      	ldr	r3, [pc, #64]	; (8007c54 <xTaskResumeAll+0x12c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d009      	beq.n	8007c2e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c1e:	4b0f      	ldr	r3, [pc, #60]	; (8007c5c <xTaskResumeAll+0x134>)
 8007c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c2e:	f000 fbe9 	bl	8008404 <vPortExitCritical>

	return xAlreadyYielded;
 8007c32:	68bb      	ldr	r3, [r7, #8]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	200008f8 	.word	0x200008f8
 8007c40:	200008d0 	.word	0x200008d0
 8007c44:	20000890 	.word	0x20000890
 8007c48:	200008d8 	.word	0x200008d8
 8007c4c:	200007d4 	.word	0x200007d4
 8007c50:	200007d0 	.word	0x200007d0
 8007c54:	200008e4 	.word	0x200008e4
 8007c58:	200008e0 	.word	0x200008e0
 8007c5c:	e000ed04 	.word	0xe000ed04

08007c60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c66:	2300      	movs	r3, #0
 8007c68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c6a:	4b4e      	ldr	r3, [pc, #312]	; (8007da4 <xTaskIncrementTick+0x144>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f040 808e 	bne.w	8007d90 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c74:	4b4c      	ldr	r3, [pc, #304]	; (8007da8 <xTaskIncrementTick+0x148>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c7c:	4a4a      	ldr	r2, [pc, #296]	; (8007da8 <xTaskIncrementTick+0x148>)
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d120      	bne.n	8007cca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c88:	4b48      	ldr	r3, [pc, #288]	; (8007dac <xTaskIncrementTick+0x14c>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00a      	beq.n	8007ca8 <xTaskIncrementTick+0x48>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	603b      	str	r3, [r7, #0]
}
 8007ca4:	bf00      	nop
 8007ca6:	e7fe      	b.n	8007ca6 <xTaskIncrementTick+0x46>
 8007ca8:	4b40      	ldr	r3, [pc, #256]	; (8007dac <xTaskIncrementTick+0x14c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	60fb      	str	r3, [r7, #12]
 8007cae:	4b40      	ldr	r3, [pc, #256]	; (8007db0 <xTaskIncrementTick+0x150>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a3e      	ldr	r2, [pc, #248]	; (8007dac <xTaskIncrementTick+0x14c>)
 8007cb4:	6013      	str	r3, [r2, #0]
 8007cb6:	4a3e      	ldr	r2, [pc, #248]	; (8007db0 <xTaskIncrementTick+0x150>)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6013      	str	r3, [r2, #0]
 8007cbc:	4b3d      	ldr	r3, [pc, #244]	; (8007db4 <xTaskIncrementTick+0x154>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	4a3c      	ldr	r2, [pc, #240]	; (8007db4 <xTaskIncrementTick+0x154>)
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	f000 f9bb 	bl	8008040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007cca:	4b3b      	ldr	r3, [pc, #236]	; (8007db8 <xTaskIncrementTick+0x158>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d348      	bcc.n	8007d66 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cd4:	4b35      	ldr	r3, [pc, #212]	; (8007dac <xTaskIncrementTick+0x14c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d104      	bne.n	8007ce8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cde:	4b36      	ldr	r3, [pc, #216]	; (8007db8 <xTaskIncrementTick+0x158>)
 8007ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce4:	601a      	str	r2, [r3, #0]
					break;
 8007ce6:	e03e      	b.n	8007d66 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce8:	4b30      	ldr	r3, [pc, #192]	; (8007dac <xTaskIncrementTick+0x14c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d203      	bcs.n	8007d08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d00:	4a2d      	ldr	r2, [pc, #180]	; (8007db8 <xTaskIncrementTick+0x158>)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d06:	e02e      	b.n	8007d66 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7ff fca0 	bl	8007652 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d004      	beq.n	8007d24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	3318      	adds	r3, #24
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff fc97 	bl	8007652 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d28:	2201      	movs	r2, #1
 8007d2a:	409a      	lsls	r2, r3
 8007d2c:	4b23      	ldr	r3, [pc, #140]	; (8007dbc <xTaskIncrementTick+0x15c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	4a22      	ldr	r2, [pc, #136]	; (8007dbc <xTaskIncrementTick+0x15c>)
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4413      	add	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4a1f      	ldr	r2, [pc, #124]	; (8007dc0 <xTaskIncrementTick+0x160>)
 8007d44:	441a      	add	r2, r3
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	f7ff fc23 	bl	8007598 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d56:	4b1b      	ldr	r3, [pc, #108]	; (8007dc4 <xTaskIncrementTick+0x164>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d3b9      	bcc.n	8007cd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d60:	2301      	movs	r3, #1
 8007d62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d64:	e7b6      	b.n	8007cd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d66:	4b17      	ldr	r3, [pc, #92]	; (8007dc4 <xTaskIncrementTick+0x164>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6c:	4914      	ldr	r1, [pc, #80]	; (8007dc0 <xTaskIncrementTick+0x160>)
 8007d6e:	4613      	mov	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	440b      	add	r3, r1
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d901      	bls.n	8007d82 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d82:	4b11      	ldr	r3, [pc, #68]	; (8007dc8 <xTaskIncrementTick+0x168>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d007      	beq.n	8007d9a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	e004      	b.n	8007d9a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d90:	4b0e      	ldr	r3, [pc, #56]	; (8007dcc <xTaskIncrementTick+0x16c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3301      	adds	r3, #1
 8007d96:	4a0d      	ldr	r2, [pc, #52]	; (8007dcc <xTaskIncrementTick+0x16c>)
 8007d98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d9a:	697b      	ldr	r3, [r7, #20]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3718      	adds	r7, #24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	200008f8 	.word	0x200008f8
 8007da8:	200008d4 	.word	0x200008d4
 8007dac:	20000888 	.word	0x20000888
 8007db0:	2000088c 	.word	0x2000088c
 8007db4:	200008e8 	.word	0x200008e8
 8007db8:	200008f0 	.word	0x200008f0
 8007dbc:	200008d8 	.word	0x200008d8
 8007dc0:	200007d4 	.word	0x200007d4
 8007dc4:	200007d0 	.word	0x200007d0
 8007dc8:	200008e4 	.word	0x200008e4
 8007dcc:	200008e0 	.word	0x200008e0

08007dd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b088      	sub	sp, #32
 8007dd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007dd6:	4b39      	ldr	r3, [pc, #228]	; (8007ebc <vTaskSwitchContext+0xec>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007dde:	4b38      	ldr	r3, [pc, #224]	; (8007ec0 <vTaskSwitchContext+0xf0>)
 8007de0:	2201      	movs	r2, #1
 8007de2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007de4:	e066      	b.n	8007eb4 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 8007de6:	4b36      	ldr	r3, [pc, #216]	; (8007ec0 <vTaskSwitchContext+0xf0>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007dec:	4b35      	ldr	r3, [pc, #212]	; (8007ec4 <vTaskSwitchContext+0xf4>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df2:	61fb      	str	r3, [r7, #28]
 8007df4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8007df8:	61bb      	str	r3, [r7, #24]
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d111      	bne.n	8007e28 <vTaskSwitchContext+0x58>
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	3304      	adds	r3, #4
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69ba      	ldr	r2, [r7, #24]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d10b      	bne.n	8007e28 <vTaskSwitchContext+0x58>
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	3308      	adds	r3, #8
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d105      	bne.n	8007e28 <vTaskSwitchContext+0x58>
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	330c      	adds	r3, #12
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	69ba      	ldr	r2, [r7, #24]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d008      	beq.n	8007e3a <vTaskSwitchContext+0x6a>
 8007e28:	4b26      	ldr	r3, [pc, #152]	; (8007ec4 <vTaskSwitchContext+0xf4>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	4b25      	ldr	r3, [pc, #148]	; (8007ec4 <vTaskSwitchContext+0xf4>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3334      	adds	r3, #52	; 0x34
 8007e32:	4619      	mov	r1, r3
 8007e34:	4610      	mov	r0, r2
 8007e36:	f7f8 fb64 	bl	8000502 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e3a:	4b23      	ldr	r3, [pc, #140]	; (8007ec8 <vTaskSwitchContext+0xf8>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	fab3 f383 	clz	r3, r3
 8007e46:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007e48:	7afb      	ldrb	r3, [r7, #11]
 8007e4a:	f1c3 031f 	rsb	r3, r3, #31
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	491e      	ldr	r1, [pc, #120]	; (8007ecc <vTaskSwitchContext+0xfc>)
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4613      	mov	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	440b      	add	r3, r1
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <vTaskSwitchContext+0xaa>
	__asm volatile
 8007e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	607b      	str	r3, [r7, #4]
}
 8007e76:	bf00      	nop
 8007e78:	e7fe      	b.n	8007e78 <vTaskSwitchContext+0xa8>
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4a11      	ldr	r2, [pc, #68]	; (8007ecc <vTaskSwitchContext+0xfc>)
 8007e86:	4413      	add	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	605a      	str	r2, [r3, #4]
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	3308      	adds	r3, #8
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d104      	bne.n	8007eaa <vTaskSwitchContext+0xda>
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	605a      	str	r2, [r3, #4]
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	4a04      	ldr	r2, [pc, #16]	; (8007ec4 <vTaskSwitchContext+0xf4>)
 8007eb2:	6013      	str	r3, [r2, #0]
}
 8007eb4:	bf00      	nop
 8007eb6:	3720      	adds	r7, #32
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	200008f8 	.word	0x200008f8
 8007ec0:	200008e4 	.word	0x200008e4
 8007ec4:	200007d0 	.word	0x200007d0
 8007ec8:	200008d8 	.word	0x200008d8
 8007ecc:	200007d4 	.word	0x200007d4

08007ed0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ed8:	f000 f854 	bl	8007f84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007edc:	4b07      	ldr	r3, [pc, #28]	; (8007efc <prvIdleTask+0x2c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d907      	bls.n	8007ef4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007ee4:	4b06      	ldr	r3, [pc, #24]	; (8007f00 <prvIdleTask+0x30>)
 8007ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007ef4:	f7f8 fafe 	bl	80004f4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007ef8:	e7ee      	b.n	8007ed8 <prvIdleTask+0x8>
 8007efa:	bf00      	nop
 8007efc:	200007d4 	.word	0x200007d4
 8007f00:	e000ed04 	.word	0xe000ed04

08007f04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	607b      	str	r3, [r7, #4]
 8007f0e:	e00c      	b.n	8007f2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4a12      	ldr	r2, [pc, #72]	; (8007f64 <prvInitialiseTaskLists+0x60>)
 8007f1c:	4413      	add	r3, r2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7ff fb0d 	bl	800753e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3301      	adds	r3, #1
 8007f28:	607b      	str	r3, [r7, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b06      	cmp	r3, #6
 8007f2e:	d9ef      	bls.n	8007f10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f30:	480d      	ldr	r0, [pc, #52]	; (8007f68 <prvInitialiseTaskLists+0x64>)
 8007f32:	f7ff fb04 	bl	800753e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f36:	480d      	ldr	r0, [pc, #52]	; (8007f6c <prvInitialiseTaskLists+0x68>)
 8007f38:	f7ff fb01 	bl	800753e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f3c:	480c      	ldr	r0, [pc, #48]	; (8007f70 <prvInitialiseTaskLists+0x6c>)
 8007f3e:	f7ff fafe 	bl	800753e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f42:	480c      	ldr	r0, [pc, #48]	; (8007f74 <prvInitialiseTaskLists+0x70>)
 8007f44:	f7ff fafb 	bl	800753e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f48:	480b      	ldr	r0, [pc, #44]	; (8007f78 <prvInitialiseTaskLists+0x74>)
 8007f4a:	f7ff faf8 	bl	800753e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f4e:	4b0b      	ldr	r3, [pc, #44]	; (8007f7c <prvInitialiseTaskLists+0x78>)
 8007f50:	4a05      	ldr	r2, [pc, #20]	; (8007f68 <prvInitialiseTaskLists+0x64>)
 8007f52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f54:	4b0a      	ldr	r3, [pc, #40]	; (8007f80 <prvInitialiseTaskLists+0x7c>)
 8007f56:	4a05      	ldr	r2, [pc, #20]	; (8007f6c <prvInitialiseTaskLists+0x68>)
 8007f58:	601a      	str	r2, [r3, #0]
}
 8007f5a:	bf00      	nop
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	200007d4 	.word	0x200007d4
 8007f68:	20000860 	.word	0x20000860
 8007f6c:	20000874 	.word	0x20000874
 8007f70:	20000890 	.word	0x20000890
 8007f74:	200008a4 	.word	0x200008a4
 8007f78:	200008bc 	.word	0x200008bc
 8007f7c:	20000888 	.word	0x20000888
 8007f80:	2000088c 	.word	0x2000088c

08007f84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f8a:	e019      	b.n	8007fc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f8c:	f000 fa0a 	bl	80083a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f90:	4b10      	ldr	r3, [pc, #64]	; (8007fd4 <prvCheckTasksWaitingTermination+0x50>)
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff fb58 	bl	8007652 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fa2:	4b0d      	ldr	r3, [pc, #52]	; (8007fd8 <prvCheckTasksWaitingTermination+0x54>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	4a0b      	ldr	r2, [pc, #44]	; (8007fd8 <prvCheckTasksWaitingTermination+0x54>)
 8007faa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fac:	4b0b      	ldr	r3, [pc, #44]	; (8007fdc <prvCheckTasksWaitingTermination+0x58>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	4a0a      	ldr	r2, [pc, #40]	; (8007fdc <prvCheckTasksWaitingTermination+0x58>)
 8007fb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fb6:	f000 fa25 	bl	8008404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f810 	bl	8007fe0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fc0:	4b06      	ldr	r3, [pc, #24]	; (8007fdc <prvCheckTasksWaitingTermination+0x58>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e1      	bne.n	8007f8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	200008a4 	.word	0x200008a4
 8007fd8:	200008d0 	.word	0x200008d0
 8007fdc:	200008b8 	.word	0x200008b8

08007fe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d108      	bne.n	8008004 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 fb86 	bl	8008708 <vPortFree>
				vPortFree( pxTCB );
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fb83 	bl	8008708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008002:	e018      	b.n	8008036 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800800a:	2b01      	cmp	r3, #1
 800800c:	d103      	bne.n	8008016 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fb7a 	bl	8008708 <vPortFree>
	}
 8008014:	e00f      	b.n	8008036 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800801c:	2b02      	cmp	r3, #2
 800801e:	d00a      	beq.n	8008036 <prvDeleteTCB+0x56>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	60fb      	str	r3, [r7, #12]
}
 8008032:	bf00      	nop
 8008034:	e7fe      	b.n	8008034 <prvDeleteTCB+0x54>
	}
 8008036:	bf00      	nop
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008046:	4b0c      	ldr	r3, [pc, #48]	; (8008078 <prvResetNextTaskUnblockTime+0x38>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d104      	bne.n	800805a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008050:	4b0a      	ldr	r3, [pc, #40]	; (800807c <prvResetNextTaskUnblockTime+0x3c>)
 8008052:	f04f 32ff 	mov.w	r2, #4294967295
 8008056:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008058:	e008      	b.n	800806c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800805a:	4b07      	ldr	r3, [pc, #28]	; (8008078 <prvResetNextTaskUnblockTime+0x38>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	4a04      	ldr	r2, [pc, #16]	; (800807c <prvResetNextTaskUnblockTime+0x3c>)
 800806a:	6013      	str	r3, [r2, #0]
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	20000888 	.word	0x20000888
 800807c:	200008f0 	.word	0x200008f0

08008080 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800808a:	4b29      	ldr	r3, [pc, #164]	; (8008130 <prvAddCurrentTaskToDelayedList+0xb0>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008090:	4b28      	ldr	r3, [pc, #160]	; (8008134 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3304      	adds	r3, #4
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff fadb 	bl	8007652 <uxListRemove>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10b      	bne.n	80080ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80080a2:	4b24      	ldr	r3, [pc, #144]	; (8008134 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a8:	2201      	movs	r2, #1
 80080aa:	fa02 f303 	lsl.w	r3, r2, r3
 80080ae:	43da      	mvns	r2, r3
 80080b0:	4b21      	ldr	r3, [pc, #132]	; (8008138 <prvAddCurrentTaskToDelayedList+0xb8>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4013      	ands	r3, r2
 80080b6:	4a20      	ldr	r2, [pc, #128]	; (8008138 <prvAddCurrentTaskToDelayedList+0xb8>)
 80080b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c0:	d10a      	bne.n	80080d8 <prvAddCurrentTaskToDelayedList+0x58>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d007      	beq.n	80080d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080c8:	4b1a      	ldr	r3, [pc, #104]	; (8008134 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3304      	adds	r3, #4
 80080ce:	4619      	mov	r1, r3
 80080d0:	481a      	ldr	r0, [pc, #104]	; (800813c <prvAddCurrentTaskToDelayedList+0xbc>)
 80080d2:	f7ff fa61 	bl	8007598 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080d6:	e026      	b.n	8008126 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4413      	add	r3, r2
 80080de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080e0:	4b14      	ldr	r3, [pc, #80]	; (8008134 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d209      	bcs.n	8008104 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080f0:	4b13      	ldr	r3, [pc, #76]	; (8008140 <prvAddCurrentTaskToDelayedList+0xc0>)
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	4b0f      	ldr	r3, [pc, #60]	; (8008134 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3304      	adds	r3, #4
 80080fa:	4619      	mov	r1, r3
 80080fc:	4610      	mov	r0, r2
 80080fe:	f7ff fa6f 	bl	80075e0 <vListInsert>
}
 8008102:	e010      	b.n	8008126 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008104:	4b0f      	ldr	r3, [pc, #60]	; (8008144 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <prvAddCurrentTaskToDelayedList+0xb4>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3304      	adds	r3, #4
 800810e:	4619      	mov	r1, r3
 8008110:	4610      	mov	r0, r2
 8008112:	f7ff fa65 	bl	80075e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008116:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	429a      	cmp	r2, r3
 800811e:	d202      	bcs.n	8008126 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008120:	4a09      	ldr	r2, [pc, #36]	; (8008148 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	6013      	str	r3, [r2, #0]
}
 8008126:	bf00      	nop
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	200008d4 	.word	0x200008d4
 8008134:	200007d0 	.word	0x200007d0
 8008138:	200008d8 	.word	0x200008d8
 800813c:	200008bc 	.word	0x200008bc
 8008140:	2000088c 	.word	0x2000088c
 8008144:	20000888 	.word	0x20000888
 8008148:	200008f0 	.word	0x200008f0

0800814c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3b04      	subs	r3, #4
 800815c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3b04      	subs	r3, #4
 800816a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f023 0201 	bic.w	r2, r3, #1
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	3b04      	subs	r3, #4
 800817a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800817c:	4a0c      	ldr	r2, [pc, #48]	; (80081b0 <pxPortInitialiseStack+0x64>)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3b14      	subs	r3, #20
 8008186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	3b04      	subs	r3, #4
 8008192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f06f 0202 	mvn.w	r2, #2
 800819a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3b20      	subs	r3, #32
 80081a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80081a2:	68fb      	ldr	r3, [r7, #12]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	080081b5 	.word	0x080081b5

080081b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80081be:	4b12      	ldr	r3, [pc, #72]	; (8008208 <prvTaskExitError+0x54>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c6:	d00a      	beq.n	80081de <prvTaskExitError+0x2a>
	__asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	60fb      	str	r3, [r7, #12]
}
 80081da:	bf00      	nop
 80081dc:	e7fe      	b.n	80081dc <prvTaskExitError+0x28>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	60bb      	str	r3, [r7, #8]
}
 80081f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081f2:	bf00      	nop
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d0fc      	beq.n	80081f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081fa:	bf00      	nop
 80081fc:	bf00      	nop
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	20000054 	.word	0x20000054
 800820c:	00000000 	.word	0x00000000

08008210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008210:	4b07      	ldr	r3, [pc, #28]	; (8008230 <pxCurrentTCBConst2>)
 8008212:	6819      	ldr	r1, [r3, #0]
 8008214:	6808      	ldr	r0, [r1, #0]
 8008216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821a:	f380 8809 	msr	PSP, r0
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f04f 0000 	mov.w	r0, #0
 8008226:	f380 8811 	msr	BASEPRI, r0
 800822a:	4770      	bx	lr
 800822c:	f3af 8000 	nop.w

08008230 <pxCurrentTCBConst2>:
 8008230:	200007d0 	.word	0x200007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008234:	bf00      	nop
 8008236:	bf00      	nop

08008238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008238:	4808      	ldr	r0, [pc, #32]	; (800825c <prvPortStartFirstTask+0x24>)
 800823a:	6800      	ldr	r0, [r0, #0]
 800823c:	6800      	ldr	r0, [r0, #0]
 800823e:	f380 8808 	msr	MSP, r0
 8008242:	f04f 0000 	mov.w	r0, #0
 8008246:	f380 8814 	msr	CONTROL, r0
 800824a:	b662      	cpsie	i
 800824c:	b661      	cpsie	f
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	df00      	svc	0
 8008258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800825a:	bf00      	nop
 800825c:	e000ed08 	.word	0xe000ed08

08008260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008266:	4b46      	ldr	r3, [pc, #280]	; (8008380 <xPortStartScheduler+0x120>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a46      	ldr	r2, [pc, #280]	; (8008384 <xPortStartScheduler+0x124>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d10a      	bne.n	8008286 <xPortStartScheduler+0x26>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	613b      	str	r3, [r7, #16]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008286:	4b3e      	ldr	r3, [pc, #248]	; (8008380 <xPortStartScheduler+0x120>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a3f      	ldr	r2, [pc, #252]	; (8008388 <xPortStartScheduler+0x128>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d10a      	bne.n	80082a6 <xPortStartScheduler+0x46>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	60fb      	str	r3, [r7, #12]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082a6:	4b39      	ldr	r3, [pc, #228]	; (800838c <xPortStartScheduler+0x12c>)
 80082a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	22ff      	movs	r2, #255	; 0xff
 80082b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	4b31      	ldr	r3, [pc, #196]	; (8008390 <xPortStartScheduler+0x130>)
 80082cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082ce:	4b31      	ldr	r3, [pc, #196]	; (8008394 <xPortStartScheduler+0x134>)
 80082d0:	2207      	movs	r2, #7
 80082d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082d4:	e009      	b.n	80082ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80082d6:	4b2f      	ldr	r3, [pc, #188]	; (8008394 <xPortStartScheduler+0x134>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3b01      	subs	r3, #1
 80082dc:	4a2d      	ldr	r2, [pc, #180]	; (8008394 <xPortStartScheduler+0x134>)
 80082de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082ea:	78fb      	ldrb	r3, [r7, #3]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f2:	2b80      	cmp	r3, #128	; 0x80
 80082f4:	d0ef      	beq.n	80082d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082f6:	4b27      	ldr	r3, [pc, #156]	; (8008394 <xPortStartScheduler+0x134>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f1c3 0307 	rsb	r3, r3, #7
 80082fe:	2b04      	cmp	r3, #4
 8008300:	d00a      	beq.n	8008318 <xPortStartScheduler+0xb8>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	60bb      	str	r3, [r7, #8]
}
 8008314:	bf00      	nop
 8008316:	e7fe      	b.n	8008316 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008318:	4b1e      	ldr	r3, [pc, #120]	; (8008394 <xPortStartScheduler+0x134>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	4a1d      	ldr	r2, [pc, #116]	; (8008394 <xPortStartScheduler+0x134>)
 8008320:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008322:	4b1c      	ldr	r3, [pc, #112]	; (8008394 <xPortStartScheduler+0x134>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800832a:	4a1a      	ldr	r2, [pc, #104]	; (8008394 <xPortStartScheduler+0x134>)
 800832c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	b2da      	uxtb	r2, r3
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008336:	4b18      	ldr	r3, [pc, #96]	; (8008398 <xPortStartScheduler+0x138>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a17      	ldr	r2, [pc, #92]	; (8008398 <xPortStartScheduler+0x138>)
 800833c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008342:	4b15      	ldr	r3, [pc, #84]	; (8008398 <xPortStartScheduler+0x138>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a14      	ldr	r2, [pc, #80]	; (8008398 <xPortStartScheduler+0x138>)
 8008348:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800834c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800834e:	f000 f8dd 	bl	800850c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008352:	4b12      	ldr	r3, [pc, #72]	; (800839c <xPortStartScheduler+0x13c>)
 8008354:	2200      	movs	r2, #0
 8008356:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008358:	f000 f8fc 	bl	8008554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800835c:	4b10      	ldr	r3, [pc, #64]	; (80083a0 <xPortStartScheduler+0x140>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a0f      	ldr	r2, [pc, #60]	; (80083a0 <xPortStartScheduler+0x140>)
 8008362:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008366:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008368:	f7ff ff66 	bl	8008238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800836c:	f7ff fd30 	bl	8007dd0 <vTaskSwitchContext>
	prvTaskExitError();
 8008370:	f7ff ff20 	bl	80081b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	e000ed00 	.word	0xe000ed00
 8008384:	410fc271 	.word	0x410fc271
 8008388:	410fc270 	.word	0x410fc270
 800838c:	e000e400 	.word	0xe000e400
 8008390:	200008fc 	.word	0x200008fc
 8008394:	20000900 	.word	0x20000900
 8008398:	e000ed20 	.word	0xe000ed20
 800839c:	20000054 	.word	0x20000054
 80083a0:	e000ef34 	.word	0xe000ef34

080083a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
	__asm volatile
 80083aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	607b      	str	r3, [r7, #4]
}
 80083bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80083be:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <vPortEnterCritical+0x58>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3301      	adds	r3, #1
 80083c4:	4a0d      	ldr	r2, [pc, #52]	; (80083fc <vPortEnterCritical+0x58>)
 80083c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80083c8:	4b0c      	ldr	r3, [pc, #48]	; (80083fc <vPortEnterCritical+0x58>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d10f      	bne.n	80083f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80083d0:	4b0b      	ldr	r3, [pc, #44]	; (8008400 <vPortEnterCritical+0x5c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	603b      	str	r3, [r7, #0]
}
 80083ec:	bf00      	nop
 80083ee:	e7fe      	b.n	80083ee <vPortEnterCritical+0x4a>
	}
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	20000054 	.word	0x20000054
 8008400:	e000ed04 	.word	0xe000ed04

08008404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800840a:	4b12      	ldr	r3, [pc, #72]	; (8008454 <vPortExitCritical+0x50>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10a      	bne.n	8008428 <vPortExitCritical+0x24>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	607b      	str	r3, [r7, #4]
}
 8008424:	bf00      	nop
 8008426:	e7fe      	b.n	8008426 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008428:	4b0a      	ldr	r3, [pc, #40]	; (8008454 <vPortExitCritical+0x50>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3b01      	subs	r3, #1
 800842e:	4a09      	ldr	r2, [pc, #36]	; (8008454 <vPortExitCritical+0x50>)
 8008430:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008432:	4b08      	ldr	r3, [pc, #32]	; (8008454 <vPortExitCritical+0x50>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d105      	bne.n	8008446 <vPortExitCritical+0x42>
 800843a:	2300      	movs	r3, #0
 800843c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008444:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008446:	bf00      	nop
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	20000054 	.word	0x20000054
	...

08008460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008460:	f3ef 8009 	mrs	r0, PSP
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	4b15      	ldr	r3, [pc, #84]	; (80084c0 <pxCurrentTCBConst>)
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	f01e 0f10 	tst.w	lr, #16
 8008470:	bf08      	it	eq
 8008472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847a:	6010      	str	r0, [r2, #0]
 800847c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008484:	f380 8811 	msr	BASEPRI, r0
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f7ff fc9e 	bl	8007dd0 <vTaskSwitchContext>
 8008494:	f04f 0000 	mov.w	r0, #0
 8008498:	f380 8811 	msr	BASEPRI, r0
 800849c:	bc09      	pop	{r0, r3}
 800849e:	6819      	ldr	r1, [r3, #0]
 80084a0:	6808      	ldr	r0, [r1, #0]
 80084a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a6:	f01e 0f10 	tst.w	lr, #16
 80084aa:	bf08      	it	eq
 80084ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084b0:	f380 8809 	msr	PSP, r0
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	f3af 8000 	nop.w

080084c0 <pxCurrentTCBConst>:
 80084c0:	200007d0 	.word	0x200007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084c4:	bf00      	nop
 80084c6:	bf00      	nop

080084c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	607b      	str	r3, [r7, #4]
}
 80084e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80084e2:	f7ff fbbd 	bl	8007c60 <xTaskIncrementTick>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084ec:	4b06      	ldr	r3, [pc, #24]	; (8008508 <SysTick_Handler+0x40>)
 80084ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	2300      	movs	r3, #0
 80084f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	f383 8811 	msr	BASEPRI, r3
}
 80084fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	e000ed04 	.word	0xe000ed04

0800850c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800850c:	b480      	push	{r7}
 800850e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008510:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <vPortSetupTimerInterrupt+0x34>)
 8008512:	2200      	movs	r2, #0
 8008514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008516:	4b0b      	ldr	r3, [pc, #44]	; (8008544 <vPortSetupTimerInterrupt+0x38>)
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800851c:	4b0a      	ldr	r3, [pc, #40]	; (8008548 <vPortSetupTimerInterrupt+0x3c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a0a      	ldr	r2, [pc, #40]	; (800854c <vPortSetupTimerInterrupt+0x40>)
 8008522:	fba2 2303 	umull	r2, r3, r2, r3
 8008526:	099b      	lsrs	r3, r3, #6
 8008528:	4a09      	ldr	r2, [pc, #36]	; (8008550 <vPortSetupTimerInterrupt+0x44>)
 800852a:	3b01      	subs	r3, #1
 800852c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800852e:	4b04      	ldr	r3, [pc, #16]	; (8008540 <vPortSetupTimerInterrupt+0x34>)
 8008530:	2207      	movs	r2, #7
 8008532:	601a      	str	r2, [r3, #0]
}
 8008534:	bf00      	nop
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	e000e010 	.word	0xe000e010
 8008544:	e000e018 	.word	0xe000e018
 8008548:	20000000 	.word	0x20000000
 800854c:	10624dd3 	.word	0x10624dd3
 8008550:	e000e014 	.word	0xe000e014

08008554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008564 <vPortEnableVFP+0x10>
 8008558:	6801      	ldr	r1, [r0, #0]
 800855a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800855e:	6001      	str	r1, [r0, #0]
 8008560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008562:	bf00      	nop
 8008564:	e000ed88 	.word	0xe000ed88

08008568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b08a      	sub	sp, #40	; 0x28
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008570:	2300      	movs	r3, #0
 8008572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008574:	f7ff faca 	bl	8007b0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008578:	4b5d      	ldr	r3, [pc, #372]	; (80086f0 <pvPortMalloc+0x188>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008580:	f000 f924 	bl	80087cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008584:	4b5b      	ldr	r3, [pc, #364]	; (80086f4 <pvPortMalloc+0x18c>)
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4013      	ands	r3, r2
 800858c:	2b00      	cmp	r3, #0
 800858e:	f040 8093 	bne.w	80086b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d01d      	beq.n	80085d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008598:	2208      	movs	r2, #8
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4413      	add	r3, r2
 800859e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f003 0307 	and.w	r3, r3, #7
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d014      	beq.n	80085d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f023 0307 	bic.w	r3, r3, #7
 80085b0:	3308      	adds	r3, #8
 80085b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <pvPortMalloc+0x6c>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	617b      	str	r3, [r7, #20]
}
 80085d0:	bf00      	nop
 80085d2:	e7fe      	b.n	80085d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d06e      	beq.n	80086b8 <pvPortMalloc+0x150>
 80085da:	4b47      	ldr	r3, [pc, #284]	; (80086f8 <pvPortMalloc+0x190>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d869      	bhi.n	80086b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085e4:	4b45      	ldr	r3, [pc, #276]	; (80086fc <pvPortMalloc+0x194>)
 80085e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085e8:	4b44      	ldr	r3, [pc, #272]	; (80086fc <pvPortMalloc+0x194>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085ee:	e004      	b.n	80085fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	429a      	cmp	r2, r3
 8008602:	d903      	bls.n	800860c <pvPortMalloc+0xa4>
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1f1      	bne.n	80085f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800860c:	4b38      	ldr	r3, [pc, #224]	; (80086f0 <pvPortMalloc+0x188>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008612:	429a      	cmp	r2, r3
 8008614:	d050      	beq.n	80086b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2208      	movs	r2, #8
 800861c:	4413      	add	r3, r2
 800861e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	1ad2      	subs	r2, r2, r3
 8008630:	2308      	movs	r3, #8
 8008632:	005b      	lsls	r3, r3, #1
 8008634:	429a      	cmp	r2, r3
 8008636:	d91f      	bls.n	8008678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4413      	add	r3, r2
 800863e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	f003 0307 	and.w	r3, r3, #7
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00a      	beq.n	8008660 <pvPortMalloc+0xf8>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	613b      	str	r3, [r7, #16]
}
 800865c:	bf00      	nop
 800865e:	e7fe      	b.n	800865e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	1ad2      	subs	r2, r2, r3
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008672:	69b8      	ldr	r0, [r7, #24]
 8008674:	f000 f90c 	bl	8008890 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008678:	4b1f      	ldr	r3, [pc, #124]	; (80086f8 <pvPortMalloc+0x190>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	4a1d      	ldr	r2, [pc, #116]	; (80086f8 <pvPortMalloc+0x190>)
 8008684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008686:	4b1c      	ldr	r3, [pc, #112]	; (80086f8 <pvPortMalloc+0x190>)
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	4b1d      	ldr	r3, [pc, #116]	; (8008700 <pvPortMalloc+0x198>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	429a      	cmp	r2, r3
 8008690:	d203      	bcs.n	800869a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008692:	4b19      	ldr	r3, [pc, #100]	; (80086f8 <pvPortMalloc+0x190>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a1a      	ldr	r2, [pc, #104]	; (8008700 <pvPortMalloc+0x198>)
 8008698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	4b15      	ldr	r3, [pc, #84]	; (80086f4 <pvPortMalloc+0x18c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	431a      	orrs	r2, r3
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	2200      	movs	r2, #0
 80086ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80086ae:	4b15      	ldr	r3, [pc, #84]	; (8008704 <pvPortMalloc+0x19c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3301      	adds	r3, #1
 80086b4:	4a13      	ldr	r2, [pc, #76]	; (8008704 <pvPortMalloc+0x19c>)
 80086b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086b8:	f7ff fa36 	bl	8007b28 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80086c2:	f7f7 ff29 	bl	8000518 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00a      	beq.n	80086e6 <pvPortMalloc+0x17e>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	60fb      	str	r3, [r7, #12]
}
 80086e2:	bf00      	nop
 80086e4:	e7fe      	b.n	80086e4 <pvPortMalloc+0x17c>
	return pvReturn;
 80086e6:	69fb      	ldr	r3, [r7, #28]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3728      	adds	r7, #40	; 0x28
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	2000890c 	.word	0x2000890c
 80086f4:	20008920 	.word	0x20008920
 80086f8:	20008910 	.word	0x20008910
 80086fc:	20008904 	.word	0x20008904
 8008700:	20008914 	.word	0x20008914
 8008704:	20008918 	.word	0x20008918

08008708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d04d      	beq.n	80087b6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800871a:	2308      	movs	r3, #8
 800871c:	425b      	negs	r3, r3
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4413      	add	r3, r2
 8008722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	4b24      	ldr	r3, [pc, #144]	; (80087c0 <vPortFree+0xb8>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4013      	ands	r3, r2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10a      	bne.n	800874c <vPortFree+0x44>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	60fb      	str	r3, [r7, #12]
}
 8008748:	bf00      	nop
 800874a:	e7fe      	b.n	800874a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00a      	beq.n	800876a <vPortFree+0x62>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	60bb      	str	r3, [r7, #8]
}
 8008766:	bf00      	nop
 8008768:	e7fe      	b.n	8008768 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	4b14      	ldr	r3, [pc, #80]	; (80087c0 <vPortFree+0xb8>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4013      	ands	r3, r2
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01e      	beq.n	80087b6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d11a      	bne.n	80087b6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	4b0e      	ldr	r3, [pc, #56]	; (80087c0 <vPortFree+0xb8>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	43db      	mvns	r3, r3
 800878a:	401a      	ands	r2, r3
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008790:	f7ff f9bc 	bl	8007b0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <vPortFree+0xbc>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4413      	add	r3, r2
 800879e:	4a09      	ldr	r2, [pc, #36]	; (80087c4 <vPortFree+0xbc>)
 80087a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087a2:	6938      	ldr	r0, [r7, #16]
 80087a4:	f000 f874 	bl	8008890 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80087a8:	4b07      	ldr	r3, [pc, #28]	; (80087c8 <vPortFree+0xc0>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3301      	adds	r3, #1
 80087ae:	4a06      	ldr	r2, [pc, #24]	; (80087c8 <vPortFree+0xc0>)
 80087b0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80087b2:	f7ff f9b9 	bl	8007b28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087b6:	bf00      	nop
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20008920 	.word	0x20008920
 80087c4:	20008910 	.word	0x20008910
 80087c8:	2000891c 	.word	0x2000891c

080087cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087d8:	4b27      	ldr	r3, [pc, #156]	; (8008878 <prvHeapInit+0xac>)
 80087da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f003 0307 	and.w	r3, r3, #7
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00c      	beq.n	8008800 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3307      	adds	r3, #7
 80087ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 0307 	bic.w	r3, r3, #7
 80087f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	4a1f      	ldr	r2, [pc, #124]	; (8008878 <prvHeapInit+0xac>)
 80087fc:	4413      	add	r3, r2
 80087fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008804:	4a1d      	ldr	r2, [pc, #116]	; (800887c <prvHeapInit+0xb0>)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800880a:	4b1c      	ldr	r3, [pc, #112]	; (800887c <prvHeapInit+0xb0>)
 800880c:	2200      	movs	r2, #0
 800880e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	4413      	add	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008818:	2208      	movs	r2, #8
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	1a9b      	subs	r3, r3, r2
 800881e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f023 0307 	bic.w	r3, r3, #7
 8008826:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	4a15      	ldr	r2, [pc, #84]	; (8008880 <prvHeapInit+0xb4>)
 800882c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800882e:	4b14      	ldr	r3, [pc, #80]	; (8008880 <prvHeapInit+0xb4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2200      	movs	r2, #0
 8008834:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008836:	4b12      	ldr	r3, [pc, #72]	; (8008880 <prvHeapInit+0xb4>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2200      	movs	r2, #0
 800883c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	1ad2      	subs	r2, r2, r3
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800884c:	4b0c      	ldr	r3, [pc, #48]	; (8008880 <prvHeapInit+0xb4>)
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	4a0a      	ldr	r2, [pc, #40]	; (8008884 <prvHeapInit+0xb8>)
 800885a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	4a09      	ldr	r2, [pc, #36]	; (8008888 <prvHeapInit+0xbc>)
 8008862:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008864:	4b09      	ldr	r3, [pc, #36]	; (800888c <prvHeapInit+0xc0>)
 8008866:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800886a:	601a      	str	r2, [r3, #0]
}
 800886c:	bf00      	nop
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	20000904 	.word	0x20000904
 800887c:	20008904 	.word	0x20008904
 8008880:	2000890c 	.word	0x2000890c
 8008884:	20008914 	.word	0x20008914
 8008888:	20008910 	.word	0x20008910
 800888c:	20008920 	.word	0x20008920

08008890 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008898:	4b28      	ldr	r3, [pc, #160]	; (800893c <prvInsertBlockIntoFreeList+0xac>)
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	e002      	b.n	80088a4 <prvInsertBlockIntoFreeList+0x14>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d8f7      	bhi.n	800889e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	4413      	add	r3, r2
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d108      	bne.n	80088d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	441a      	add	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	441a      	add	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d118      	bne.n	8008918 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	4b15      	ldr	r3, [pc, #84]	; (8008940 <prvInsertBlockIntoFreeList+0xb0>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d00d      	beq.n	800890e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	441a      	add	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	601a      	str	r2, [r3, #0]
 800890c:	e008      	b.n	8008920 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800890e:	4b0c      	ldr	r3, [pc, #48]	; (8008940 <prvInsertBlockIntoFreeList+0xb0>)
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	e003      	b.n	8008920 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	429a      	cmp	r2, r3
 8008926:	d002      	beq.n	800892e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800892e:	bf00      	nop
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	20008904 	.word	0x20008904
 8008940:	2000890c 	.word	0x2000890c

08008944 <__libc_init_array>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	4d0d      	ldr	r5, [pc, #52]	; (800897c <__libc_init_array+0x38>)
 8008948:	4c0d      	ldr	r4, [pc, #52]	; (8008980 <__libc_init_array+0x3c>)
 800894a:	1b64      	subs	r4, r4, r5
 800894c:	10a4      	asrs	r4, r4, #2
 800894e:	2600      	movs	r6, #0
 8008950:	42a6      	cmp	r6, r4
 8008952:	d109      	bne.n	8008968 <__libc_init_array+0x24>
 8008954:	4d0b      	ldr	r5, [pc, #44]	; (8008984 <__libc_init_array+0x40>)
 8008956:	4c0c      	ldr	r4, [pc, #48]	; (8008988 <__libc_init_array+0x44>)
 8008958:	f000 f820 	bl	800899c <_init>
 800895c:	1b64      	subs	r4, r4, r5
 800895e:	10a4      	asrs	r4, r4, #2
 8008960:	2600      	movs	r6, #0
 8008962:	42a6      	cmp	r6, r4
 8008964:	d105      	bne.n	8008972 <__libc_init_array+0x2e>
 8008966:	bd70      	pop	{r4, r5, r6, pc}
 8008968:	f855 3b04 	ldr.w	r3, [r5], #4
 800896c:	4798      	blx	r3
 800896e:	3601      	adds	r6, #1
 8008970:	e7ee      	b.n	8008950 <__libc_init_array+0xc>
 8008972:	f855 3b04 	ldr.w	r3, [r5], #4
 8008976:	4798      	blx	r3
 8008978:	3601      	adds	r6, #1
 800897a:	e7f2      	b.n	8008962 <__libc_init_array+0x1e>
 800897c:	0800a4d8 	.word	0x0800a4d8
 8008980:	0800a4d8 	.word	0x0800a4d8
 8008984:	0800a4d8 	.word	0x0800a4d8
 8008988:	0800a4dc 	.word	0x0800a4dc

0800898c <memset>:
 800898c:	4402      	add	r2, r0
 800898e:	4603      	mov	r3, r0
 8008990:	4293      	cmp	r3, r2
 8008992:	d100      	bne.n	8008996 <memset+0xa>
 8008994:	4770      	bx	lr
 8008996:	f803 1b01 	strb.w	r1, [r3], #1
 800899a:	e7f9      	b.n	8008990 <memset+0x4>

0800899c <_init>:
 800899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899e:	bf00      	nop
 80089a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089a2:	bc08      	pop	{r3}
 80089a4:	469e      	mov	lr, r3
 80089a6:	4770      	bx	lr

080089a8 <_fini>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	bf00      	nop
 80089ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ae:	bc08      	pop	{r3}
 80089b0:	469e      	mov	lr, r3
 80089b2:	4770      	bx	lr
